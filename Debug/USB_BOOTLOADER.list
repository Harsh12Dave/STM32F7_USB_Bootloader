
USB_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c290  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0800c490  0800c490  0001c490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c4  0800c7c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7cc  0800c7cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7d0  0800c7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c7d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000112fc  20000090  0800c864  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001138c  0800c864  0002138c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d68  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005006  00000000  00000000  00046e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  0004be30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  0004d178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000351b6  00000000  00000000  0004e298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001764e  00000000  00000000  0008344e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013ff5e  00000000  00000000  0009aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001da9fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  001daa78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c478 	.word	0x0800c478

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	0800c478 	.word	0x0800c478

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <no_usb_detected>:
extern FIL fileR;
extern DIR dir;
extern FILINFO fno;

unsigned char no_usb_detected(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	if((overflow >= USB_WAIT_PERIOD) && (detetcted_flag == 0))
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <no_usb_detected+0x28>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d905      	bls.n	80005fc <no_usb_detected+0x1c>
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <no_usb_detected+0x2c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <no_usb_detected+0x1c>
	{
		return 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e000      	b.n	80005fe <no_usb_detected+0x1e>
	}
	else
	{
		return 0;
 80005fc:	2300      	movs	r3, #0
	}
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2001085c 	.word	0x2001085c
 800060c:	200100ac 	.word	0x200100ac

08000610 <COMMAND_PREPARE_USB>:

char COMMAND_PREPARE_USB(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	if(f_mount(&myUsbFatFS, (TCHAR const*)USBH_Path, 0) == FR_OK)
 8000614:	2200      	movs	r2, #0
 8000616:	4906      	ldr	r1, [pc, #24]	; (8000630 <COMMAND_PREPARE_USB+0x20>)
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <COMMAND_PREPARE_USB+0x24>)
 800061a:	f009 ff9d 	bl	800a558 <f_mount>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <COMMAND_PREPARE_USB+0x18>
	{
		return 0;
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <COMMAND_PREPARE_USB+0x1a>
	}
	else
	{
		return -1;
 8000628:	23ff      	movs	r3, #255	; 0xff
	}
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20010ce4 	.word	0x20010ce4
 8000634:	20010560 	.word	0x20010560

08000638 <COMMAND_DOWNLOAD>:
void COMMAND_DOWNLOAD(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
	FILINFO file_info;
	if (f_open(&fileR, DOWNLOAD_FILENAME, FA_READ) == FR_OK)
 800063e:	2201      	movs	r2, #1
 8000640:	4918      	ldr	r1, [pc, #96]	; (80006a4 <COMMAND_DOWNLOAD+0x6c>)
 8000642:	4819      	ldr	r0, [pc, #100]	; (80006a8 <COMMAND_DOWNLOAD+0x70>)
 8000644:	f009 ffce 	bl	800a5e4 <f_open>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d126      	bne.n	800069c <COMMAND_DOWNLOAD+0x64>
	{
		detetcted_flag = 1;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <COMMAND_DOWNLOAD+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
		memset(&file_info, 0 , sizeof(file_info));
 8000654:	463b      	mov	r3, r7
 8000656:	2218      	movs	r2, #24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a ffbb 	bl	800b5d6 <memset>
		if(f_stat(DOWNLOAD_FILENAME, &file_info) == FR_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <COMMAND_DOWNLOAD+0x6c>)
 8000666:	f00a fb62 	bl	800ad2e <f_stat>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d115      	bne.n	800069c <COMMAND_DOWNLOAD+0x64>
		{
			if (file_info.fsize > (0x81FFFFF - 0x8100000))
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000676:	d211      	bcs.n	800069c <COMMAND_DOWNLOAD+0x64>
			{
				;
			}
			else
			{
				Erase_Flash();
 8000678:	f000 f848 	bl	800070c <Erase_Flash>
				COMMAND_ProgramFlashMemory();
 800067c:	f000 f81c 	bl	80006b8 <COMMAND_ProgramFlashMemory>
				printf("Flashing completed..\r\nPlease remove the USB stick\r\n");
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <COMMAND_DOWNLOAD+0x78>)
 8000682:	f00b f8cd 	bl	800b820 <puts>
				BootAppImage();
 8000686:	f00a ff1f 	bl	800b4c8 <BootAppImage>
				f_close (&fileR);
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <COMMAND_DOWNLOAD+0x70>)
 800068c:	f00a fb25 	bl	800acda <f_close>
				f_mount(NULL, (TCHAR const*)USBH_Path, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <COMMAND_DOWNLOAD+0x7c>)
 8000694:	2000      	movs	r0, #0
 8000696:	f009 ff5f 	bl	800a558 <f_mount>
		{
			;
		}
	}

	return;
 800069a:	bf00      	nop
 800069c:	bf00      	nop

}
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800c490 	.word	0x0800c490
 80006a8:	200100f8 	.word	0x200100f8
 80006ac:	200100ac 	.word	0x200100ac
 80006b0:	0800c49c 	.word	0x0800c49c
 80006b4:	20010ce4 	.word	0x20010ce4

080006b8 <COMMAND_ProgramFlashMemory>:
  * @brief  Programs the internal Flash memory
  * @param  None
  * @retval None
  */
void COMMAND_ProgramFlashMemory(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
	uint16_t BytesRead;

	struct flash_write_config wconfig;
    f_read (&fileR, RAM_Buf, BUFFER_SIZE, (void *)&BytesRead);
 80006be:	f107 030e 	add.w	r3, r7, #14
 80006c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <COMMAND_ProgramFlashMemory+0x48>)
 80006c8:	480e      	ldr	r0, [pc, #56]	; (8000704 <COMMAND_ProgramFlashMemory+0x4c>)
 80006ca:	f00a f949 	bl	800a960 <f_read>
    if (BytesRead < BUFFER_SIZE)
    {
    		BOOT_LOG("TRANSFERING APPLICATION IMAGE\r\n");
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <COMMAND_ProgramFlashMemory+0x50>)
 80006d0:	f00b f832 	bl	800b738 <iprintf>
			memset(&wconfig, 0, sizeof(wconfig));
 80006d4:	463b      	mov	r3, r7
 80006d6:	220c      	movs	r2, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00a ff7b 	bl	800b5d6 <memset>
			wconfig.address = 0x08100000;
 80006e0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80006e4:	603b      	str	r3, [r7, #0]
			wconfig.data = RAM_Buf;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <COMMAND_ProgramFlashMemory+0x48>)
 80006e8:	607b      	str	r3, [r7, #4]
			wconfig.data_length = BytesRead;
 80006ea:	89fb      	ldrh	r3, [r7, #14]
 80006ec:	60bb      	str	r3, [r7, #8]
			Write_To_Flash(&wconfig);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f839 	bl	8000768 <Write_To_Flash>
    }
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000ac 	.word	0x200000ac
 8000704:	200100f8 	.word	0x200100f8
 8000708:	0800c4d0 	.word	0x0800c4d0

0800070c <Erase_Flash>:
#include "flash_if.h"

static FLASH_OBProgramInitTypeDef    OBInit;

HAL_StatusTypeDef Erase_Flash(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0
	uint32_t FirstSector = 0, NbOfSectors = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000716:	2300      	movs	r3, #0
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t SECTORError = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	; 0x34

	FLASH_OBProgramInitTypeDef    OBInit;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_FLASH_Unlock();
 800071e:	f000 fd97 	bl	8001250 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8000722:	f000 fdc7 	bl	80012b4 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff86 	bl	800163c <HAL_FLASHEx_OBGetConfig>
	}
	if((OBInit.USERConfig & OB_NDBANK_SINGLE_BANK) == OB_NDBANK_DUAL_BANK)
	{
	   ;
	}
	FirstSector = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
	NbOfSectors = 3;
 8000734:	2303      	movs	r3, #3
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8000740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000742:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000746:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000748:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800074c:	463b      	mov	r3, r7
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 ff03 	bl	800155c <HAL_FLASHEx_Erase>
	{
	   ;
	}
	HAL_FLASH_OB_Lock();
 8000756:	f000 fdc9 	bl	80012ec <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800075a:	f000 fd9b 	bl	8001294 <HAL_FLASH_Lock>
	return HAL_OK;
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	3740      	adds	r7, #64	; 0x40
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <Write_To_Flash>:


HAL_StatusTypeDef Write_To_Flash(struct flash_write_config * configuration)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef flashRetStatus = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	75fb      	strb	r3, [r7, #23]
	uint32_t len = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
	uint32_t data = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
	uint8_t data_filler = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
	if(configuration)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d034      	beq.n	80007f0 <Write_To_Flash+0x88>
	{
		if(Erase_Flash() == HAL_OK)
 8000786:	f7ff ffc1 	bl	800070c <Erase_Flash>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d12c      	bne.n	80007ea <Write_To_Flash+0x82>
		{
			HAL_FLASH_Unlock();
 8000790:	f000 fd5e 	bl	8001250 <HAL_FLASH_Unlock>
			while(len < configuration->data_length)
 8000794:	e023      	b.n	80007de <Write_To_Flash+0x76>
			{
				memcpy(&data, configuration->data, 4);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60bb      	str	r3, [r7, #8]

				len += sizeof(uint32_t);
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	3304      	adds	r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
				configuration->data = configuration->data + 4;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	1d1a      	adds	r2, r3, #4
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	605a      	str	r2, [r3, #4]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, configuration->address, data) == HAL_OK)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	f04f 0400 	mov.w	r4, #0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4623      	mov	r3, r4
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 fceb 	bl	8001198 <HAL_FLASH_Program>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <Write_To_Flash+0x6c>
				{
					configuration->address += 4;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1d1a      	adds	r2, r3, #4
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e004      	b.n	80007de <Write_To_Flash+0x76>
				}
				else
				{
					printf("flash write error\r\n");
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <Write_To_Flash+0x9c>)
 80007d6:	f00b f823 	bl	800b820 <puts>
					flashRetStatus = HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	75fb      	strb	r3, [r7, #23]
			while(len < configuration->data_length)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3d6      	bcc.n	8000796 <Write_To_Flash+0x2e>
 80007e8:	e004      	b.n	80007f4 <Write_To_Flash+0x8c>
				}
			}
		}
		else
		{
			flashRetStatus = HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	75fb      	strb	r3, [r7, #23]
 80007ee:	e001      	b.n	80007f4 <Write_To_Flash+0x8c>
		}
	}
	else
	{
		flashRetStatus = HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	75fb      	strb	r3, [r7, #23]
	}

	HAL_FLASH_Lock();
 80007f4:	f000 fd4e 	bl	8001294 <HAL_FLASH_Lock>
	return flashRetStatus;
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	bf00      	nop
 8000804:	0800c55c 	.word	0x0800c55c

08000808 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	2201      	movs	r2, #1
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <__io_putchar+0x20>)
 800081a:	f003 fd2b 	bl	8004274 <HAL_UART_Transmit>

  return ch;
 800081e:	687b      	ldr	r3, [r7, #4]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20010794 	.word	0x20010794

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000830:	f000 fb21 	bl	8000e76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000834:	f000 f82e 	bl	8000894 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000838:	f000 f89e 	bl	8000978 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800083c:	f000 f86c 	bl	8000918 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8000840:	f005 f8ec 	bl	8005a1c <MX_FATFS_Init>
	MX_USB_HOST_Init();
 8000844:	f00a fb08 	bl	800ae58 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */
	BOOT_LOG("USB BOOTLOADER..\r\n");
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <main+0x54>)
 800084a:	f00a ff75 	bl	800b738 <iprintf>
	printf("Please insert USB stick in 10 seconds\r\n");
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <main+0x58>)
 8000850:	f00a ffe6 	bl	800b820 <puts>
	while(1)
	{
		MX_USB_HOST_Process();
 8000854:	f00a fb26 	bl	800aea4 <MX_USB_HOST_Process>
		USBEventHandler();
 8000858:	f000 f938 	bl	8000acc <USBEventHandler>
		if(no_usb_detected())
 800085c:	f7ff fec0 	bl	80005e0 <no_usb_detected>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f6      	beq.n	8000854 <main+0x28>
		{
			printf("No USB stick found..");
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <main+0x5c>)
 8000868:	f00a ff66 	bl	800b738 <iprintf>
			printf("Exiting USB BOOTLOADER\r\n");
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <main+0x60>)
 800086e:	f00a ffd7 	bl	800b820 <puts>
			BootAppImage();
 8000872:	f00a fe29 	bl	800b4c8 <BootAppImage>
			printf("starting user application\r\n");
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <main+0x64>)
 8000878:	f00a ffd2 	bl	800b820 <puts>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800087c:	e7fe      	b.n	800087c <main+0x50>
 800087e:	bf00      	nop
 8000880:	0800c570 	.word	0x0800c570
 8000884:	0800c590 	.word	0x0800c590
 8000888:	0800c5b8 	.word	0x0800c5b8
 800088c:	0800c5d0 	.word	0x0800c5d0
 8000890:	0800c5e8 	.word	0x0800c5e8

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	; 0x48
 8000898:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089a:	2301      	movs	r3, #1
 800089c:	603b      	str	r3, [r7, #0]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800089e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a2:	607b      	str	r3, [r7, #4]
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b0:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.PLL.PLLN = 432;
 80008b6:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008c0:	2309      	movs	r3, #9
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLR = 7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 ffde 	bl	800388c <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d000      	beq.n	80008d8 <SystemClock_Config+0x44>
	  {
	    while (1)
 80008d6:	e7fe      	b.n	80008d6 <SystemClock_Config+0x42>
	    {
	    };
	  }

	  /* Activate the OverDrive to reach the 216 Mhz Frequency */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d8:	f002 fea8 	bl	800362c <HAL_PWREx_EnableOverDrive>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d000      	beq.n	80008e4 <SystemClock_Config+0x50>
	  {
	    while (1)
 80008e2:	e7fe      	b.n	80008e2 <SystemClock_Config+0x4e>
	    };
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	   * clocks dividers */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80008e4:	230f      	movs	r3, #15
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
	                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f4:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000900:	2107      	movs	r1, #7
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fa70 	bl	8003de8 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d000      	beq.n	8000910 <SystemClock_Config+0x7c>
	  {
	    while (1)
 800090e:	e7fe      	b.n	800090e <SystemClock_Config+0x7a>
	    {
	    };
	  }
}
 8000910:	bf00      	nop
 8000912:	3748      	adds	r7, #72	; 0x48
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART3_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800095c:	f003 fc3c 	bl	80041d8 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f8e5 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20010794 	.word	0x20010794
 8000974:	40004800 	.word	0x40004800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <MX_GPIO_Init+0x140>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a49      	ldr	r2, [pc, #292]	; (8000ab8 <MX_GPIO_Init+0x140>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <MX_GPIO_Init+0x140>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a3d      	ldr	r2, [pc, #244]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_GPIO_Init+0x140>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0x140>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <MX_GPIO_Init+0x140>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x140>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a24:	4825      	ldr	r0, [pc, #148]	; (8000abc <MX_GPIO_Init+0x144>)
 8000a26:	f001 f8d3 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <MX_GPIO_Init+0x148>)
 8000a30:	f001 f8ce 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0x150>)
 8000a4a:	f000 ff17 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a4e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <MX_GPIO_Init+0x144>)
 8000a68:	f000 ff08 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <MX_GPIO_Init+0x148>)
 8000a84:	f000 fefa 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_GPIO_Init+0x148>)
 8000a9c:	f000 feee 	bl	800187c <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2028      	movs	r0, #40	; 0x28
 8000aa6:	f000 fb40 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f000 fb59 	bl	8001162 <HAL_NVIC_EnableIRQ>
}
 8000ab0:	bf00      	nop
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	40020800 	.word	0x40020800

08000acc <USBEventHandler>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void USBEventHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	switch(Appli_state)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <USBEventHandler+0x5c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d825      	bhi.n	8000b24 <USBEventHandler+0x58>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <USBEventHandler+0x14>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b1f 	.word	0x08000b1f
 8000ae4:	08000af1 	.word	0x08000af1
 8000ae8:	08000b07 	.word	0x08000b07
 8000aec:	08000b13 	.word	0x08000b13
	{
		case APPLICATION_IDLE:
			break;

		case APPLICATION_START:
			if(COMMAND_PREPARE_USB() == 0)
 8000af0:	f7ff fd8e 	bl	8000610 <COMMAND_PREPARE_USB>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d113      	bne.n	8000b22 <USBEventHandler+0x56>
			{
				//Turn Green LED ON
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2101      	movs	r1, #1
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <USBEventHandler+0x60>)
 8000b00:	f001 f866 	bl	8001bd0 <HAL_GPIO_WritePin>
			}
			break;
 8000b04:	e00d      	b.n	8000b22 <USBEventHandler+0x56>

		case APPLICATION_READY:
			BOOT_LOG("PREPARING TO DOWNLOAD APPLICATION IMAGE\r\n");
 8000b06:	480a      	ldr	r0, [pc, #40]	; (8000b30 <USBEventHandler+0x64>)
 8000b08:	f00a fe16 	bl	800b738 <iprintf>
			COMMAND_DOWNLOAD();
 8000b0c:	f7ff fd94 	bl	8000638 <COMMAND_DOWNLOAD>
			break;
 8000b10:	e008      	b.n	8000b24 <USBEventHandler+0x58>

		case APPLICATION_DISCONNECT:
			//Turn Green LED OFF
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2101      	movs	r1, #1
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <USBEventHandler+0x60>)
 8000b18:	f001 f85a 	bl	8001bd0 <HAL_GPIO_WritePin>
			break;
 8000b1c:	e002      	b.n	8000b24 <USBEventHandler+0x58>
			break;
 8000b1e:	bf00      	nop
 8000b20:	e000      	b.n	8000b24 <USBEventHandler+0x58>
			break;
 8000b22:	bf00      	nop
	}
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200100ec 	.word	0x200100ec
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	0800c604 	.word	0x0800c604

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x7c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d128      	bne.n	8000c00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bfc:	f000 fe3e 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004800 	.word	0x40004800
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f942 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(overflow < USB_WAIT_PERIOD)
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SysTick_Handler+0x24>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d805      	bhi.n	8000c84 <SysTick_Handler+0x20>
  {
	  overflow++;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <SysTick_Handler+0x24>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b01      	ldr	r3, [pc, #4]	; (8000c88 <SysTick_Handler+0x24>)
 8000c82:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2001085c 	.word	0x2001085c

08000c8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <OTG_FS_IRQHandler+0x10>)
 8000c92:	f001 fa69 	bl	8002168 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200110c4 	.word	0x200110c4

08000ca0 <EXTI15_10_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ca4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ca8:	f000 ffac 	bl	8001c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00a      	b.n	8000cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc2:	f3af 8000 	nop.w
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	b2ca      	uxtb	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <_read+0x12>
	}

return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd7f 	bl	8000808 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <_write+0x12>
	}
	return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:

int _close(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_isatty>:

int _isatty(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f00a fbc6 	bl	800b54c <__errno>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20080000 	.word	0x20080000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200100b0 	.word	0x200100b0
 8000df4:	20011390 	.word	0x20011390

08000df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <SystemInit+0x28>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <SystemInit+0x28>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SystemInit+0x28>)
 8000e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e12:	609a      	str	r2, [r3, #8]
#endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e2a:	e003      	b.n	8000e34 <LoopCopyDataInit>

08000e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e32:	3104      	adds	r1, #4

08000e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e3c:	d3f6      	bcc.n	8000e2c <CopyDataInit>
  ldr  r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e40:	e002      	b.n	8000e48 <LoopFillZerobss>

08000e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e44:	f842 3b04 	str.w	r3, [r2], #4

08000e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e4c:	d3f9      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd3 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f00a fb81 	bl	800b558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fce9 	bl	800082c <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e60:	0800c7d4 	.word	0x0800c7d4
  ldr  r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e68:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e6c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e70:	2001138c 	.word	0x2001138c

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>

08000e76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f000 f94a 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 f805 	bl	8000e90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e86:	f7ff fe5d 	bl	8000b44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f965 	bl	800117e <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f92d 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20010860 	.word	0x20010860

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20010860 	.word	0x20010860

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_Delay+0x40>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	05fa0000 	.word	0x05fa0000

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_FLASH_Program+0xb0>)
 80011ac:	7d1b      	ldrb	r3, [r3, #20]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_FLASH_Program+0x1e>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e043      	b.n	800123e <HAL_FLASH_Program+0xa6>
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_FLASH_Program+0xb0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011c0:	f000 f8a4 	bl	800130c <FLASH_WaitForLastOperation>
 80011c4:	4603      	mov	r3, r0
 80011c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d133      	bne.n	8001236 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d823      	bhi.n	800121c <HAL_FLASH_Program+0x84>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <HAL_FLASH_Program+0x44>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	080011f9 	.word	0x080011f9
 80011e4:	08001205 	.word	0x08001205
 80011e8:	08001211 	.word	0x08001211
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80011ec:	783b      	ldrb	r3, [r7, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	68b8      	ldr	r0, [r7, #8]
 80011f2:	f000 f945 	bl	8001480 <FLASH_Program_Byte>
        break;
 80011f6:	e012      	b.n	800121e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80011f8:	883b      	ldrh	r3, [r7, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f000 f919 	bl	8001434 <FLASH_Program_HalfWord>
        break;
 8001202:	e00c      	b.n	800121e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f000 f8ef 	bl	80013ec <FLASH_Program_Word>
        break;
 800120e:	e006      	b.n	800121e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f000 f8b9 	bl	800138c <FLASH_Program_DoubleWord>
        break;
 800121a:	e000      	b.n	800121e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800121c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800121e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001222:	f000 f873 	bl	800130c <FLASH_WaitForLastOperation>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_FLASH_Program+0xb4>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_FLASH_Program+0xb4>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_FLASH_Program+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	751a      	strb	r2, [r3, #20]

  return status;
 800123c:	7dfb      	ldrb	r3, [r7, #23]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20010864 	.word	0x20010864
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_FLASH_Unlock+0x38>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da0b      	bge.n	800127a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_FLASH_Unlock+0x38>)
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_FLASH_Unlock+0x3c>)
 8001266:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <HAL_FLASH_Unlock+0x38>)
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_FLASH_Unlock+0x40>)
 800126c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_FLASH_Unlock+0x38>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da01      	bge.n	800127a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800127a:	79fb      	ldrb	r3, [r7, #7]
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40023c00 	.word	0x40023c00
 800128c:	45670123 	.word	0x45670123
 8001290:	cdef89ab 	.word	0xcdef89ab

08001294 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_FLASH_Lock+0x1c>)
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_FLASH_Lock+0x1c>)
 800129e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012a2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_FLASH_OB_Unlock+0x30>)
 80012c8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_FLASH_OB_Unlock+0x34>)
 80012ce:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80012d0:	2300      	movs	r3, #0
 80012d2:	e000      	b.n	80012d6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40023c00 	.word	0x40023c00
 80012e4:	08192a3b 	.word	0x08192a3b
 80012e8:	4c5d6e7f 	.word	0x4c5d6e7f

080012ec <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_FLASH_OB_Lock+0x1c>)
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_FLASH_OB_Lock+0x1c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40023c00 	.word	0x40023c00

0800130c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <FLASH_WaitForLastOperation+0x78>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800131e:	f7ff fdfb 	bl	8000f18 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001324:	e010      	b.n	8001348 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d00c      	beq.n	8001348 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <FLASH_WaitForLastOperation+0x38>
 8001334:	f7ff fdf0 	bl	8000f18 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d201      	bcs.n	8001348 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e019      	b.n	800137c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e8      	bne.n	8001326 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001360:	f000 f8b2 	bl	80014c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e009      	b.n	800137c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 8001376:	2201      	movs	r2, #1
 8001378:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
  
}  
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20010864 	.word	0x20010864
 8001388:	40023c00 	.word	0x40023c00

0800138c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800138c:	b490      	push	{r4, r7}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <FLASH_Program_DoubleWord+0x5c>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <FLASH_Program_DoubleWord+0x5c>)
 800139e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <FLASH_Program_DoubleWord+0x5c>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <FLASH_Program_DoubleWord+0x5c>)
 80013aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <FLASH_Program_DoubleWord+0x5c>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <FLASH_Program_DoubleWord+0x5c>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80013c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	0013      	movs	r3, r2
 80013d0:	2400      	movs	r4, #0
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	3204      	adds	r2, #4
 80013d6:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d8:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc90      	pop	{r4, r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <FLASH_Program_Word+0x44>)
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <FLASH_Program_Word+0x44>)
 80013fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001400:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <FLASH_Program_Word+0x44>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <FLASH_Program_Word+0x44>)
 8001408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <FLASH_Program_Word+0x44>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <FLASH_Program_Word+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40023c00 	.word	0x40023c00

08001434 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <FLASH_Program_HalfWord+0x48>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <FLASH_Program_HalfWord+0x48>)
 8001446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <FLASH_Program_HalfWord+0x48>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <FLASH_Program_HalfWord+0x48>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <FLASH_Program_HalfWord+0x48>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <FLASH_Program_HalfWord+0x48>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	801a      	strh	r2, [r3, #0]
 800146a:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023c00 	.word	0x40023c00

08001480 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <FLASH_Program_Byte+0x44>)
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <FLASH_Program_Byte+0x44>)
 8001492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001496:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <FLASH_Program_Byte+0x44>)
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <FLASH_Program_Byte+0x44>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <FLASH_Program_Byte+0x44>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <FLASH_Program_Byte+0x44>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <FLASH_SetErrorCode+0x8c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <FLASH_SetErrorCode+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <FLASH_SetErrorCode+0x90>)
 80014e2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <FLASH_SetErrorCode+0x8c>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <FLASH_SetErrorCode+0x90>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <FLASH_SetErrorCode+0x90>)
 80014fa:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <FLASH_SetErrorCode+0x8c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <FLASH_SetErrorCode+0x90>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <FLASH_SetErrorCode+0x90>)
 8001512:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <FLASH_SetErrorCode+0x8c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <FLASH_SetErrorCode+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <FLASH_SetErrorCode+0x90>)
 800152a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <FLASH_SetErrorCode+0x8c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <FLASH_SetErrorCode+0x90>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <FLASH_SetErrorCode+0x90>)
 8001542:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <FLASH_SetErrorCode+0x8c>)
 8001546:	22f2      	movs	r2, #242	; 0xf2
 8001548:	60da      	str	r2, [r3, #12]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023c00 	.word	0x40023c00
 8001558:	20010864 	.word	0x20010864

0800155c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <HAL_FLASHEx_Erase+0xd4>)
 8001570:	7d1b      	ldrb	r3, [r3, #20]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_FLASHEx_Erase+0x1e>
 8001576:	2302      	movs	r3, #2
 8001578:	e056      	b.n	8001628 <HAL_FLASHEx_Erase+0xcc>
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_FLASHEx_Erase+0xd4>)
 800157c:	2201      	movs	r2, #1
 800157e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001580:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001584:	f7ff fec2 	bl	800130c <FLASH_WaitForLastOperation>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d146      	bne.n	8001620 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d115      	bne.n	80015ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 f870 	bl	8001694 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015b8:	f7ff fea8 	bl	800130c <FLASH_WaitForLastOperation>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	491b      	ldr	r1, [pc, #108]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_FLASHEx_Erase+0xdc>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	610b      	str	r3, [r1, #16]
 80015cc:	e028      	b.n	8001620 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	e01c      	b.n	8001610 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	68b8      	ldr	r0, [r7, #8]
 80015e0:	f000 f892 	bl	8001708 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e8:	f7ff fe90 	bl	800130c <FLASH_WaitForLastOperation>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 80015f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80015fa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	601a      	str	r2, [r3, #0]
          break;
 8001608:	e00a      	b.n	8001620 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4413      	add	r3, r2
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3da      	bcc.n	80015d6 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_FLASHEx_Erase+0xd4>)
 8001622:	2200      	movs	r2, #0
 8001624:	751a      	strb	r2, [r3, #20]

  return status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20010864 	.word	0x20010864
 8001634:	40023c00 	.word	0x40023c00
 8001638:	ffff7ffb 	.word	0xffff7ffb

0800163c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	223f      	movs	r2, #63	; 0x3f
 8001648:	601a      	str	r2, [r3, #0]
	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;

  /*Get WRP*/
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800164a:	f000 f8ad 	bl	80017a8 <FLASH_OB_GetWRP>
 800164e:	4602      	mov	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001654:	f000 f8c8 	bl	80017e8 <FLASH_OB_GetRDP>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	60da      	str	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001660:	f000 f8b2 	bl	80017c8 <FLASH_OB_GetUser>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	615a      	str	r2, [r3, #20]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800166a:	f000 f8dd 	bl	8001828 <FLASH_OB_GetBOR>
 800166e:	4602      	mov	r2, r0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
  
  /*Get Boot Address when Boot pin = 0 */
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8001674:	2010      	movs	r0, #16
 8001676:	f000 f8e5 	bl	8001844 <FLASH_OB_GetBootAddress>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  
  /*Get Boot Address when Boot pin = 1 */
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 8001680:	2020      	movs	r0, #32
 8001682:	f000 f8df 	bl	8001844 <FLASH_OB_GetBootAddress>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	61da      	str	r2, [r3, #28]
  pOBInit->PCROPSector = FLASH_OB_GetPCROP();
  
  /*Get PCROP_RDP Value */
  pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
#endif /* FLASH_OPTCR2_PCROP */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <FLASH_MassErase+0x70>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <FLASH_MassErase+0x70>)
 80016a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016aa:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <FLASH_MassErase+0x70>)
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	4913      	ldr	r1, [pc, #76]	; (8001704 <FLASH_MassErase+0x70>)
 80016b8:	f248 0304 	movw	r3, #32772	; 0x8004
 80016bc:	4313      	orrs	r3, r2
 80016be:	610b      	str	r3, [r1, #16]
 80016c0:	e00f      	b.n	80016e2 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d106      	bne.n	80016d6 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <FLASH_MassErase+0x70>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <FLASH_MassErase+0x70>)
 80016ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d2:	6113      	str	r3, [r2, #16]
 80016d4:	e005      	b.n	80016e2 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <FLASH_MassErase+0x70>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <FLASH_MassErase+0x70>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <FLASH_MassErase+0x70>)
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	4313      	orrs	r3, r2
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <FLASH_MassErase+0x70>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6113      	str	r3, [r2, #16]
 80016f4:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023c00 	.word	0x40023c00

08001708 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	e010      	b.n	8001746 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d103      	bne.n	8001732 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800172a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e009      	b.n	8001746 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d103      	bne.n	8001740 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e002      	b.n	8001746 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001740:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001744:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0b      	cmp	r3, #11
 800174a:	d902      	bls.n	8001752 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	4910      	ldr	r1, [pc, #64]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001770:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001774:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4313      	orrs	r3, r2
 8001780:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <FLASH_Erase_Sector+0x9c>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6113      	str	r3, [r2, #16]
 8001794:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <FLASH_OB_GetWRP+0x18>)
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <FLASH_OB_GetWRP+0x1c>)
 80017b2:	4013      	ands	r3, r2
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	0fff0000 	.word	0x0fff0000

080017c8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6), 
  *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <FLASH_OB_GetUser+0x18>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <FLASH_OB_GetUser+0x1c>)
 80017d2:	4013      	ands	r3, r2
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	f00000f0 	.word	0xf00000f0

080017e8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80017ee:	23aa      	movs	r3, #170	; 0xaa
 80017f0:	71fb      	strb	r3, [r7, #7]
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <FLASH_OB_GetRDP+0x3c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2baa      	cmp	r3, #170	; 0xaa
 80017fa:	d102      	bne.n	8001802 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80017fc:	23aa      	movs	r3, #170	; 0xaa
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	e009      	b.n	8001816 <FLASH_OB_GetRDP+0x2e>
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <FLASH_OB_GetRDP+0x3c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2bcc      	cmp	r3, #204	; 0xcc
 800180a:	d102      	bne.n	8001812 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800180c:	23cc      	movs	r3, #204	; 0xcc
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	e001      	b.n	8001816 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8001812:	2355      	movs	r3, #85	; 0x55
 8001814:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001816:	79fb      	ldrb	r3, [r7, #7]
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40023c15 	.word	0x40023c15

08001828 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <FLASH_OB_GetBOR+0x18>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f003 030c 	and.w	r3, r3, #12
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <FLASH_OB_GetBootAddress>:
  *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
  *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
  *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
  */
static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
{  
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t Address = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d104      	bne.n	8001860 <FLASH_OB_GetBootAddress+0x1c>
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <FLASH_OB_GetBootAddress+0x34>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	b29b      	uxth	r3, r3
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e004      	b.n	800186a <FLASH_OB_GetBootAddress+0x26>
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <FLASH_OB_GetBootAddress+0x34>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	b29b      	uxth	r3, r3
 8001868:	60fb      	str	r3, [r7, #12]
	}

  return Address;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e175      	b.n	8001b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8164 	bne.w	8001b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d00b      	beq.n	80018da <HAL_GPIO_Init+0x5e>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ce:	2b11      	cmp	r3, #17
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x100>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80be 	beq.w	8001b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <HAL_GPIO_Init+0x320>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a64      	ldr	r2, [pc, #400]	; (8001b9c <HAL_GPIO_Init+0x320>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <HAL_GPIO_Init+0x320>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a1e:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d037      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a55      	ldr	r2, [pc, #340]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a54      	ldr	r2, [pc, #336]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a53      	ldr	r2, [pc, #332]	; (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x340>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a92:	2309      	movs	r3, #9
 8001a94:	e012      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a96:	230a      	movs	r3, #10
 8001a98:	e010      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001acc:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001afe:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b04:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae86 	bls.w	800189c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	3724      	adds	r7, #36	; 0x24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40021400 	.word	0x40021400
 8001bbc:	40021800 	.word	0x40021800
 8001bc0:	40021c00 	.word	0x40021c00
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40022400 	.word	0x40022400
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f806 	bl	8001c34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4c:	b08f      	sub	sp, #60	; 0x3c
 8001c4e:	af0a      	add	r7, sp, #40	; 0x28
 8001c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e054      	b.n	8001d06 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f009 f94c 	bl	800af14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fff1 	bl	8004c82 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	687e      	ldr	r6, [r7, #4]
 8001ca8:	466d      	mov	r5, sp
 8001caa:	f106 0410 	add.w	r4, r6, #16
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cbe:	1d33      	adds	r3, r6, #4
 8001cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f002 ff74 	bl	8004bb0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 ffe8 	bl	8004ca4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	687e      	ldr	r6, [r7, #4]
 8001cdc:	466d      	mov	r5, sp
 8001cde:	f106 0410 	add.w	r4, r6, #16
 8001ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf2:	1d33      	adds	r3, r6, #4
 8001cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f003 f8fa 	bl	8004ef0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d0e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d0e:	b590      	push	{r4, r7, lr}
 8001d10:	b089      	sub	sp, #36	; 0x24
 8001d12:	af04      	add	r7, sp, #16
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	4608      	mov	r0, r1
 8001d18:	4611      	mov	r1, r2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	70fb      	strb	r3, [r7, #3]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70bb      	strb	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_HCD_HC_Init+0x28>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e07f      	b.n	8001e36 <HAL_HCD_HC_Init+0x128>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	333d      	adds	r3, #61	; 0x3d
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	3338      	adds	r3, #56	; 0x38
 8001d62:	787a      	ldrb	r2, [r7, #1]
 8001d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	3340      	adds	r3, #64	; 0x40
 8001d76:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d78:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	3339      	adds	r3, #57	; 0x39
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	333f      	adds	r3, #63	; 0x3f
 8001d9e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	78bb      	ldrb	r3, [r7, #2]
 8001da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dac:	b2d8      	uxtb	r0, r3
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	333a      	adds	r3, #58	; 0x3a
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da0a      	bge.n	8001dde <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	333b      	adds	r3, #59	; 0x3b
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e009      	b.n	8001df2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	333b      	adds	r3, #59	; 0x3b
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	333c      	adds	r3, #60	; 0x3c
 8001e02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e06:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	787c      	ldrb	r4, [r7, #1]
 8001e0e:	78ba      	ldrb	r2, [r7, #2]
 8001e10:	78f9      	ldrb	r1, [r7, #3]
 8001e12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4623      	mov	r3, r4
 8001e24:	f003 f9da 	bl	80051dc <USB_HC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}

08001e3e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_HCD_HC_Halt+0x1e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e00f      	b.n	8001e7c <HAL_HCD_HC_Halt+0x3e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fc14 	bl	800569a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	70fb      	strb	r3, [r7, #3]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70bb      	strb	r3, [r7, #2]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	333b      	adds	r3, #59	; 0x3b
 8001eae:	78ba      	ldrb	r2, [r7, #2]
 8001eb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	333f      	adds	r3, #63	; 0x3f
 8001ec2:	787a      	ldrb	r2, [r7, #1]
 8001ec4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ec6:	7c3b      	ldrb	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d114      	bne.n	8001ef6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3342      	adds	r3, #66	; 0x42
 8001edc:	2203      	movs	r2, #3
 8001ede:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	333d      	adds	r3, #61	; 0x3d
 8001ef0:	7f3a      	ldrb	r2, [r7, #28]
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e009      	b.n	8001f0a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3342      	adds	r3, #66	; 0x42
 8001f06:	2202      	movs	r2, #2
 8001f08:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f0a:	787b      	ldrb	r3, [r7, #1]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	f200 80d6 	bhi.w	80020be <HAL_HCD_HC_SubmitRequest+0x23a>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	080020a9 	.word	0x080020a9
 8001f20:	08001f95 	.word	0x08001f95
 8001f24:	0800201f 	.word	0x0800201f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f28:	7c3b      	ldrb	r3, [r7, #16]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f040 80c9 	bne.w	80020c2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001f30:	78bb      	ldrb	r3, [r7, #2]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80c5 	bne.w	80020c2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001f38:	8b3b      	ldrh	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3351      	adds	r3, #81	; 0x51
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3351      	adds	r3, #81	; 0x51
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	3342      	adds	r3, #66	; 0x42
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f7c:	e0a1      	b.n	80020c2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3342      	adds	r3, #66	; 0x42
 8001f8e:	2202      	movs	r2, #2
 8001f90:	701a      	strb	r2, [r3, #0]
      break;
 8001f92:	e096      	b.n	80020c2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f94:	78bb      	ldrb	r3, [r7, #2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d120      	bne.n	8001fdc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3351      	adds	r3, #81	; 0x51
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3342      	adds	r3, #66	; 0x42
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fc4:	e07e      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3342      	adds	r3, #66	; 0x42
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
      break;
 8001fda:	e073      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3350      	adds	r3, #80	; 0x50
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	3342      	adds	r3, #66	; 0x42
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
      break;
 8002006:	e05d      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	3342      	adds	r3, #66	; 0x42
 8002018:	2202      	movs	r2, #2
 800201a:	701a      	strb	r2, [r3, #0]
      break;
 800201c:	e052      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800201e:	78bb      	ldrb	r3, [r7, #2]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d120      	bne.n	8002066 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3351      	adds	r3, #81	; 0x51
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	3342      	adds	r3, #66	; 0x42
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800204e:	e039      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
      break;
 8002064:	e02e      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	3350      	adds	r3, #80	; 0x50
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3342      	adds	r3, #66	; 0x42
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
      break;
 8002090:	e018      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3342      	adds	r3, #66	; 0x42
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
      break;
 80020a6:	e00d      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	3342      	adds	r3, #66	; 0x42
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80020be:	bf00      	nop
 80020c0:	e000      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80020c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	3344      	adds	r3, #68	; 0x44
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	8b39      	ldrh	r1, [r7, #24]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4403      	add	r3, r0
 80020e8:	3348      	adds	r3, #72	; 0x48
 80020ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	334c      	adds	r3, #76	; 0x4c
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3339      	adds	r3, #57	; 0x39
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	335d      	adds	r3, #93	; 0x5d
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	18d1      	adds	r1, r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	f003 f94a 	bl	80053f0 <USB_HC_StartXfer>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fe73 	bl	8004e6a <USB_GetMode>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	f040 80ef 	bne.w	800236a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fe57 	bl	8004e44 <USB_ReadInterrupts>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80e5 	beq.w	8002368 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fe4e 	bl	8004e44 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021b2:	d104      	bne.n	80021be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fe3e 	bl	8004e44 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021d2:	d104      	bne.n	80021de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fe2e 	bl	8004e44 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f2:	d104      	bne.n	80021fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fe1e 	bl	8004e44 <USB_ReadInterrupts>
 8002208:	4603      	mov	r3, r0
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d103      	bne.n	800221a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f002 fe10 	bl	8004e44 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800222a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222e:	d115      	bne.n	800225c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002238:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f008 fee2 	bl	800b014 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fefa 	bl	8005050 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fdef 	bl	8004e44 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d102      	bne.n	8002278 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f001 f966 	bl	8003544 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f002 fde1 	bl	8004e44 <USB_ReadInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d106      	bne.n	800229a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f008 fea5 	bl	800afdc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2208      	movs	r2, #8
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fdd0 	bl	8004e44 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ae:	d138      	bne.n	8002322 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f9df 	bl	8005678 <USB_HC_ReadInterrupt>
 80022ba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e025      	b.n	800230e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d018      	beq.n	8002308 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ec:	d106      	bne.n	80022fc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8cf 	bl	8002498 <HCD_HC_IN_IRQHandler>
 80022fa:	e005      	b.n	8002308 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fcfd 	bl	8002d02 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d3d4      	bcc.n	80022c2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fd8c 	bl	8004e44 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b10      	cmp	r3, #16
 8002334:	d101      	bne.n	800233a <HAL_HCD_IRQHandler+0x1d2>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_HCD_IRQHandler+0x1d4>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d014      	beq.n	800236a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0210 	bic.w	r2, r2, #16
 800234e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f001 f84b 	bl	80033ec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0210 	orr.w	r2, r2, #16
 8002364:	619a      	str	r2, [r3, #24]
 8002366:	e000      	b.n	800236a <HAL_HCD_IRQHandler+0x202>
      return;
 8002368:	bf00      	nop
    }
  }
}
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_HCD_Start+0x16>
 8002382:	2302      	movs	r3, #2
 8002384:	e013      	b.n	80023ae <HAL_HCD_Start+0x3e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fc64 	bl	8004c60 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 feba 	bl	8005118 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_HCD_Stop+0x16>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e00d      	b.n	80023e8 <HAL_HCD_Stop+0x32>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fa99 	bl	8005910 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fe61 	bl	80050c4 <USB_ResetPort>
 8002402:	4603      	mov	r3, r0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	335c      	adds	r3, #92	; 0x5c
 8002428:	781b      	ldrb	r3, [r3, #0]
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	334c      	adds	r3, #76	; 0x4c
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fea3 	bl	80051b8 <USB_GetCurrentFrame>
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fe7e 	bl	800518a <USB_GetHostSpeed>
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d119      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	2304      	movs	r3, #4
 80024d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	0151      	lsls	r1, r2, #5
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	440a      	add	r2, r1
 80024f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	60d3      	str	r3, [r2, #12]
 80024fa:	e0ce      	b.n	800269a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d12c      	bne.n	800256e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002526:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	335d      	adds	r3, #93	; 0x5d
 8002538:	2207      	movs	r2, #7
 800253a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	0151      	lsls	r1, r2, #5
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	440a      	add	r2, r1
 8002552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 f897 	bl	800569a <USB_HC_Halt>
 800256c:	e095      	b.n	800269a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b20      	cmp	r3, #32
 8002582:	d109      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	2320      	movs	r3, #32
 8002594:	6093      	str	r3, [r2, #8]
 8002596:	e080      	b.n	800269a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d134      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	335d      	adds	r3, #93	; 0x5d
 80025de:	2205      	movs	r2, #5
 80025e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	461a      	mov	r2, r3
 80025f0:	2310      	movs	r3, #16
 80025f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	461a      	mov	r2, r3
 8002602:	2308      	movs	r3, #8
 8002604:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f842 	bl	800569a <USB_HC_Halt>
 8002616:	e040      	b.n	800269a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d134      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	0151      	lsls	r1, r2, #5
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	440a      	add	r2, r1
 8002646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f003 f81d 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	2310      	movs	r3, #16
 8002670:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	335d      	adds	r3, #93	; 0x5d
 8002682:	2208      	movs	r2, #8
 8002684:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002698:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b0:	d122      	bne.n	80026f8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 ffdc 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026f6:	e300      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 80fd 	bne.w	800290a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	3348      	adds	r3, #72	; 0x48
 8002728:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	0159      	lsls	r1, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	440b      	add	r3, r1
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800273c:	1ad1      	subs	r1, r2, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4403      	add	r3, r0
 800274c:	334c      	adds	r3, #76	; 0x4c
 800274e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	335d      	adds	r3, #93	; 0x5d
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	3358      	adds	r3, #88	; 0x58
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	2301      	movs	r3, #1
 8002788:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	333f      	adds	r3, #63	; 0x3f
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	333f      	adds	r3, #63	; 0x3f
 80027b0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d121      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 ff5a 	bl	800569a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	2310      	movs	r3, #16
 80027f6:	6093      	str	r3, [r2, #8]
 80027f8:	e070      	b.n	80028dc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	333f      	adds	r3, #63	; 0x3f
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d12a      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800282e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	b2d8      	uxtb	r0, r3
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4601      	mov	r1, r0
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f008 fbe6 	bl	800b030 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002864:	e03a      	b.n	80028dc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	333f      	adds	r3, #63	; 0x3f
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d12f      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	335c      	adds	r3, #92	; 0x5c
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	3350      	adds	r3, #80	; 0x50
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3350      	adds	r3, #80	; 0x50
 80028b8:	4602      	mov	r2, r0
 80028ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	b2d8      	uxtb	r0, r3
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	335c      	adds	r3, #92	; 0x5c
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4601      	mov	r1, r0
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f008 fbaa 	bl	800b030 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	3350      	adds	r3, #80	; 0x50
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	3350      	adds	r3, #80	; 0x50
 8002904:	4602      	mov	r2, r0
 8002906:	701a      	strb	r2, [r3, #0]
}
 8002908:	e1f7      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	f040 811a 	bne.w	8002b56 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	0151      	lsls	r1, r2, #5
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	440a      	add	r2, r1
 8002938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293c:	f023 0302 	bic.w	r3, r3, #2
 8002940:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	335d      	adds	r3, #93	; 0x5d
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10a      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e0d9      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335d      	adds	r3, #93	; 0x5d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d10a      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2205      	movs	r2, #5
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e0c3      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	335d      	adds	r3, #93	; 0x5d
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d00a      	beq.n	80029c6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	335d      	adds	r3, #93	; 0x5d
 80029c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d156      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3358      	adds	r3, #88	; 0x58
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4403      	add	r3, r0
 80029e8:	3358      	adds	r3, #88	; 0x58
 80029ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3358      	adds	r3, #88	; 0x58
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d914      	bls.n	8002a2c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3358      	adds	r3, #88	; 0x58
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335c      	adds	r3, #92	; 0x5c
 8002a26:	2204      	movs	r2, #4
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e009      	b.n	8002a40 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335c      	adds	r3, #92	; 0x5c
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e056      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	335d      	adds	r3, #93	; 0x5d
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d123      	bne.n	8002ad2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	335c      	adds	r3, #92	; 0x5c
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e027      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	335d      	adds	r3, #93	; 0x5d
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d11c      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3358      	adds	r3, #88	; 0x58
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1c59      	adds	r1, r3, #1
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4403      	add	r3, r0
 8002b0a:	3358      	adds	r3, #88	; 0x58
 8002b0c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	335c      	adds	r3, #92	; 0x5c
 8002b1e:	2204      	movs	r2, #4
 8002b20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2302      	movs	r3, #2
 8002b32:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	b2d8      	uxtb	r0, r3
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4601      	mov	r1, r0
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f008 fa6e 	bl	800b030 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b54:	e0d1      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d13e      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	0151      	lsls	r1, r2, #5
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	440a      	add	r2, r1
 8002b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	3358      	adds	r3, #88	; 0x58
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4403      	add	r3, r0
 8002bae:	3358      	adds	r3, #88	; 0x58
 8002bb0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	335d      	adds	r3, #93	; 0x5d
 8002bc2:	2206      	movs	r2, #6
 8002bc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 fd62 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	6093      	str	r3, [r2, #8]
}
 8002be8:	e087      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d17c      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333f      	adds	r3, #63	; 0x3f
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d122      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3358      	adds	r3, #88	; 0x58
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	0151      	lsls	r1, r2, #5
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	440a      	add	r2, r1
 8002c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fd20 	bl	800569a <USB_HC_Halt>
 8002c5a:	e045      	b.n	8002ce8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	333f      	adds	r3, #63	; 0x3f
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	333f      	adds	r3, #63	; 0x3f
 8002c82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d12f      	bne.n	8002ce8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3358      	adds	r3, #88	; 0x58
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d121      	bne.n	8002ce8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335d      	adds	r3, #93	; 0x5d
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	0151      	lsls	r1, r2, #5
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	440a      	add	r2, r1
 8002cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f002 fcd9 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	6093      	str	r3, [r2, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d119      	bne.n	8002d66 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2304      	movs	r3, #4
 8002d42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	0151      	lsls	r1, r2, #5
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	440a      	add	r2, r1
 8002d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002d64:	e33e      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d141      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	333d      	adds	r3, #61	; 0x3d
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 831f 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	333d      	adds	r3, #61	; 0x3d
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	335c      	adds	r3, #92	; 0x5c
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	0151      	lsls	r1, r2, #5
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	440a      	add	r2, r1
 8002de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 fc4e 	bl	800569a <USB_HC_Halt>
}
 8002dfe:	e2f1      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d13f      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	335d      	adds	r3, #93	; 0x5d
 8002e26:	2204      	movs	r2, #4
 8002e28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	333d      	adds	r3, #61	; 0x3d
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3358      	adds	r3, #88	; 0x58
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	0151      	lsls	r1, r2, #5
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	440a      	add	r2, r1
 8002e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 fc0c 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2340      	movs	r3, #64	; 0x40
 8002e92:	6093      	str	r3, [r2, #8]
}
 8002e94:	e2a6      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d122      	bne.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	0151      	lsls	r1, r2, #5
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fbde 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef0:	6093      	str	r3, [r2, #8]
}
 8002ef2:	e277      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d135      	bne.n	8002f76 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	3358      	adds	r3, #88	; 0x58
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	0151      	lsls	r1, r2, #5
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	440a      	add	r2, r1
 8002f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 fba6 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	335d      	adds	r3, #93	; 0x5d
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
}
 8002f74:	e236      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d12b      	bne.n	8002fe4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	0151      	lsls	r1, r2, #5
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fb66 	bl	800569a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	335d      	adds	r3, #93	; 0x5d
 8002fde:	2205      	movs	r2, #5
 8002fe0:	701a      	strb	r2, [r3, #0]
}
 8002fe2:	e1ff      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d155      	bne.n	80030a6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	3358      	adds	r3, #88	; 0x58
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	335d      	adds	r3, #93	; 0x5d
 800301e:	2203      	movs	r2, #3
 8003020:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	333d      	adds	r3, #61	; 0x3d
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d114      	bne.n	8003062 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	333c      	adds	r3, #60	; 0x3c
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	333d      	adds	r3, #61	; 0x3d
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	0151      	lsls	r1, r2, #5
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	440a      	add	r2, r1
 8003078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fb04 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309e:	461a      	mov	r2, r3
 80030a0:	2310      	movs	r3, #16
 80030a2:	6093      	str	r3, [r2, #8]
}
 80030a4:	e19e      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d12b      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	0151      	lsls	r1, r2, #5
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	440a      	add	r2, r1
 80030d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 fad7 	bl	800569a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	335d      	adds	r3, #93	; 0x5d
 80030fc:	2206      	movs	r2, #6
 80030fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	6093      	str	r3, [r2, #8]
}
 8003112:	e167      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d135      	bne.n	8003198 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	0151      	lsls	r1, r2, #5
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	440a      	add	r2, r1
 8003142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f002 fa9f 	bl	800569a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2310      	movs	r3, #16
 800316c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	461a      	mov	r2, r3
 800317c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	440b      	add	r3, r1
 8003190:	335d      	adds	r3, #93	; 0x5d
 8003192:	2208      	movs	r2, #8
 8003194:	701a      	strb	r2, [r3, #0]
}
 8003196:	e125      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	f040 811a 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	0151      	lsls	r1, r2, #5
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	440a      	add	r2, r1
 80031c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ca:	f023 0302 	bic.w	r3, r3, #2
 80031ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	335d      	adds	r3, #93	; 0x5d
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d137      	bne.n	8003256 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	335c      	adds	r3, #92	; 0x5c
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	333f      	adds	r3, #63	; 0x3f
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d00b      	beq.n	8003228 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003222:	2b03      	cmp	r3, #3
 8003224:	f040 80c5 	bne.w	80033b2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	3351      	adds	r3, #81	; 0x51
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	f083 0301 	eor.w	r3, r3, #1
 800323e:	b2d8      	uxtb	r0, r3
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3351      	adds	r3, #81	; 0x51
 8003250:	4602      	mov	r2, r0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e0ad      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	335d      	adds	r3, #93	; 0x5d
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d10a      	bne.n	8003282 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	335c      	adds	r3, #92	; 0x5c
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e097      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	335d      	adds	r3, #93	; 0x5d
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d10a      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	335c      	adds	r3, #92	; 0x5c
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e081      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	335d      	adds	r3, #93	; 0x5d
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d10a      	bne.n	80032da <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	335c      	adds	r3, #92	; 0x5c
 80032d4:	2205      	movs	r2, #5
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e06b      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	335d      	adds	r3, #93	; 0x5d
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b06      	cmp	r3, #6
 80032ee:	d00a      	beq.n	8003306 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	335d      	adds	r3, #93	; 0x5d
 8003300:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003302:	2b08      	cmp	r3, #8
 8003304:	d155      	bne.n	80033b2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	3358      	adds	r3, #88	; 0x58
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1c59      	adds	r1, r3, #1
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4403      	add	r3, r0
 8003328:	3358      	adds	r3, #88	; 0x58
 800332a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	3358      	adds	r3, #88	; 0x58
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d914      	bls.n	800336c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3358      	adds	r3, #88	; 0x58
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	335c      	adds	r3, #92	; 0x5c
 8003366:	2204      	movs	r2, #4
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e009      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	335c      	adds	r3, #92	; 0x5c
 800337c:	2202      	movs	r2, #2
 800337e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003396:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800339e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	461a      	mov	r2, r3
 80033c0:	2302      	movs	r3, #2
 80033c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	b2d8      	uxtb	r0, r3
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	335c      	adds	r3, #92	; 0x5c
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4601      	mov	r1, r0
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f007 fe26 	bl	800b030 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033e4:	bf00      	nop
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	0c5b      	lsrs	r3, r3, #17
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003420:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d003      	beq.n	8003430 <HCD_RXQLVL_IRQHandler+0x44>
 8003428:	2b05      	cmp	r3, #5
 800342a:	f000 8082 	beq.w	8003532 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800342e:	e083      	b.n	8003538 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d07f      	beq.n	8003536 <HCD_RXQLVL_IRQHandler+0x14a>
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	; 0x44
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d074      	beq.n	8003536 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	3344      	adds	r3, #68	; 0x44
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	b292      	uxth	r2, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f001 fcc3 	bl	8004df2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3344      	adds	r3, #68	; 0x44
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	18d1      	adds	r1, r2, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4403      	add	r3, r0
 8003490:	3344      	adds	r3, #68	; 0x44
 8003492:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	334c      	adds	r3, #76	; 0x4c
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	18d1      	adds	r1, r2, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4403      	add	r3, r0
 80034b8:	334c      	adds	r3, #76	; 0x4c
 80034ba:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HCD_RXQLVL_IRQHandler+0x154>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d031      	beq.n	8003536 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3350      	adds	r3, #80	; 0x50
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	3350      	adds	r3, #80	; 0x50
 800352c:	4602      	mov	r2, r0
 800352e:	701a      	strb	r2, [r3, #0]
      break;
 8003530:	e001      	b.n	8003536 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003536:	bf00      	nop
  }
}
 8003538:	bf00      	nop
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	1ff80000 	.word	0x1ff80000

08003544 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003570:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d10b      	bne.n	8003594 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d102      	bne.n	800358c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f007 fd36 	bl	800aff8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d132      	bne.n	8003604 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d126      	bne.n	80035fe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d113      	bne.n	80035e0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035c2:	d106      	bne.n	80035d2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fd40 	bl	8005050 <USB_InitFSLSPClkSel>
 80035d0:	e011      	b.n	80035f6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2101      	movs	r1, #1
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 fd39 	bl	8005050 <USB_InitFSLSPClkSel>
 80035de:	e00a      	b.n	80035f6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ee:	461a      	mov	r2, r3
 80035f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035f4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f007 fd28 	bl	800b04c <HAL_HCD_PortEnabled_Callback>
 80035fc:	e002      	b.n	8003604 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f007 fd32 	bl	800b068 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d103      	bne.n	8003616 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f043 0320 	orr.w	r3, r3, #32
 8003614:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800364e:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800365a:	f7fd fc5d 	bl	8000f18 <HAL_GetTick>
 800365e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003660:	e009      	b.n	8003676 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003662:	f7fd fc59 	bl	8000f18 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003670:	d901      	bls.n	8003676 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e022      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d1ee      	bne.n	8003662 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fd fc42 	bl	8000f18 <HAL_GetTick>
 8003694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003696:	e009      	b.n	80036ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003698:	f7fd fc3e 	bl	8000f18 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a6:	d901      	bls.n	80036ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e007      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b8:	d1ee      	bne.n	8003698 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80036d2:	f7fd fc21 	bl	8000f18 <HAL_GetTick>
 80036d6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036d8:	4b66      	ldr	r3, [pc, #408]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a65      	ldr	r2, [pc, #404]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fd fc17 	bl	8000f18 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0b8      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80036f8:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003704:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5a      	ldr	r2, [pc, #360]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003710:	f7fd fc02 	bl	8000f18 <HAL_GetTick>
 8003714:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003716:	4b57      	ldr	r3, [pc, #348]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371e:	f7fd fbfb 	bl	8000f18 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e09a      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003740:	f7fd fbea 	bl	8000f18 <HAL_GetTick>
 8003744:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003746:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800374c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003750:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fd fbe0 	bl	8000f18 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e081      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003766:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003772:	f7fd fbd1 	bl	8000f18 <HAL_GetTick>
 8003776:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3d      	ldr	r2, [pc, #244]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd fbc7 	bl	8000f18 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e068      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80037a4:	f7fd fbb8 	bl	8000f18 <HAL_GetTick>
 80037a8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80037aa:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a31      	ldr	r2, [pc, #196]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80037b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037b4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b8:	f7fd fbae 	bl	8000f18 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04f      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80037d6:	f7fd fb9f 	bl	8000f18 <HAL_GetTick>
 80037da:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ea:	f7fd fb95 	bl	8000f18 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e036      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_RCC_DeInit+0x1ac>)
 800380c:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003810:	4a1a      	ldr	r2, [pc, #104]	; (800387c <HAL_RCC_DeInit+0x1b0>)
 8003812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_RCC_DeInit+0x1b0>)
 800381a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003828:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	4a11      	ldr	r2, [pc, #68]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003834:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003846:	4a0b      	ldr	r2, [pc, #44]	; (8003874 <HAL_RCC_DeInit+0x1a8>)
 8003848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCC_DeInit+0x1b4>)
 8003850:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_RCC_DeInit+0x1b8>)
 8003852:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_RCC_DeInit+0x1bc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd fb19 	bl	8000e90 <HAL_InitTick>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8003868:	2300      	movs	r3, #0
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	24003010 	.word	0x24003010
 800387c:	24003000 	.word	0x24003000
 8003880:	20000000 	.word	0x20000000
 8003884:	00f42400 	.word	0x00f42400
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e29b      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8087 	beq.w	80039be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b0:	4b96      	ldr	r3, [pc, #600]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d00c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038bc:	4b93      	ldr	r3, [pc, #588]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d112      	bne.n	80038ee <HAL_RCC_OscConfig+0x62>
 80038c8:	4b90      	ldr	r3, [pc, #576]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d4:	d10b      	bne.n	80038ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d6:	4b8d      	ldr	r3, [pc, #564]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d06c      	beq.n	80039bc <HAL_RCC_OscConfig+0x130>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d168      	bne.n	80039bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e275      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x7a>
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a83      	ldr	r2, [pc, #524]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e02e      	b.n	8003964 <HAL_RCC_OscConfig+0xd8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x9c>
 800390e:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7e      	ldr	r2, [pc, #504]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b7c      	ldr	r3, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7b      	ldr	r2, [pc, #492]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xd8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0xc0>
 8003932:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b73      	ldr	r3, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a72      	ldr	r2, [pc, #456]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xd8>
 800394c:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6e      	ldr	r2, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b6c      	ldr	r3, [pc, #432]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6b      	ldr	r2, [pc, #428]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd fad4 	bl	8000f18 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fd fad0 	bl	8000f18 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e229      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xe8>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fd fac0 	bl	8000f18 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fd fabc 	bl	8000f18 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e215      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b57      	ldr	r3, [pc, #348]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x110>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d069      	beq.n	8003a9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ca:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x190>
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1e9      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	493d      	ldr	r1, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e040      	b.n	8003a9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d023      	beq.n	8003a6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a38      	ldr	r2, [pc, #224]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fa72 	bl	8000f18 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fd fa6e 	bl	8000f18 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1c7      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4929      	ldr	r1, [pc, #164]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]
 8003a6a:	e018      	b.n	8003a9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd fa4e 	bl	8000f18 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a80:	f7fd fa4a 	bl	8000f18 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1a3      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d038      	beq.n	8003b1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd fa2b 	bl	8000f18 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7fd fa27 	bl	8000f18 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e180      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x23a>
 8003ae4:	e01a      	b.n	8003b1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <HAL_RCC_OscConfig+0x280>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fd fa11 	bl	8000f18 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fd fa0d 	bl	8000f18 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d903      	bls.n	8003b10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e166      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
 8003b0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b92      	ldr	r3, [pc, #584]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a4 	beq.w	8003c72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2a:	4b8c      	ldr	r3, [pc, #560]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a88      	ldr	r2, [pc, #544]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b52:	4b83      	ldr	r3, [pc, #524]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b5e:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7f      	ldr	r2, [pc, #508]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f9d5 	bl	8000f18 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fd f9d1 	bl	8000f18 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b64      	cmp	r3, #100	; 0x64
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e12a      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b84:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x31a>
 8003b98:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a6f      	ldr	r2, [pc, #444]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	e02d      	b.n	8003c02 <HAL_RCC_OscConfig+0x376>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x33c>
 8003bae:	4b6b      	ldr	r3, [pc, #428]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a6a      	ldr	r2, [pc, #424]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a67      	ldr	r2, [pc, #412]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	e01c      	b.n	8003c02 <HAL_RCC_OscConfig+0x376>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d10c      	bne.n	8003bea <HAL_RCC_OscConfig+0x35e>
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a61      	ldr	r2, [pc, #388]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	f043 0304 	orr.w	r3, r3, #4
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a5e      	ldr	r2, [pc, #376]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e00b      	b.n	8003c02 <HAL_RCC_OscConfig+0x376>
 8003bea:	4b5c      	ldr	r3, [pc, #368]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a5b      	ldr	r2, [pc, #364]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d015      	beq.n	8003c36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fd f985 	bl	8000f18 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd f981 	bl	8000f18 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0d8      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ee      	beq.n	8003c12 <HAL_RCC_OscConfig+0x386>
 8003c34:	e014      	b.n	8003c60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fd f96f 	bl	8000f18 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd f96b 	bl	8000f18 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0c2      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c54:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ee      	bne.n	8003c3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d105      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a3c      	ldr	r2, [pc, #240]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80ae 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c7c:	4b37      	ldr	r3, [pc, #220]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d06d      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d14b      	bne.n	8003d28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b32      	ldr	r3, [pc, #200]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a31      	ldr	r2, [pc, #196]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd f93c 	bl	8000f18 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd f938 	bl	8000f18 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e091      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	491b      	ldr	r1, [pc, #108]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd f90a 	bl	8000f18 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd f906 	bl	8000f18 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e05f      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x47c>
 8003d26:	e057      	b.n	8003dd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd f8f0 	bl	8000f18 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd f8ec 	bl	8000f18 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e045      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4b0>
 8003d5a:	e03d      	b.n	8003dd8 <HAL_RCC_OscConfig+0x54c>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_RCC_OscConfig+0x558>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d030      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d129      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d122      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d119      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10f      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0d0      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d910      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b67      	ldr	r3, [pc, #412]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 020f 	bic.w	r2, r3, #15
 8003e16:	4965      	ldr	r1, [pc, #404]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d040      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e073      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06b      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4936      	ldr	r1, [pc, #216]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd f81c 	bl	8000f18 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fd f818 	bl	8000f18 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e053      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d210      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 020f 	bic.w	r2, r3, #15
 8003f22:	4922      	ldr	r1, [pc, #136]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f821 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003f8c:	5cd3      	ldrb	r3, [r2, r3]
 8003f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1d4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc ff78 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	0800c680 	.word	0x0800c680
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d007      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x32>
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d008      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x38>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 80b4 	bne.w	8004154 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fee:	60bb      	str	r3, [r7, #8]
      break;
 8003ff0:	e0b3      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff2:	4b5e      	ldr	r3, [pc, #376]	; (800416c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ff4:	60bb      	str	r3, [r7, #8]
      break;
 8003ff6:	e0b0      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff8:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004000:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004002:	4b58      	ldr	r3, [pc, #352]	; (8004164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04a      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b55      	ldr	r3, [pc, #340]	; (8004164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	f04f 0400 	mov.w	r4, #0
 8004018:	f240 11ff 	movw	r1, #511	; 0x1ff
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	ea03 0501 	and.w	r5, r3, r1
 8004024:	ea04 0602 	and.w	r6, r4, r2
 8004028:	4629      	mov	r1, r5
 800402a:	4632      	mov	r2, r6
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	f04f 0400 	mov.w	r4, #0
 8004034:	0154      	lsls	r4, r2, #5
 8004036:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800403a:	014b      	lsls	r3, r1, #5
 800403c:	4619      	mov	r1, r3
 800403e:	4622      	mov	r2, r4
 8004040:	1b49      	subs	r1, r1, r5
 8004042:	eb62 0206 	sbc.w	r2, r2, r6
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	0194      	lsls	r4, r2, #6
 8004050:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004054:	018b      	lsls	r3, r1, #6
 8004056:	1a5b      	subs	r3, r3, r1
 8004058:	eb64 0402 	sbc.w	r4, r4, r2
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	00e2      	lsls	r2, r4, #3
 8004066:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800406a:	00d9      	lsls	r1, r3, #3
 800406c:	460b      	mov	r3, r1
 800406e:	4614      	mov	r4, r2
 8004070:	195b      	adds	r3, r3, r5
 8004072:	eb44 0406 	adc.w	r4, r4, r6
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	0262      	lsls	r2, r4, #9
 8004080:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004084:	0259      	lsls	r1, r3, #9
 8004086:	460b      	mov	r3, r1
 8004088:	4614      	mov	r4, r2
 800408a:	4618      	mov	r0, r3
 800408c:	4621      	mov	r1, r4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f04f 0400 	mov.w	r4, #0
 8004094:	461a      	mov	r2, r3
 8004096:	4623      	mov	r3, r4
 8004098:	f7fc f922 	bl	80002e0 <__aeabi_uldivmod>
 800409c:	4603      	mov	r3, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e049      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a4:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	f04f 0400 	mov.w	r4, #0
 80040ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	ea03 0501 	and.w	r5, r3, r1
 80040ba:	ea04 0602 	and.w	r6, r4, r2
 80040be:	4629      	mov	r1, r5
 80040c0:	4632      	mov	r2, r6
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	f04f 0400 	mov.w	r4, #0
 80040ca:	0154      	lsls	r4, r2, #5
 80040cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040d0:	014b      	lsls	r3, r1, #5
 80040d2:	4619      	mov	r1, r3
 80040d4:	4622      	mov	r2, r4
 80040d6:	1b49      	subs	r1, r1, r5
 80040d8:	eb62 0206 	sbc.w	r2, r2, r6
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	f04f 0400 	mov.w	r4, #0
 80040e4:	0194      	lsls	r4, r2, #6
 80040e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040ea:	018b      	lsls	r3, r1, #6
 80040ec:	1a5b      	subs	r3, r3, r1
 80040ee:	eb64 0402 	sbc.w	r4, r4, r2
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	00e2      	lsls	r2, r4, #3
 80040fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004100:	00d9      	lsls	r1, r3, #3
 8004102:	460b      	mov	r3, r1
 8004104:	4614      	mov	r4, r2
 8004106:	195b      	adds	r3, r3, r5
 8004108:	eb44 0406 	adc.w	r4, r4, r6
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	02a2      	lsls	r2, r4, #10
 8004116:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800411a:	0299      	lsls	r1, r3, #10
 800411c:	460b      	mov	r3, r1
 800411e:	4614      	mov	r4, r2
 8004120:	4618      	mov	r0, r3
 8004122:	4621      	mov	r1, r4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f04f 0400 	mov.w	r4, #0
 800412a:	461a      	mov	r2, r3
 800412c:	4623      	mov	r3, r4
 800412e:	f7fc f8d7 	bl	80002e0 <__aeabi_uldivmod>
 8004132:	4603      	mov	r3, r0
 8004134:	460c      	mov	r4, r1
 8004136:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	3301      	adds	r3, #1
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	60bb      	str	r3, [r7, #8]
      break;
 8004152:	e002      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004156:	60bb      	str	r3, [r7, #8]
      break;
 8004158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415a:	68bb      	ldr	r3, [r7, #8]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000000 	.word	0x20000000

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4601      	mov	r1, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4a03      	ldr	r2, [pc, #12]	; (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	0800c690 	.word	0x0800c690

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041b4:	f7ff ffdc 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041b8:	4601      	mov	r1, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c6:	5cd3      	ldrb	r3, [r2, r3]
 80041c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	0800c690 	.word	0x0800c690

080041d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e040      	b.n	800426c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc fcc6 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8be 	bl	8004398 <UART_SetConfig>
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e022      	b.n	800426c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fb5c 	bl	80048ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004242:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004252:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fbe3 	bl	8004a30 <UART_CheckIdleState>
 800426a:	4603      	mov	r3, r0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	2b20      	cmp	r3, #32
 800428a:	d17f      	bne.n	800438c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Transmit+0x24>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e078      	b.n	800438e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Transmit+0x36>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e071      	b.n	800438e <HAL_UART_Transmit+0x11a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042be:	f7fc fe2b 	bl	8000f18 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d108      	bne.n	80042f0 <HAL_UART_Transmit+0x7c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e003      	b.n	80042f8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004300:	e02c      	b.n	800435c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fbd4 	bl	8004aba <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e038      	b.n	800438e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3302      	adds	r3, #2
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e007      	b.n	800434a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1cc      	bne.n	8004302 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fba1 	bl	8004aba <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e005      	b.n	800438e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4bb1      	ldr	r3, [pc, #708]	; (800468c <UART_SetConfig+0x2f4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6939      	ldr	r1, [r7, #16]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a9f      	ldr	r2, [pc, #636]	; (8004690 <UART_SetConfig+0x2f8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d121      	bne.n	800445c <UART_SetConfig+0xc4>
 8004418:	4b9e      	ldr	r3, [pc, #632]	; (8004694 <UART_SetConfig+0x2fc>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b03      	cmp	r3, #3
 8004424:	d816      	bhi.n	8004454 <UART_SetConfig+0xbc>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x94>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	0800443d 	.word	0x0800443d
 8004430:	08004449 	.word	0x08004449
 8004434:	08004443 	.word	0x08004443
 8004438:	0800444f 	.word	0x0800444f
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e151      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e14e      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004448:	2304      	movs	r3, #4
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e14b      	b.n	80046e6 <UART_SetConfig+0x34e>
 800444e:	2308      	movs	r3, #8
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e148      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004454:	2310      	movs	r3, #16
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	bf00      	nop
 800445a:	e144      	b.n	80046e6 <UART_SetConfig+0x34e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a8d      	ldr	r2, [pc, #564]	; (8004698 <UART_SetConfig+0x300>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d134      	bne.n	80044d0 <UART_SetConfig+0x138>
 8004466:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <UART_SetConfig+0x2fc>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d829      	bhi.n	80044c8 <UART_SetConfig+0x130>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0xe4>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044b1 	.word	0x080044b1
 8004480:	080044c9 	.word	0x080044c9
 8004484:	080044c9 	.word	0x080044c9
 8004488:	080044c9 	.word	0x080044c9
 800448c:	080044bd 	.word	0x080044bd
 8004490:	080044c9 	.word	0x080044c9
 8004494:	080044c9 	.word	0x080044c9
 8004498:	080044c9 	.word	0x080044c9
 800449c:	080044b7 	.word	0x080044b7
 80044a0:	080044c9 	.word	0x080044c9
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044c9 	.word	0x080044c9
 80044ac:	080044c3 	.word	0x080044c3
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e117      	b.n	80046e6 <UART_SetConfig+0x34e>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e114      	b.n	80046e6 <UART_SetConfig+0x34e>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e111      	b.n	80046e6 <UART_SetConfig+0x34e>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e10e      	b.n	80046e6 <UART_SetConfig+0x34e>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	bf00      	nop
 80044ce:	e10a      	b.n	80046e6 <UART_SetConfig+0x34e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a71      	ldr	r2, [pc, #452]	; (800469c <UART_SetConfig+0x304>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d120      	bne.n	800451c <UART_SetConfig+0x184>
 80044da:	4b6e      	ldr	r3, [pc, #440]	; (8004694 <UART_SetConfig+0x2fc>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d00f      	beq.n	8004508 <UART_SetConfig+0x170>
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d802      	bhi.n	80044f2 <UART_SetConfig+0x15a>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <UART_SetConfig+0x164>
 80044f0:	e010      	b.n	8004514 <UART_SetConfig+0x17c>
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d005      	beq.n	8004502 <UART_SetConfig+0x16a>
 80044f6:	2b30      	cmp	r3, #48	; 0x30
 80044f8:	d009      	beq.n	800450e <UART_SetConfig+0x176>
 80044fa:	e00b      	b.n	8004514 <UART_SetConfig+0x17c>
 80044fc:	2300      	movs	r3, #0
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e0f1      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004502:	2302      	movs	r3, #2
 8004504:	77fb      	strb	r3, [r7, #31]
 8004506:	e0ee      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004508:	2304      	movs	r3, #4
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e0eb      	b.n	80046e6 <UART_SetConfig+0x34e>
 800450e:	2308      	movs	r3, #8
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e0e8      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004514:	2310      	movs	r3, #16
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	bf00      	nop
 800451a:	e0e4      	b.n	80046e6 <UART_SetConfig+0x34e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <UART_SetConfig+0x308>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d120      	bne.n	8004568 <UART_SetConfig+0x1d0>
 8004526:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <UART_SetConfig+0x2fc>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d00f      	beq.n	8004554 <UART_SetConfig+0x1bc>
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d802      	bhi.n	800453e <UART_SetConfig+0x1a6>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <UART_SetConfig+0x1b0>
 800453c:	e010      	b.n	8004560 <UART_SetConfig+0x1c8>
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	d005      	beq.n	800454e <UART_SetConfig+0x1b6>
 8004542:	2bc0      	cmp	r3, #192	; 0xc0
 8004544:	d009      	beq.n	800455a <UART_SetConfig+0x1c2>
 8004546:	e00b      	b.n	8004560 <UART_SetConfig+0x1c8>
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e0cb      	b.n	80046e6 <UART_SetConfig+0x34e>
 800454e:	2302      	movs	r3, #2
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e0c8      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004554:	2304      	movs	r3, #4
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e0c5      	b.n	80046e6 <UART_SetConfig+0x34e>
 800455a:	2308      	movs	r3, #8
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e0c2      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004560:	2310      	movs	r3, #16
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	bf00      	nop
 8004566:	e0be      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a4d      	ldr	r2, [pc, #308]	; (80046a4 <UART_SetConfig+0x30c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d124      	bne.n	80045bc <UART_SetConfig+0x224>
 8004572:	4b48      	ldr	r3, [pc, #288]	; (8004694 <UART_SetConfig+0x2fc>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004580:	d012      	beq.n	80045a8 <UART_SetConfig+0x210>
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d802      	bhi.n	800458e <UART_SetConfig+0x1f6>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <UART_SetConfig+0x204>
 800458c:	e012      	b.n	80045b4 <UART_SetConfig+0x21c>
 800458e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004592:	d006      	beq.n	80045a2 <UART_SetConfig+0x20a>
 8004594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004598:	d009      	beq.n	80045ae <UART_SetConfig+0x216>
 800459a:	e00b      	b.n	80045b4 <UART_SetConfig+0x21c>
 800459c:	2300      	movs	r3, #0
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e0a1      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045a2:	2302      	movs	r3, #2
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e09e      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045a8:	2304      	movs	r3, #4
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e09b      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045ae:	2308      	movs	r3, #8
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e098      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045b4:	2310      	movs	r3, #16
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	bf00      	nop
 80045ba:	e094      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <UART_SetConfig+0x310>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d124      	bne.n	8004610 <UART_SetConfig+0x278>
 80045c6:	4b33      	ldr	r3, [pc, #204]	; (8004694 <UART_SetConfig+0x2fc>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d012      	beq.n	80045fc <UART_SetConfig+0x264>
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045da:	d802      	bhi.n	80045e2 <UART_SetConfig+0x24a>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <UART_SetConfig+0x258>
 80045e0:	e012      	b.n	8004608 <UART_SetConfig+0x270>
 80045e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e6:	d006      	beq.n	80045f6 <UART_SetConfig+0x25e>
 80045e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ec:	d009      	beq.n	8004602 <UART_SetConfig+0x26a>
 80045ee:	e00b      	b.n	8004608 <UART_SetConfig+0x270>
 80045f0:	2301      	movs	r3, #1
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e077      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e074      	b.n	80046e6 <UART_SetConfig+0x34e>
 80045fc:	2304      	movs	r3, #4
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e071      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004602:	2308      	movs	r3, #8
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e06e      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004608:	2310      	movs	r3, #16
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	bf00      	nop
 800460e:	e06a      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a25      	ldr	r2, [pc, #148]	; (80046ac <UART_SetConfig+0x314>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d124      	bne.n	8004664 <UART_SetConfig+0x2cc>
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <UART_SetConfig+0x2fc>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d012      	beq.n	8004650 <UART_SetConfig+0x2b8>
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462e:	d802      	bhi.n	8004636 <UART_SetConfig+0x29e>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <UART_SetConfig+0x2ac>
 8004634:	e012      	b.n	800465c <UART_SetConfig+0x2c4>
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	d006      	beq.n	800464a <UART_SetConfig+0x2b2>
 800463c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004640:	d009      	beq.n	8004656 <UART_SetConfig+0x2be>
 8004642:	e00b      	b.n	800465c <UART_SetConfig+0x2c4>
 8004644:	2300      	movs	r3, #0
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e04d      	b.n	80046e6 <UART_SetConfig+0x34e>
 800464a:	2302      	movs	r3, #2
 800464c:	77fb      	strb	r3, [r7, #31]
 800464e:	e04a      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004650:	2304      	movs	r3, #4
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e047      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004656:	2308      	movs	r3, #8
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e044      	b.n	80046e6 <UART_SetConfig+0x34e>
 800465c:	2310      	movs	r3, #16
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	bf00      	nop
 8004662:	e040      	b.n	80046e6 <UART_SetConfig+0x34e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <UART_SetConfig+0x318>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d139      	bne.n	80046e2 <UART_SetConfig+0x34a>
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <UART_SetConfig+0x2fc>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467c:	d027      	beq.n	80046ce <UART_SetConfig+0x336>
 800467e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004682:	d817      	bhi.n	80046b4 <UART_SetConfig+0x31c>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01c      	beq.n	80046c2 <UART_SetConfig+0x32a>
 8004688:	e027      	b.n	80046da <UART_SetConfig+0x342>
 800468a:	bf00      	nop
 800468c:	efff69f3 	.word	0xefff69f3
 8004690:	40011000 	.word	0x40011000
 8004694:	40023800 	.word	0x40023800
 8004698:	40004400 	.word	0x40004400
 800469c:	40004800 	.word	0x40004800
 80046a0:	40004c00 	.word	0x40004c00
 80046a4:	40005000 	.word	0x40005000
 80046a8:	40011400 	.word	0x40011400
 80046ac:	40007800 	.word	0x40007800
 80046b0:	40007c00 	.word	0x40007c00
 80046b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b8:	d006      	beq.n	80046c8 <UART_SetConfig+0x330>
 80046ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046be:	d009      	beq.n	80046d4 <UART_SetConfig+0x33c>
 80046c0:	e00b      	b.n	80046da <UART_SetConfig+0x342>
 80046c2:	2300      	movs	r3, #0
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e00e      	b.n	80046e6 <UART_SetConfig+0x34e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e00b      	b.n	80046e6 <UART_SetConfig+0x34e>
 80046ce:	2304      	movs	r3, #4
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e008      	b.n	80046e6 <UART_SetConfig+0x34e>
 80046d4:	2308      	movs	r3, #8
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x34e>
 80046da:	2310      	movs	r3, #16
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	bf00      	nop
 80046e0:	e001      	b.n	80046e6 <UART_SetConfig+0x34e>
 80046e2:	2310      	movs	r3, #16
 80046e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d17f      	bne.n	80047f0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80046f0:	7ffb      	ldrb	r3, [r7, #31]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d85c      	bhi.n	80047b0 <UART_SetConfig+0x418>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x364>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004741 	.word	0x08004741
 8004704:	08004761 	.word	0x08004761
 8004708:	080047b1 	.word	0x080047b1
 800470c:	08004779 	.word	0x08004779
 8004710:	080047b1 	.word	0x080047b1
 8004714:	080047b1 	.word	0x080047b1
 8004718:	080047b1 	.word	0x080047b1
 800471c:	08004799 	.word	0x08004799
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7ff fd32 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8004724:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	005a      	lsls	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	61bb      	str	r3, [r7, #24]
        break;
 800473e:	e03a      	b.n	80047b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7ff fd36 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8004744:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	005a      	lsls	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	b29b      	uxth	r3, r3
 800475c:	61bb      	str	r3, [r7, #24]
        break;
 800475e:	e02a      	b.n	80047b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	085a      	lsrs	r2, r3, #1
 8004766:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <UART_SetConfig+0x54c>)
 8004768:	4413      	add	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6852      	ldr	r2, [r2, #4]
 800476e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	61bb      	str	r3, [r7, #24]
        break;
 8004776:	e01e      	b.n	80047b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004778:	f7ff fc22 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 800477c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	005a      	lsls	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	b29b      	uxth	r3, r3
 8004794:	61bb      	str	r3, [r7, #24]
        break;
 8004796:	e00e      	b.n	80047b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	61bb      	str	r3, [r7, #24]
        break;
 80047ae:	e002      	b.n	80047b6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	75fb      	strb	r3, [r7, #23]
        break;
 80047b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d916      	bls.n	80047ea <UART_SetConfig+0x452>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c2:	d212      	bcs.n	80047ea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f023 030f 	bic.w	r3, r3, #15
 80047cc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	b29a      	uxth	r2, r3
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	4313      	orrs	r3, r2
 80047de:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	897a      	ldrh	r2, [r7, #10]
 80047e6:	60da      	str	r2, [r3, #12]
 80047e8:	e070      	b.n	80048cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
 80047ee:	e06d      	b.n	80048cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80047f0:	7ffb      	ldrb	r3, [r7, #31]
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d859      	bhi.n	80048aa <UART_SetConfig+0x512>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x464>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004821 	.word	0x08004821
 8004800:	0800483f 	.word	0x0800483f
 8004804:	0800485d 	.word	0x0800485d
 8004808:	080048ab 	.word	0x080048ab
 800480c:	08004875 	.word	0x08004875
 8004810:	080048ab 	.word	0x080048ab
 8004814:	080048ab 	.word	0x080048ab
 8004818:	080048ab 	.word	0x080048ab
 800481c:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7ff fcb2 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8004824:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	085a      	lsrs	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	441a      	add	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	b29b      	uxth	r3, r3
 800483a:	61bb      	str	r3, [r7, #24]
        break;
 800483c:	e038      	b.n	80048b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800483e:	f7ff fcb7 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8004842:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	085a      	lsrs	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	441a      	add	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	61bb      	str	r3, [r7, #24]
        break;
 800485a:	e029      	b.n	80048b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	085a      	lsrs	r2, r3, #1
 8004862:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <UART_SetConfig+0x550>)
 8004864:	4413      	add	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6852      	ldr	r2, [r2, #4]
 800486a:	fbb3 f3f2 	udiv	r3, r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	61bb      	str	r3, [r7, #24]
        break;
 8004872:	e01d      	b.n	80048b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004874:	f7ff fba4 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8004878:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	085a      	lsrs	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	441a      	add	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e00e      	b.n	80048b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e002      	b.n	80048b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
        break;
 80048ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d908      	bls.n	80048c8 <UART_SetConfig+0x530>
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d204      	bcs.n	80048c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e001      	b.n	80048cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	01e84800 	.word	0x01e84800
 80048e8:	00f42400 	.word	0x00f42400

080048ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ea:	d10a      	bne.n	8004a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a3e:	f7fc fa6b 	bl	8000f18 <HAL_GetTick>
 8004a42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d10e      	bne.n	8004a70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f82a 	bl	8004aba <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e020      	b.n	8004ab2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d10e      	bne.n	8004a9c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f814 	bl	8004aba <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e00a      	b.n	8004ab2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aca:	e05d      	b.n	8004b88 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d059      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad4:	f7fc fa20 	bl	8000f18 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11b      	bne.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e042      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02b      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3e:	d123      	bne.n	8004b88 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b48:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e00f      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d092      	beq.n	8004acc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	f107 001c 	add.w	r0, r7, #28
 8004bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d120      	bne.n	8004c0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <USB_CoreInit+0xac>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d105      	bne.n	8004bfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f942 	bl	8004e88 <USB_CoreReset>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e010      	b.n	8004c2c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f936 	bl	8004e88 <USB_CoreReset>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10b      	bne.n	8004c4a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f043 0206 	orr.w	r2, r3, #6
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c56:	b004      	add	sp, #16
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	ffbdffbf 	.word	0xffbdffbf

08004c60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d106      	bne.n	8004cd0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e00b      	b.n	8004ce8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60da      	str	r2, [r3, #12]
 8004ce2:	e001      	b.n	8004ce8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e003      	b.n	8004cf0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ce8:	2032      	movs	r0, #50	; 0x32
 8004cea:	f7fc f921 	bl	8000f30 <HAL_Delay>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <USB_FlushTxFifo+0x48>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d0f0      	beq.n	8004d12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	00030d40 	.word	0x00030d40

08004d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2210      	movs	r2, #16
 8004d54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <USB_FlushRxFifo+0x40>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e006      	b.n	8004d76 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d0f0      	beq.n	8004d56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	00030d40 	.word	0x00030d40

08004d88 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	460b      	mov	r3, r1
 8004d98:	71fb      	strb	r3, [r7, #7]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11a      	bne.n	8004de4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004dae:	88bb      	ldrh	r3, [r7, #4]
 8004db0:	3303      	adds	r3, #3
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e00f      	b.n	8004ddc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	031a      	lsls	r2, r3, #12
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc8:	461a      	mov	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d3eb      	bcc.n	8004dbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b089      	sub	sp, #36	; 0x24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	3303      	adds	r3, #3
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e00b      	b.n	8004e2e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3304      	adds	r3, #4
 8004e26:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d3ef      	bcc.n	8004e16 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e36:	69fb      	ldr	r3, [r7, #28]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3724      	adds	r7, #36	; 0x24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0301 	and.w	r3, r3, #1
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <USB_CoreReset+0x64>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e01b      	b.n	8004ede <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	daf2      	bge.n	8004e94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <USB_CoreReset+0x64>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e006      	b.n	8004ede <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d0f0      	beq.n	8004ebe <USB_CoreReset+0x36>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	f107 001c 	add.w	r0, r7, #28
 8004efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d018      	beq.n	8004f5c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10a      	bne.n	8004f46 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f3e:	f043 0304 	orr.w	r3, r3, #4
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e014      	b.n	8004f70 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e009      	b.n	8004f70 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f6a:	f023 0304 	bic.w	r3, r3, #4
 8004f6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004f70:	2110      	movs	r1, #16
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fec0 	bl	8004cf8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff fee3 	bl	8004d44 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e015      	b.n	8004fb0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	461a      	mov	r2, r3
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3e5      	bcc.n	8004f84 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8ac 	bl	8005118 <USB_DriveVbus>

  HAL_Delay(200U);
 8004fc0:	20c8      	movs	r0, #200	; 0xc8
 8004fc2:	f7fb ffb5 	bl	8000f30 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a14      	ldr	r2, [pc, #80]	; (800503c <USB_HostInit+0x14c>)
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <USB_HostInit+0x150>)
 8004ff2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ff6:	e009      	b.n	800500c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a10      	ldr	r2, [pc, #64]	; (8005044 <USB_HostInit+0x154>)
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <USB_HostInit+0x158>)
 8005008:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f043 0210 	orr.w	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <USB_HostInit+0x15c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005036:	b004      	add	sp, #16
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	01000200 	.word	0x01000200
 8005040:	00e00300 	.word	0x00e00300
 8005044:	00600080 	.word	0x00600080
 8005048:	004000e0 	.word	0x004000e0
 800504c:	a3200008 	.word	0xa3200008

08005050 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005098:	461a      	mov	r2, r3
 800509a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800509e:	6053      	str	r3, [r2, #4]
 80050a0:	e009      	b.n	80050b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d106      	bne.n	80050b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ae:	461a      	mov	r2, r3
 80050b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80050b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80050f4:	2064      	movs	r0, #100	; 0x64
 80050f6:	f7fb ff1b 	bl	8000f30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005106:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005108:	200a      	movs	r0, #10
 800510a:	f7fb ff11 	bl	8000f30 <HAL_Delay>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800513c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <USB_DriveVbus+0x44>
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d106      	bne.n	800515c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800515a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d109      	bne.n	800517c <USB_DriveVbus+0x64>
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	0c5b      	lsrs	r3, r3, #17
 80051a8:	f003 0303 	and.w	r3, r3, #3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	b29b      	uxth	r3, r3
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	70fb      	strb	r3, [r7, #3]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70bb      	strb	r3, [r7, #2]
 80051f2:	4613      	mov	r3, r2
 80051f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005212:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005216:	2b03      	cmp	r3, #3
 8005218:	d87e      	bhi.n	8005318 <USB_HC_Init+0x13c>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <USB_HC_Init+0x44>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005231 	.word	0x08005231
 8005224:	080052db 	.word	0x080052db
 8005228:	08005231 	.word	0x08005231
 800522c:	0800529d 	.word	0x0800529d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005248:	2b00      	cmp	r3, #0
 800524a:	da10      	bge.n	800526e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	440a      	add	r2, r1
 8005262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800526c:	e057      	b.n	800531e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d051      	beq.n	800531e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	440a      	add	r2, r1
 8005290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005294:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005298:	60d3      	str	r3, [r2, #12]
      break;
 800529a:	e040      	b.n	800531e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	461a      	mov	r2, r3
 80052aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80052ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80052b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da34      	bge.n	8005322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80052d8:	e023      	b.n	8005322 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	f240 2325 	movw	r3, #549	; 0x225
 80052ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80052ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da17      	bge.n	8005326 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	440a      	add	r2, r1
 800530c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005310:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005314:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005316:	e006      	b.n	8005326 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
      break;
 800531c:	e004      	b.n	8005328 <USB_HC_Init+0x14c>
      break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <USB_HC_Init+0x14c>
      break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <USB_HC_Init+0x14c>
      break;
 8005326:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005342:	4313      	orrs	r3, r2
 8005344:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005352:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005356:	2b00      	cmp	r3, #0
 8005358:	da03      	bge.n	8005362 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800535a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e001      	b.n	8005366 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d103      	bne.n	8005376 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800536e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e001      	b.n	800537a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800537a:	787b      	ldrb	r3, [r7, #1]
 800537c:	059b      	lsls	r3, r3, #22
 800537e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005382:	78bb      	ldrb	r3, [r7, #2]
 8005384:	02db      	lsls	r3, r3, #11
 8005386:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800538a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800538c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005390:	049b      	lsls	r3, r3, #18
 8005392:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005396:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005398:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800539a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800539e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	0159      	lsls	r1, r3, #5
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	440b      	add	r3, r1
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053b6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80053b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d10f      	bne.n	80053e0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053de:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop

080053f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08c      	sub	sp, #48	; 0x30
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	785b      	ldrb	r3, [r3, #1]
 8005406:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800540c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d028      	beq.n	800546c <USB_HC_StartXfer+0x7c>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	791b      	ldrb	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d124      	bne.n	800546c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <USB_HC_StartXfer+0x50>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	795b      	ldrb	r3, [r3, #5]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d107      	bne.n	8005440 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	4619      	mov	r1, r3
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fa2e 	bl	8005898 <USB_DoPing>
      return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e112      	b.n	8005666 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d112      	bne.n	800546c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	440a      	add	r2, r1
 800545c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005460:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005464:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d018      	beq.n	80054a6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	8912      	ldrh	r2, [r2, #8]
 800547c:	4413      	add	r3, r2
 800547e:	3b01      	subs	r3, #1
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	8912      	ldrh	r2, [r2, #8]
 8005484:	fbb3 f3f2 	udiv	r3, r3, r2
 8005488:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800548a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800548c:	8b7b      	ldrh	r3, [r7, #26]
 800548e:	429a      	cmp	r2, r3
 8005490:	d90b      	bls.n	80054aa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005492:	8b7b      	ldrh	r3, [r7, #26]
 8005494:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	8912      	ldrh	r2, [r2, #8]
 800549c:	fb02 f203 	mul.w	r2, r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	611a      	str	r2, [r3, #16]
 80054a4:	e001      	b.n	80054aa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80054a6:	2301      	movs	r3, #1
 80054a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80054b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	8912      	ldrh	r2, [r2, #8]
 80054b8:	fb02 f203 	mul.w	r2, r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054ca:	04d9      	lsls	r1, r3, #19
 80054cc:	4b68      	ldr	r3, [pc, #416]	; (8005670 <USB_HC_StartXfer+0x280>)
 80054ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	7a9b      	ldrb	r3, [r3, #10]
 80054d6:	075b      	lsls	r3, r3, #29
 80054d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	0148      	lsls	r0, r1, #5
 80054e0:	6a39      	ldr	r1, [r7, #32]
 80054e2:	4401      	add	r1, r0
 80054e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68d9      	ldr	r1, [r3, #12]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	460a      	mov	r2, r1
 8005504:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	440a      	add	r2, r1
 8005534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005538:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800553c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	7e7b      	ldrb	r3, [r7, #25]
 800554e:	075b      	lsls	r3, r3, #29
 8005550:	69f9      	ldr	r1, [r7, #28]
 8005552:	0148      	lsls	r0, r1, #5
 8005554:	6a39      	ldr	r1, [r7, #32]
 8005556:	4401      	add	r1, r0
 8005558:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a41      	ldr	r2, [pc, #260]	; (8005674 <USB_HC_StartXfer+0x284>)
 8005570:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005572:	4b40      	ldr	r3, [pc, #256]	; (8005674 <USB_HC_StartXfer+0x284>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800557a:	4a3e      	ldr	r2, [pc, #248]	; (8005674 <USB_HC_StartXfer+0x284>)
 800557c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005586:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <USB_HC_StartXfer+0x284>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558e:	4a39      	ldr	r2, [pc, #228]	; (8005674 <USB_HC_StartXfer+0x284>)
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e005      	b.n	80055a0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <USB_HC_StartXfer+0x284>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800559c:	4a35      	ldr	r2, [pc, #212]	; (8005674 <USB_HC_StartXfer+0x284>)
 800559e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055a0:	4b34      	ldr	r3, [pc, #208]	; (8005674 <USB_HC_StartXfer+0x284>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	4a32      	ldr	r2, [pc, #200]	; (8005674 <USB_HC_StartXfer+0x284>)
 80055aa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	461a      	mov	r2, r3
 80055ba:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <USB_HC_StartXfer+0x284>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d14e      	bne.n	8005664 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	78db      	ldrb	r3, [r3, #3]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d14a      	bne.n	8005664 <USB_HC_StartXfer+0x274>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d046      	beq.n	8005664 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	79db      	ldrb	r3, [r3, #7]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d830      	bhi.n	8005640 <USB_HC_StartXfer+0x250>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <USB_HC_StartXfer+0x1f4>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005619 	.word	0x08005619
 80055ec:	080055f5 	.word	0x080055f5
 80055f0:	08005619 	.word	0x08005619
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	3303      	adds	r3, #3
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055fe:	8afa      	ldrh	r2, [r7, #22]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	b29b      	uxth	r3, r3
 8005606:	429a      	cmp	r2, r3
 8005608:	d91c      	bls.n	8005644 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	619a      	str	r2, [r3, #24]
          }
          break;
 8005616:	e015      	b.n	8005644 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	3303      	adds	r3, #3
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005622:	8afa      	ldrh	r2, [r7, #22]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	b29b      	uxth	r3, r3
 800562e:	429a      	cmp	r2, r3
 8005630:	d90a      	bls.n	8005648 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	619a      	str	r2, [r3, #24]
          }
          break;
 800563e:	e003      	b.n	8005648 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <USB_HC_StartXfer+0x25a>
          break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <USB_HC_StartXfer+0x25a>
          break;
 8005648:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	68d9      	ldr	r1, [r3, #12]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	785a      	ldrb	r2, [r3, #1]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	b298      	uxth	r0, r3
 8005658:	2300      	movs	r3, #0
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4603      	mov	r3, r0
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7ff fb92 	bl	8004d88 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3728      	adds	r7, #40	; 0x28
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	1ff80000 	.word	0x1ff80000
 8005674:	200100b4 	.word	0x200100b4

08005678 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	b29b      	uxth	r3, r3
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800569a:	b480      	push	{r7}
 800569c:	b087      	sub	sp, #28
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0c9b      	lsrs	r3, r3, #18
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <USB_HC_Halt+0x3a>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d16c      	bne.n	80057ae <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d143      	bne.n	8005788 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	440a      	add	r2, r1
 8005716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800571e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	440a      	add	r2, r1
 8005736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800573e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	440a      	add	r2, r1
 8005756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800575e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3301      	adds	r3, #1
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576c:	d81d      	bhi.n	80057aa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005784:	d0ec      	beq.n	8005760 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005786:	e080      	b.n	800588a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	440a      	add	r2, r1
 800579e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057a8:	e06f      	b.n	800588a <USB_HC_Halt+0x1f0>
          break;
 80057aa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057ac:	e06d      	b.n	800588a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057cc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d143      	bne.n	8005866 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	440a      	add	r2, r1
 8005814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800581c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	440a      	add	r2, r1
 8005834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800583c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584a:	d81d      	bhi.n	8005888 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005862:	d0ec      	beq.n	800583e <USB_HC_Halt+0x1a4>
 8005864:	e011      	b.n	800588a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	440a      	add	r2, r1
 800587c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e000      	b.n	800588a <USB_HC_Halt+0x1f0>
          break;
 8005888:	bf00      	nop
    }
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80058ac:	2301      	movs	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	04da      	lsls	r2, r3, #19
 80058b4:	4b15      	ldr	r3, [pc, #84]	; (800590c <USB_DoPing+0x74>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058e0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	1ff80000 	.word	0x1ff80000

08005910 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff f9ae 	bl	8004c82 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005926:	2110      	movs	r1, #16
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff f9e5 	bl	8004cf8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fa08 	bl	8004d44 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e01f      	b.n	800597a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005950:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005958:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005960:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	461a      	mov	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	3301      	adds	r3, #1
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d9dc      	bls.n	800593a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	e034      	b.n	80059f0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800599c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3301      	adds	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059cc:	d80c      	bhi.n	80059e8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e4:	d0ec      	beq.n	80059c0 <USB_StopHost+0xb0>
 80059e6:	e000      	b.n	80059ea <USB_StopHost+0xda>
        break;
 80059e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3301      	adds	r3, #1
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	d9c7      	bls.n	8005986 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fc:	461a      	mov	r2, r3
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005a02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff f927 	bl	8004c60 <USB_EnableGlobalInt>

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
char USBH_Path[4];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005a20:	4904      	ldr	r1, [pc, #16]	; (8005a34 <MX_FATFS_Init+0x18>)
 8005a22:	4805      	ldr	r0, [pc, #20]	; (8005a38 <MX_FATFS_Init+0x1c>)
 8005a24:	f005 fa08 	bl	800ae38 <FATFS_LinkDriver>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <MX_FATFS_Init+0x20>)
 8005a2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a30:	bf00      	nop
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20010880 	.word	0x20010880
 8005a38:	0800c698 	.word	0x0800c698
 8005a3c:	20010ce8 	.word	0x20010ce8

08005a40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4808      	ldr	r0, [pc, #32]	; (8005a9c <USBH_status+0x34>)
 8005a7c:	f000 fe11 	bl	80066a2 <USBH_MSC_UnitIsReady>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <USBH_status+0x24>
  {
    res = RES_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	e001      	b.n	8005a90 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20010cec 	.word	0x20010cec

08005aa0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b094      	sub	sp, #80	; 0x50
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005ab6:	7bf9      	ldrb	r1, [r7, #15]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4812      	ldr	r0, [pc, #72]	; (8005b0c <USBH_read+0x6c>)
 8005ac2:	f000 fe38 	bl	8006736 <USBH_MSC_Read>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <USBH_read+0x34>
  {
    res = RES_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ad2:	e015      	b.n	8005b00 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005ad4:	f107 0210 	add.w	r2, r7, #16
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	4619      	mov	r1, r3
 8005adc:	480b      	ldr	r0, [pc, #44]	; (8005b0c <USBH_read+0x6c>)
 8005ade:	f000 fe06 	bl	80066ee <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005ae2:	7f7b      	ldrb	r3, [r7, #29]
 8005ae4:	2b28      	cmp	r3, #40	; 0x28
 8005ae6:	d003      	beq.n	8005af0 <USBH_read+0x50>
 8005ae8:	2b3a      	cmp	r3, #58	; 0x3a
 8005aea:	d001      	beq.n	8005af0 <USBH_read+0x50>
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d103      	bne.n	8005af8 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005af0:	2303      	movs	r3, #3
 8005af2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005af6:	e003      	b.n	8005b00 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005afe:	bf00      	nop
    }
  }

  return res;
 8005b00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3748      	adds	r7, #72	; 0x48
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20010cec 	.word	0x20010cec

08005b10 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b094      	sub	sp, #80	; 0x50
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005b26:	7bf9      	ldrb	r1, [r7, #15]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4817      	ldr	r0, [pc, #92]	; (8005b90 <USBH_write+0x80>)
 8005b32:	f000 fe69 	bl	8006808 <USBH_MSC_Write>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <USBH_write+0x34>
  {
    res = RES_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b42:	e01f      	b.n	8005b84 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005b44:	f107 0210 	add.w	r2, r7, #16
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4810      	ldr	r0, [pc, #64]	; (8005b90 <USBH_write+0x80>)
 8005b4e:	f000 fdce 	bl	80066ee <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005b52:	7f7b      	ldrb	r3, [r7, #29]
 8005b54:	2b27      	cmp	r3, #39	; 0x27
 8005b56:	d009      	beq.n	8005b6c <USBH_write+0x5c>
 8005b58:	2b27      	cmp	r3, #39	; 0x27
 8005b5a:	dc02      	bgt.n	8005b62 <USBH_write+0x52>
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d009      	beq.n	8005b74 <USBH_write+0x64>
 8005b60:	e00c      	b.n	8005b7c <USBH_write+0x6c>
 8005b62:	2b28      	cmp	r3, #40	; 0x28
 8005b64:	d006      	beq.n	8005b74 <USBH_write+0x64>
 8005b66:	2b3a      	cmp	r3, #58	; 0x3a
 8005b68:	d004      	beq.n	8005b74 <USBH_write+0x64>
 8005b6a:	e007      	b.n	8005b7c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b72:	e007      	b.n	8005b84 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005b74:	2303      	movs	r3, #3
 8005b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b7a:	e003      	b.n	8005b84 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b82:	bf00      	nop
    }
  }

  return res;
 8005b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3748      	adds	r7, #72	; 0x48
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20010cec 	.word	0x20010cec

08005b94 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b090      	sub	sp, #64	; 0x40
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	603a      	str	r2, [r7, #0]
 8005b9e:	71fb      	strb	r3, [r7, #7]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005baa:	79bb      	ldrb	r3, [r7, #6]
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d852      	bhi.n	8005c56 <USBH_ioctl+0xc2>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <USBH_ioctl+0x24>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005bd1 	.word	0x08005bd1
 8005bc0:	08005bfb 	.word	0x08005bfb
 8005bc4:	08005c27 	.word	0x08005c27
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bce:	e045      	b.n	8005c5c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4823      	ldr	r0, [pc, #140]	; (8005c68 <USBH_ioctl+0xd4>)
 8005bda:	f000 fd88 	bl	80066ee <USBH_MSC_GetLUNInfo>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005bf0:	e034      	b.n	8005c5c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bf8:	e030      	b.n	8005c5c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005bfa:	f107 0208 	add.w	r2, r7, #8
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	4619      	mov	r1, r3
 8005c02:	4819      	ldr	r0, [pc, #100]	; (8005c68 <USBH_ioctl+0xd4>)
 8005c04:	f000 fd73 	bl	80066ee <USBH_MSC_GetLUNInfo>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005c0e:	8a3b      	ldrh	r3, [r7, #16]
 8005c10:	461a      	mov	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c1c:	e01e      	b.n	8005c5c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c24:	e01a      	b.n	8005c5c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	480e      	ldr	r0, [pc, #56]	; (8005c68 <USBH_ioctl+0xd4>)
 8005c30:	f000 fd5d 	bl	80066ee <USBH_MSC_GetLUNInfo>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005c3a:	8a3b      	ldrh	r3, [r7, #16]
 8005c3c:	0a5b      	lsrs	r3, r3, #9
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c4c:	e006      	b.n	8005c5c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c54:	e002      	b.n	8005c5c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005c56:	2304      	movs	r3, #4
 8005c58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005c5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3740      	adds	r7, #64	; 0x40
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20010cec 	.word	0x20010cec

08005c6c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b089      	sub	sp, #36	; 0x24
 8005c70:	af04      	add	r7, sp, #16
 8005c72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c7a:	7919      	ldrb	r1, [r3, #4]
 8005c7c:	2350      	movs	r3, #80	; 0x50
 8005c7e:	2206      	movs	r2, #6
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fc4f 	bl	8007524 <USBH_FindInterface>
 8005c86:	4603      	mov	r3, r0
 8005c88:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	2bff      	cmp	r3, #255	; 0xff
 8005c8e:	d002      	beq.n	8005c96 <USBH_MSC_InterfaceInit+0x2a>
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d901      	bls.n	8005c9a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0ef      	b.n	8005e7a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 fc24 	bl	80074ec <USBH_SelectInterface>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e0e3      	b.n	8005e7a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cbc:	f005 fc70 	bl	800b5a0 <malloc>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0d0      	b.n	8005e7a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cdc:	2100      	movs	r1, #0
 8005cde:	68b8      	ldr	r0, [r7, #8]
 8005ce0:	f005 fc79 	bl	800b5d6 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	211a      	movs	r1, #26
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da16      	bge.n	8005d2a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	211a      	movs	r1, #26
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	211a      	movs	r1, #26
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	815a      	strh	r2, [r3, #10]
 8005d28:	e015      	b.n	8005d56 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	211a      	movs	r1, #26
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	211a      	movs	r1, #26
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	211a      	movs	r1, #26
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da16      	bge.n	8005d9c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	211a      	movs	r1, #26
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	211a      	movs	r1, #26
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	815a      	strh	r2, [r3, #10]
 8005d9a:	e015      	b.n	8005dc8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	211a      	movs	r1, #26
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	211a      	movs	r1, #26
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005dc2:	881a      	ldrh	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	799b      	ldrb	r3, [r3, #6]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f002 fdc2 	bl	800896a <USBH_AllocPipe>
 8005de6:	4603      	mov	r3, r0
 8005de8:	461a      	mov	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	79db      	ldrb	r3, [r3, #7]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 fdb8 	bl	800896a <USBH_AllocPipe>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fda4 	bl	8006950 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	7959      	ldrb	r1, [r3, #5]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	7998      	ldrb	r0, [r3, #6]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	8912      	ldrh	r2, [r2, #8]
 8005e20:	9202      	str	r2, [sp, #8]
 8005e22:	2202      	movs	r2, #2
 8005e24:	9201      	str	r2, [sp, #4]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4623      	mov	r3, r4
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 fd6d 	bl	800890c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	7919      	ldrb	r1, [r3, #4]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	79d8      	ldrb	r0, [r3, #7]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	8952      	ldrh	r2, [r2, #10]
 8005e4a:	9202      	str	r2, [sp, #8]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	9201      	str	r2, [sp, #4]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	4623      	mov	r3, r4
 8005e54:	4602      	mov	r2, r0
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 fd58 	bl	800890c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	791b      	ldrb	r3, [r3, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f005 fa7b 	bl	800b360 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f005 fa74 	bl	800b360 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}

08005e82 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	795b      	ldrb	r3, [r3, #5]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00e      	beq.n	8005eba <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	795b      	ldrb	r3, [r3, #5]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f002 fd51 	bl	800894a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	795b      	ldrb	r3, [r3, #5]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f002 fd7c 	bl	80089ac <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	791b      	ldrb	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00e      	beq.n	8005ee0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	791b      	ldrb	r3, [r3, #4]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f002 fd3e 	bl	800894a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f002 fd69 	bl	80089ac <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f005 fb5b 	bl	800b5b0 <free>
    phost->pActiveClass->pData = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f00:	2200      	movs	r2, #0
 8005f02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	7b9b      	ldrb	r3, [r3, #14]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d004      	beq.n	8005f36 <USBH_MSC_ClassRequest+0x28>
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d03e      	beq.n	8005fae <USBH_MSC_ClassRequest+0xa0>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d000      	beq.n	8005f36 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8005f34:	e04a      	b.n	8005fcc <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fcea 	bl	8006914 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d104      	bne.n	8005f54 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d135      	bne.n	8005fc6 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d804      	bhi.n	8005f6c <USBH_MSC_ClassRequest+0x5e>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	e000      	b.n	8005f6e <USBH_MSC_ClassRequest+0x60>
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	73bb      	strb	r3, [r7, #14]
 8005f76:	e014      	b.n	8005fa2 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	2134      	movs	r1, #52	; 0x34
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	3392      	adds	r3, #146	; 0x92
 8005f86:	2202      	movs	r2, #2
 8005f88:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	2134      	movs	r1, #52	; 0x34
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	33c1      	adds	r3, #193	; 0xc1
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005f9c:	7bbb      	ldrb	r3, [r7, #14]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	73bb      	strb	r3, [r7, #14]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	7bba      	ldrb	r2, [r7, #14]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d3e5      	bcc.n	8005f78 <USBH_MSC_ClassRequest+0x6a>
      break;
 8005fac:	e00b      	b.n	8005fc6 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f002 f878 	bl	80080a6 <USBH_ClrFeature>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	7bda      	ldrb	r2, [r3, #15]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	739a      	strb	r2, [r3, #14]
      break;
 8005fc4:	e001      	b.n	8005fca <USBH_MSC_ClassRequest+0xbc>
      break;
 8005fc6:	bf00      	nop
 8005fc8:	e000      	b.n	8005fcc <USBH_MSC_ClassRequest+0xbe>
      break;
 8005fca:	bf00      	nop
  }

  return status;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	7b1b      	ldrb	r3, [r3, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <USBH_MSC_Process+0x2e>
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	f000 8271 	beq.w	80064e6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006004:	e272      	b.n	80064ec <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	429a      	cmp	r2, r3
 8006014:	f080 824f 	bcs.w	80064b6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800601e:	4619      	mov	r1, r3
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	2334      	movs	r3, #52	; 0x34
 8006024:	fb03 f301 	mul.w	r3, r3, r1
 8006028:	4413      	add	r3, r2
 800602a:	3391      	adds	r3, #145	; 0x91
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006036:	4619      	mov	r1, r3
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	2334      	movs	r3, #52	; 0x34
 800603c:	fb03 f301 	mul.w	r3, r3, r1
 8006040:	4413      	add	r3, r2
 8006042:	3390      	adds	r3, #144	; 0x90
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b08      	cmp	r3, #8
 8006048:	f200 8243 	bhi.w	80064d2 <USBH_MSC_Process+0x4fa>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <USBH_MSC_Process+0x7c>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006079 	.word	0x08006079
 8006058:	080064d3 	.word	0x080064d3
 800605c:	08006141 	.word	0x08006141
 8006060:	080062c5 	.word	0x080062c5
 8006064:	0800609f 	.word	0x0800609f
 8006068:	08006391 	.word	0x08006391
 800606c:	080064d3 	.word	0x080064d3
 8006070:	080064d3 	.word	0x080064d3
 8006074:	080064a5 	.word	0x080064a5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800607e:	4619      	mov	r1, r3
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	2334      	movs	r3, #52	; 0x34
 8006084:	fb03 f301 	mul.w	r3, r3, r1
 8006088:	4413      	add	r3, r2
 800608a:	3390      	adds	r3, #144	; 0x90
 800608c:	2204      	movs	r2, #4
 800608e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800609c:	e222      	b.n	80064e4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a4:	b2d9      	uxtb	r1, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ac:	461a      	mov	r2, r3
 80060ae:	2334      	movs	r3, #52	; 0x34
 80060b0:	fb03 f302 	mul.w	r3, r3, r2
 80060b4:	3398      	adds	r3, #152	; 0x98
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	3307      	adds	r3, #7
 80060bc:	461a      	mov	r2, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 ff68 	bl	8006f94 <USBH_MSC_SCSI_Inquiry>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060d4:	4619      	mov	r1, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	2334      	movs	r3, #52	; 0x34
 80060da:	fb03 f301 	mul.w	r3, r3, r1
 80060de:	4413      	add	r3, r2
 80060e0:	3390      	adds	r3, #144	; 0x90
 80060e2:	2202      	movs	r2, #2
 80060e4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d10c      	bne.n	8006106 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060f2:	4619      	mov	r1, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	2334      	movs	r3, #52	; 0x34
 80060f8:	fb03 f301 	mul.w	r3, r3, r1
 80060fc:	4413      	add	r3, r2
 80060fe:	3390      	adds	r3, #144	; 0x90
 8006100:	2205      	movs	r2, #5
 8006102:	701a      	strb	r2, [r3, #0]
            break;
 8006104:	e1e7      	b.n	80064d6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b04      	cmp	r3, #4
 800610a:	f040 81e4 	bne.w	80064d6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006114:	4619      	mov	r1, r3
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	2334      	movs	r3, #52	; 0x34
 800611a:	fb03 f301 	mul.w	r3, r3, r1
 800611e:	4413      	add	r3, r2
 8006120:	3390      	adds	r3, #144	; 0x90
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800612c:	4619      	mov	r1, r3
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	2334      	movs	r3, #52	; 0x34
 8006132:	fb03 f301 	mul.w	r3, r3, r1
 8006136:	4413      	add	r3, r2
 8006138:	3391      	adds	r3, #145	; 0x91
 800613a:	2202      	movs	r2, #2
 800613c:	701a      	strb	r2, [r3, #0]
            break;
 800613e:	e1ca      	b.n	80064d6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fe64 	bl	8006e18 <USBH_MSC_SCSI_TestUnitReady>
 8006150:	4603      	mov	r3, r0
 8006152:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d149      	bne.n	80061ee <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006160:	4619      	mov	r1, r3
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	2334      	movs	r3, #52	; 0x34
 8006166:	fb03 f301 	mul.w	r3, r3, r1
 800616a:	4413      	add	r3, r2
 800616c:	3392      	adds	r3, #146	; 0x92
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800617a:	4619      	mov	r1, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	2334      	movs	r3, #52	; 0x34
 8006180:	fb03 f301 	mul.w	r3, r3, r1
 8006184:	4413      	add	r3, r2
 8006186:	33c1      	adds	r3, #193	; 0xc1
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e00b      	b.n	80061a6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006194:	4619      	mov	r1, r3
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	2334      	movs	r3, #52	; 0x34
 800619a:	fb03 f301 	mul.w	r3, r3, r1
 800619e:	4413      	add	r3, r2
 80061a0:	33c1      	adds	r3, #193	; 0xc1
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ac:	4619      	mov	r1, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	2334      	movs	r3, #52	; 0x34
 80061b2:	fb03 f301 	mul.w	r3, r3, r1
 80061b6:	4413      	add	r3, r2
 80061b8:	3390      	adds	r3, #144	; 0x90
 80061ba:	2203      	movs	r2, #3
 80061bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c4:	4619      	mov	r1, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	2334      	movs	r3, #52	; 0x34
 80061ca:	fb03 f301 	mul.w	r3, r3, r1
 80061ce:	4413      	add	r3, r2
 80061d0:	3391      	adds	r3, #145	; 0x91
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061dc:	4619      	mov	r1, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	2334      	movs	r3, #52	; 0x34
 80061e2:	fb03 f301 	mul.w	r3, r3, r1
 80061e6:	4413      	add	r3, r2
 80061e8:	3392      	adds	r3, #146	; 0x92
 80061ea:	2200      	movs	r2, #0
 80061ec:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d14a      	bne.n	800628a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061fa:	4619      	mov	r1, r3
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	2334      	movs	r3, #52	; 0x34
 8006200:	fb03 f301 	mul.w	r3, r3, r1
 8006204:	4413      	add	r3, r2
 8006206:	3392      	adds	r3, #146	; 0x92
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d00c      	beq.n	8006228 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006214:	4619      	mov	r1, r3
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	2334      	movs	r3, #52	; 0x34
 800621a:	fb03 f301 	mul.w	r3, r3, r1
 800621e:	4413      	add	r3, r2
 8006220:	33c1      	adds	r3, #193	; 0xc1
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e00b      	b.n	8006240 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800622e:	4619      	mov	r1, r3
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	2334      	movs	r3, #52	; 0x34
 8006234:	fb03 f301 	mul.w	r3, r3, r1
 8006238:	4413      	add	r3, r2
 800623a:	33c1      	adds	r3, #193	; 0xc1
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006246:	4619      	mov	r1, r3
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	2334      	movs	r3, #52	; 0x34
 800624c:	fb03 f301 	mul.w	r3, r3, r1
 8006250:	4413      	add	r3, r2
 8006252:	3390      	adds	r3, #144	; 0x90
 8006254:	2205      	movs	r2, #5
 8006256:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800625e:	4619      	mov	r1, r3
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	2334      	movs	r3, #52	; 0x34
 8006264:	fb03 f301 	mul.w	r3, r3, r1
 8006268:	4413      	add	r3, r2
 800626a:	3391      	adds	r3, #145	; 0x91
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006276:	4619      	mov	r1, r3
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	2334      	movs	r3, #52	; 0x34
 800627c:	fb03 f301 	mul.w	r3, r3, r1
 8006280:	4413      	add	r3, r2
 8006282:	3392      	adds	r3, #146	; 0x92
 8006284:	2202      	movs	r2, #2
 8006286:	701a      	strb	r2, [r3, #0]
            break;
 8006288:	e127      	b.n	80064da <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b04      	cmp	r3, #4
 800628e:	f040 8124 	bne.w	80064da <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006298:	4619      	mov	r1, r3
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	2334      	movs	r3, #52	; 0x34
 800629e:	fb03 f301 	mul.w	r3, r3, r1
 80062a2:	4413      	add	r3, r2
 80062a4:	3390      	adds	r3, #144	; 0x90
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062b0:	4619      	mov	r1, r3
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	2334      	movs	r3, #52	; 0x34
 80062b6:	fb03 f301 	mul.w	r3, r3, r1
 80062ba:	4413      	add	r3, r2
 80062bc:	3391      	adds	r3, #145	; 0x91
 80062be:	2202      	movs	r2, #2
 80062c0:	701a      	strb	r2, [r3, #0]
            break;
 80062c2:	e10a      	b.n	80064da <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ca:	b2d9      	uxtb	r1, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062d2:	461a      	mov	r2, r3
 80062d4:	2334      	movs	r3, #52	; 0x34
 80062d6:	fb03 f302 	mul.w	r3, r3, r2
 80062da:	3390      	adds	r3, #144	; 0x90
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4413      	add	r3, r2
 80062e0:	3304      	adds	r3, #4
 80062e2:	461a      	mov	r2, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fdda 	bl	8006e9e <USBH_MSC_SCSI_ReadCapacity>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d120      	bne.n	8006336 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062fa:	4619      	mov	r1, r3
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	2334      	movs	r3, #52	; 0x34
 8006300:	fb03 f301 	mul.w	r3, r3, r1
 8006304:	4413      	add	r3, r2
 8006306:	3390      	adds	r3, #144	; 0x90
 8006308:	2201      	movs	r2, #1
 800630a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006312:	4619      	mov	r1, r3
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	2334      	movs	r3, #52	; 0x34
 8006318:	fb03 f301 	mul.w	r3, r3, r1
 800631c:	4413      	add	r3, r2
 800631e:	3391      	adds	r3, #145	; 0x91
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800632a:	3301      	adds	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006334:	e0d3      	b.n	80064de <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d10c      	bne.n	8006356 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006342:	4619      	mov	r1, r3
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	2334      	movs	r3, #52	; 0x34
 8006348:	fb03 f301 	mul.w	r3, r3, r1
 800634c:	4413      	add	r3, r2
 800634e:	3390      	adds	r3, #144	; 0x90
 8006350:	2205      	movs	r2, #5
 8006352:	701a      	strb	r2, [r3, #0]
            break;
 8006354:	e0c3      	b.n	80064de <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b04      	cmp	r3, #4
 800635a:	f040 80c0 	bne.w	80064de <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006364:	4619      	mov	r1, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	2334      	movs	r3, #52	; 0x34
 800636a:	fb03 f301 	mul.w	r3, r3, r1
 800636e:	4413      	add	r3, r2
 8006370:	3390      	adds	r3, #144	; 0x90
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800637c:	4619      	mov	r1, r3
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	2334      	movs	r3, #52	; 0x34
 8006382:	fb03 f301 	mul.w	r3, r3, r1
 8006386:	4413      	add	r3, r2
 8006388:	3391      	adds	r3, #145	; 0x91
 800638a:	2202      	movs	r2, #2
 800638c:	701a      	strb	r2, [r3, #0]
            break;
 800638e:	e0a6      	b.n	80064de <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006396:	b2d9      	uxtb	r1, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800639e:	461a      	mov	r2, r3
 80063a0:	2334      	movs	r3, #52	; 0x34
 80063a2:	fb03 f302 	mul.w	r3, r3, r2
 80063a6:	3398      	adds	r3, #152	; 0x98
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	3304      	adds	r3, #4
 80063ae:	461a      	mov	r2, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fe94 	bl	80070de <USBH_MSC_SCSI_RequestSense>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d145      	bne.n	800644c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063c6:	4619      	mov	r1, r3
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	2334      	movs	r3, #52	; 0x34
 80063cc:	fb03 f301 	mul.w	r3, r3, r1
 80063d0:	4413      	add	r3, r2
 80063d2:	339c      	adds	r3, #156	; 0x9c
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b06      	cmp	r3, #6
 80063d8:	d00c      	beq.n	80063f4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063e0:	4619      	mov	r1, r3
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	2334      	movs	r3, #52	; 0x34
 80063e6:	fb03 f301 	mul.w	r3, r3, r1
 80063ea:	4413      	add	r3, r2
 80063ec:	339c      	adds	r3, #156	; 0x9c
 80063ee:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d117      	bne.n	8006424 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f242 720f 	movw	r2, #9999	; 0x270f
 8006406:	4293      	cmp	r3, r2
 8006408:	d80c      	bhi.n	8006424 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006410:	4619      	mov	r1, r3
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	2334      	movs	r3, #52	; 0x34
 8006416:	fb03 f301 	mul.w	r3, r3, r1
 800641a:	4413      	add	r3, r2
 800641c:	3390      	adds	r3, #144	; 0x90
 800641e:	2202      	movs	r2, #2
 8006420:	701a      	strb	r2, [r3, #0]
                  break;
 8006422:	e05f      	b.n	80064e4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800642a:	4619      	mov	r1, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	2334      	movs	r3, #52	; 0x34
 8006430:	fb03 f301 	mul.w	r3, r3, r1
 8006434:	4413      	add	r3, r2
 8006436:	3390      	adds	r3, #144	; 0x90
 8006438:	2201      	movs	r2, #1
 800643a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006442:	3301      	adds	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d10c      	bne.n	800646c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006458:	4619      	mov	r1, r3
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	2334      	movs	r3, #52	; 0x34
 800645e:	fb03 f301 	mul.w	r3, r3, r1
 8006462:	4413      	add	r3, r2
 8006464:	3390      	adds	r3, #144	; 0x90
 8006466:	2208      	movs	r2, #8
 8006468:	701a      	strb	r2, [r3, #0]
            break;
 800646a:	e03a      	b.n	80064e2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d137      	bne.n	80064e2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006478:	4619      	mov	r1, r3
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	2334      	movs	r3, #52	; 0x34
 800647e:	fb03 f301 	mul.w	r3, r3, r1
 8006482:	4413      	add	r3, r2
 8006484:	3390      	adds	r3, #144	; 0x90
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006490:	4619      	mov	r1, r3
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	2334      	movs	r3, #52	; 0x34
 8006496:	fb03 f301 	mul.w	r3, r3, r1
 800649a:	4413      	add	r3, r2
 800649c:	3391      	adds	r3, #145	; 0x91
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
            break;
 80064a2:	e01e      	b.n	80064e2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064aa:	3301      	adds	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80064b4:	e016      	b.n	80064e4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2201      	movs	r2, #1
 80064c2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ca:	2102      	movs	r1, #2
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
      break;
 80064d0:	e00c      	b.n	80064ec <USBH_MSC_Process+0x514>
            break;
 80064d2:	bf00      	nop
 80064d4:	e00a      	b.n	80064ec <USBH_MSC_Process+0x514>
            break;
 80064d6:	bf00      	nop
 80064d8:	e008      	b.n	80064ec <USBH_MSC_Process+0x514>
            break;
 80064da:	bf00      	nop
 80064dc:	e006      	b.n	80064ec <USBH_MSC_Process+0x514>
            break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <USBH_MSC_Process+0x514>
            break;
 80064e2:	bf00      	nop
      break;
 80064e4:	e002      	b.n	80064ec <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ea:	bf00      	nop
  }
  return error;
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b088      	sub	sp, #32
 8006512:	af02      	add	r7, sp, #8
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	2134      	movs	r1, #52	; 0x34
 8006532:	fb01 f303 	mul.w	r3, r1, r3
 8006536:	4413      	add	r3, r2
 8006538:	3390      	adds	r3, #144	; 0x90
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b06      	cmp	r3, #6
 800653e:	d004      	beq.n	800654a <USBH_MSC_RdWrProcess+0x3c>
 8006540:	2b07      	cmp	r3, #7
 8006542:	d037      	beq.n	80065b4 <USBH_MSC_RdWrProcess+0xa6>
 8006544:	2b05      	cmp	r3, #5
 8006546:	d06a      	beq.n	800661e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8006548:	e0a6      	b.n	8006698 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800654a:	78f9      	ldrb	r1, [r7, #3]
 800654c:	2300      	movs	r3, #0
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	2300      	movs	r3, #0
 8006552:	2200      	movs	r2, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fea6 	bl	80072a6 <USBH_MSC_SCSI_Read>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	2134      	movs	r1, #52	; 0x34
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	3390      	adds	r3, #144	; 0x90
 8006572:	2201      	movs	r2, #1
 8006574:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
      break;
 800657a:	e088      	b.n	800668e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d109      	bne.n	8006596 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	2134      	movs	r1, #52	; 0x34
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	3390      	adds	r3, #144	; 0x90
 8006590:	2205      	movs	r2, #5
 8006592:	701a      	strb	r2, [r3, #0]
      break;
 8006594:	e07b      	b.n	800668e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b04      	cmp	r3, #4
 800659a:	d178      	bne.n	800668e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	2134      	movs	r1, #52	; 0x34
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3390      	adds	r3, #144	; 0x90
 80065aa:	2208      	movs	r2, #8
 80065ac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80065ae:	2302      	movs	r3, #2
 80065b0:	75fb      	strb	r3, [r7, #23]
      break;
 80065b2:	e06c      	b.n	800668e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80065b4:	78f9      	ldrb	r1, [r7, #3]
 80065b6:	2300      	movs	r3, #0
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	2200      	movs	r2, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fe06 	bl	80071d0 <USBH_MSC_SCSI_Write>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	2134      	movs	r1, #52	; 0x34
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	4413      	add	r3, r2
 80065da:	3390      	adds	r3, #144	; 0x90
 80065dc:	2201      	movs	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	e055      	b.n	8006692 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d109      	bne.n	8006600 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	2134      	movs	r1, #52	; 0x34
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	3390      	adds	r3, #144	; 0x90
 80065fa:	2205      	movs	r2, #5
 80065fc:	701a      	strb	r2, [r3, #0]
      break;
 80065fe:	e048      	b.n	8006692 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d145      	bne.n	8006692 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	2134      	movs	r1, #52	; 0x34
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	4413      	add	r3, r2
 8006612:	3390      	adds	r3, #144	; 0x90
 8006614:	2208      	movs	r2, #8
 8006616:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006618:	2302      	movs	r3, #2
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e039      	b.n	8006692 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	2234      	movs	r2, #52	; 0x34
 8006622:	fb02 f303 	mul.w	r3, r2, r3
 8006626:	3398      	adds	r3, #152	; 0x98
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4413      	add	r3, r2
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fd53 	bl	80070de <USBH_MSC_SCSI_RequestSense>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d113      	bne.n	800666a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	2134      	movs	r1, #52	; 0x34
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	3390      	adds	r3, #144	; 0x90
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	2134      	movs	r1, #52	; 0x34
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	4413      	add	r3, r2
 8006660:	3391      	adds	r3, #145	; 0x91
 8006662:	2202      	movs	r2, #2
 8006664:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006666:	2302      	movs	r3, #2
 8006668:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d012      	beq.n	8006696 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b04      	cmp	r3, #4
 8006674:	d10f      	bne.n	8006696 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	2134      	movs	r1, #52	; 0x34
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	3390      	adds	r3, #144	; 0x90
 8006684:	2208      	movs	r2, #8
 8006686:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006688:	2302      	movs	r3, #2
 800668a:	75fb      	strb	r3, [r7, #23]
      break;
 800668c:	e003      	b.n	8006696 <USBH_MSC_RdWrProcess+0x188>
      break;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006696:	bf00      	nop

  }
  return error;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b0b      	cmp	r3, #11
 80066c0:	d10c      	bne.n	80066dc <USBH_MSC_UnitIsReady+0x3a>
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	2134      	movs	r1, #52	; 0x34
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	3391      	adds	r3, #145	; 0x91
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80066d6:	2301      	movs	r3, #1
 80066d8:	73fb      	strb	r3, [r7, #15]
 80066da:	e001      	b.n	80066e0 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	460b      	mov	r3, r1
 80066f8:	607a      	str	r2, [r7, #4]
 80066fa:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b0b      	cmp	r3, #11
 800670e:	d10d      	bne.n	800672c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	2234      	movs	r2, #52	; 0x34
 8006714:	fb02 f303 	mul.w	r3, r2, r3
 8006718:	3390      	adds	r3, #144	; 0x90
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	2234      	movs	r2, #52	; 0x34
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f004 ff4c 	bl	800b5c0 <memcpy>
    return USBH_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	e000      	b.n	800672e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800672c:	2302      	movs	r3, #2
  }
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b088      	sub	sp, #32
 800673a:	af02      	add	r7, sp, #8
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	460b      	mov	r3, r1
 8006744:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006762:	2b0b      	cmp	r3, #11
 8006764:	d109      	bne.n	800677a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	2134      	movs	r1, #52	; 0x34
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	3390      	adds	r3, #144	; 0x90
 8006774:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800677a:	2302      	movs	r3, #2
 800677c:	e040      	b.n	8006800 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2206      	movs	r2, #6
 8006782:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	2134      	movs	r1, #52	; 0x34
 800678a:	fb01 f303 	mul.w	r3, r1, r3
 800678e:	4413      	add	r3, r2
 8006790:	3390      	adds	r3, #144	; 0x90
 8006792:	2206      	movs	r2, #6
 8006794:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	b29a      	uxth	r2, r3
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80067a0:	7af9      	ldrb	r1, [r7, #11]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fd7b 	bl	80072a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067b6:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067b8:	e016      	b.n	80067e8 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80067ca:	fb01 f303 	mul.w	r3, r1, r3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d805      	bhi.n	80067de <USBH_MSC_Read+0xa8>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2201      	movs	r2, #1
 80067e2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e00b      	b.n	8006800 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	4619      	mov	r1, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fe8e 	bl	800650e <USBH_MSC_RdWrProcess>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d0e0      	beq.n	80067ba <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2201      	movs	r2, #1
 80067fc:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	460b      	mov	r3, r1
 8006816:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00e      	beq.n	800684c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006834:	2b0b      	cmp	r3, #11
 8006836:	d109      	bne.n	800684c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	2134      	movs	r1, #52	; 0x34
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	4413      	add	r3, r2
 8006844:	3390      	adds	r3, #144	; 0x90
 8006846:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006848:	2b01      	cmp	r3, #1
 800684a:	d001      	beq.n	8006850 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800684c:	2302      	movs	r3, #2
 800684e:	e040      	b.n	80068d2 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2207      	movs	r2, #7
 8006854:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006856:	7afb      	ldrb	r3, [r7, #11]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	2134      	movs	r1, #52	; 0x34
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	4413      	add	r3, r2
 8006862:	3390      	adds	r3, #144	; 0x90
 8006864:	2207      	movs	r2, #7
 8006866:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	b29a      	uxth	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006872:	7af9      	ldrb	r1, [r7, #11]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fca7 	bl	80071d0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006888:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800688a:	e016      	b.n	80068ba <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad2      	subs	r2, r2, r3
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f242 7110 	movw	r1, #10000	; 0x2710
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d805      	bhi.n	80068b0 <USBH_MSC_Write+0xa8>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2201      	movs	r2, #1
 80068b4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80068b6:	2302      	movs	r3, #2
 80068b8:	e00b      	b.n	80068d2 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff fe25 	bl	800650e <USBH_MSC_RdWrProcess>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d0e0      	beq.n	800688c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2201      	movs	r2, #1
 80068ce:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2221      	movs	r2, #33	; 0x21
 80068e6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006900:	2200      	movs	r2, #0
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fdae 	bl	8008466 <USBH_CtlReq>
 800690a:	4603      	mov	r3, r0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	22a1      	movs	r2, #161	; 0xa1
 8006922:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	22fe      	movs	r2, #254	; 0xfe
 8006928:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800693c:	2201      	movs	r2, #1
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fd90 	bl	8008466 <USBH_CtlReq>
 8006946:	4603      	mov	r3, r0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a09      	ldr	r2, [pc, #36]	; (800698c <USBH_MSC_BOT_Init+0x3c>)
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a09      	ldr	r2, [pc, #36]	; (8006990 <USBH_MSC_BOT_Init+0x40>)
 800696c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	43425355 	.word	0x43425355
 8006990:	20304050 	.word	0x20304050

08006994 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af02      	add	r7, sp, #8
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80069a0:	2301      	movs	r3, #1
 80069a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80069a4:	2301      	movs	r3, #1
 80069a6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80069a8:	2301      	movs	r3, #1
 80069aa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069c4:	3b01      	subs	r3, #1
 80069c6:	2b0a      	cmp	r3, #10
 80069c8:	f200 81a1 	bhi.w	8006d0e <USBH_MSC_BOT_Process+0x37a>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <USBH_MSC_BOT_Process+0x40>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a01 	.word	0x08006a01
 80069d8:	08006a2b 	.word	0x08006a2b
 80069dc:	08006a95 	.word	0x08006a95
 80069e0:	08006ab3 	.word	0x08006ab3
 80069e4:	08006b37 	.word	0x08006b37
 80069e8:	08006b5b 	.word	0x08006b5b
 80069ec:	08006bf5 	.word	0x08006bf5
 80069f0:	08006c11 	.word	0x08006c11
 80069f4:	08006c63 	.word	0x08006c63
 80069f8:	08006c93 	.word	0x08006c93
 80069fc:	08006cf5 	.word	0x08006cf5
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	795a      	ldrb	r2, [r3, #5]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	221f      	movs	r2, #31
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 ff2f 	bl	8008886 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006a28:	e180      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	795b      	ldrb	r3, [r3, #5]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f004 fc6b 	bl	800b30c <USBH_LL_GetURBState>
 8006a36:	4603      	mov	r3, r0
 8006a38:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006a3a:	7d3b      	ldrb	r3, [r7, #20]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d118      	bne.n	8006a72 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da04      	bge.n	8006a5e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2203      	movs	r2, #3
 8006a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a5c:	e159      	b.n	8006d12 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2205      	movs	r2, #5
 8006a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a66:	e154      	b.n	8006d12 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a70:	e14f      	b.n	8006d12 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a72:	7d3b      	ldrb	r3, [r7, #20]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d104      	bne.n	8006a82 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a80:	e147      	b.n	8006d12 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006a82:	7d3b      	ldrb	r3, [r7, #20]
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	f040 8144 	bne.w	8006d12 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	220a      	movs	r2, #10
 8006a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a92:	e13e      	b.n	8006d12 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	895a      	ldrh	r2, [r3, #10]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	791b      	ldrb	r3, [r3, #4]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 ff14 	bl	80088d0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006ab0:	e13c      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f004 fc27 	bl	800b30c <USBH_LL_GetURBState>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006ac2:	7d3b      	ldrb	r3, [r7, #20]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d12d      	bne.n	8006b24 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	8952      	ldrh	r2, [r2, #10]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d910      	bls.n	8006af6 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	8952      	ldrh	r2, [r2, #10]
 8006ade:	441a      	add	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	8952      	ldrh	r2, [r2, #10]
 8006aee:	1a9a      	subs	r2, r3, r2
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006af4:	e002      	b.n	8006afc <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2200      	movs	r2, #0
 8006afa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	895a      	ldrh	r2, [r3, #10]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fedc 	bl	80088d0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006b18:	e0fd      	b.n	8006d16 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2207      	movs	r2, #7
 8006b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b22:	e0f8      	b.n	8006d16 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8006b24:	7d3b      	ldrb	r3, [r7, #20]
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	f040 80f5 	bne.w	8006d16 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2209      	movs	r2, #9
 8006b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b34:	e0ef      	b.n	8006d16 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	891a      	ldrh	r2, [r3, #8]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	7958      	ldrb	r0, [r3, #5]
 8006b44:	2301      	movs	r3, #1
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fe9b 	bl	8008886 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2206      	movs	r2, #6
 8006b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b58:	e0e8      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f004 fbd3 	bl	800b30c <USBH_LL_GetURBState>
 8006b66:	4603      	mov	r3, r0
 8006b68:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006b6a:	7d3b      	ldrb	r3, [r7, #20]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d130      	bne.n	8006bd2 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	8912      	ldrh	r2, [r2, #8]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d910      	bls.n	8006b9e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	8912      	ldrh	r2, [r2, #8]
 8006b86:	441a      	add	r2, r3
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	8912      	ldrh	r2, [r2, #8]
 8006b96:	1a9a      	subs	r2, r3, r2
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b9c:	e002      	b.n	8006ba4 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00d      	beq.n	8006bc8 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	891a      	ldrh	r2, [r3, #8]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	7958      	ldrb	r0, [r3, #5]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fe60 	bl	8008886 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006bc6:	e0a8      	b.n	8006d1a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2207      	movs	r2, #7
 8006bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bd0:	e0a3      	b.n	8006d1a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006bd2:	7d3b      	ldrb	r3, [r7, #20]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d104      	bne.n	8006be2 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2205      	movs	r2, #5
 8006bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006be0:	e09b      	b.n	8006d1a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8006be2:	7d3b      	ldrb	r3, [r7, #20]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	f040 8098 	bne.w	8006d1a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	220a      	movs	r2, #10
 8006bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bf2:	e092      	b.n	8006d1a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	791b      	ldrb	r3, [r3, #4]
 8006bfe:	220d      	movs	r2, #13
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fe65 	bl	80088d0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c0e:	e08d      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	791b      	ldrb	r3, [r3, #4]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f004 fb78 	bl	800b30c <USBH_LL_GetURBState>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006c20:	7d3b      	ldrb	r3, [r7, #20]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d115      	bne.n	8006c52 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f8aa 	bl	8006d90 <USBH_MSC_DecodeCSW>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006c40:	7d7b      	ldrb	r3, [r7, #21]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006c4a:	e068      	b.n	8006d1e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c50:	e065      	b.n	8006d1e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8006c52:	7d3b      	ldrb	r3, [r7, #20]
 8006c54:	2b05      	cmp	r3, #5
 8006c56:	d162      	bne.n	8006d1e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2209      	movs	r2, #9
 8006c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c60:	e05d      	b.n	8006d1e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	2200      	movs	r2, #0
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f865 	bl	8006d38 <USBH_MSC_BOT_Abort>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006c72:	7dbb      	ldrb	r3, [r7, #22]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006c80:	e04f      	b.n	8006d22 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006c82:	7dbb      	ldrb	r3, [r7, #22]
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d14c      	bne.n	8006d22 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	220b      	movs	r2, #11
 8006c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c90:	e047      	b.n	8006d22 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	2201      	movs	r2, #1
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f84d 	bl	8006d38 <USBH_MSC_BOT_Abort>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006ca2:	7dbb      	ldrb	r3, [r7, #22]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11d      	bne.n	8006ce4 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	795b      	ldrb	r3, [r3, #5]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f004 fb89 	bl	800b3c6 <USBH_LL_GetToggle>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	7959      	ldrb	r1, [r3, #5]
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	f1c3 0301 	rsb	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f004 fb4a 	bl	800b360 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	791b      	ldrb	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f004 fb43 	bl	800b360 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2209      	movs	r2, #9
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006ce2:	e020      	b.n	8006d26 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8006ce4:	7dbb      	ldrb	r3, [r7, #22]
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d11d      	bne.n	8006d26 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	220b      	movs	r2, #11
 8006cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cf2:	e018      	b.n	8006d26 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fdf0 	bl	80068da <USBH_MSC_BOT_REQ_Reset>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d112      	bne.n	8006d2a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006d0c:	e00d      	b.n	8006d2a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8006d0e:	bf00      	nop
 8006d10:	e00c      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d12:	bf00      	nop
 8006d14:	e00a      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d16:	bf00      	nop
 8006d18:	e008      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e006      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d1e:	bf00      	nop
 8006d20:	e004      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <USBH_MSC_BOT_Process+0x398>
      break;
 8006d2a:	bf00      	nop
  }
  return status;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop

08006d38 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
 8006d44:	4613      	mov	r3, r2
 8006d46:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006d56:	78bb      	ldrb	r3, [r7, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <USBH_MSC_BOT_Abort+0x2a>
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d009      	beq.n	8006d74 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006d60:	e011      	b.n	8006d86 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	79db      	ldrb	r3, [r3, #7]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f99c 	bl	80080a6 <USBH_ClrFeature>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]
      break;
 8006d72:	e008      	b.n	8006d86 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	799b      	ldrb	r3, [r3, #6]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f993 	bl	80080a6 <USBH_ClrFeature>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]
      break;
 8006d84:	bf00      	nop
  }
  return status;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f004 fa1b 	bl	800b1e8 <USBH_LL_GetLastXferSize>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b0d      	cmp	r3, #13
 8006db6:	d002      	beq.n	8006dbe <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006db8:	2302      	movs	r3, #2
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e024      	b.n	8006e08 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc2:	4a14      	ldr	r2, [pc, #80]	; (8006e14 <USBH_MSC_DecodeCSW+0x84>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d11d      	bne.n	8006e04 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d119      	bne.n	8006e08 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
 8006de2:	e011      	b.n	8006e08 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d102      	bne.n	8006df4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006dee:	2301      	movs	r3, #1
 8006df0:	73fb      	strb	r3, [r7, #15]
 8006df2:	e009      	b.n	8006e08 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d104      	bne.n	8006e08 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	73fb      	strb	r3, [r7, #15]
 8006e02:	e001      	b.n	8006e08 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006e04:	2302      	movs	r3, #2
 8006e06:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	53425355 	.word	0x53425355

08006e18 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e24:	2302      	movs	r3, #2
 8006e26:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d002      	beq.n	8006e42 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d021      	beq.n	8006e84 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006e40:	e028      	b.n	8006e94 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	220a      	movs	r2, #10
 8006e54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3363      	adds	r3, #99	; 0x63
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f004 fbb8 	bl	800b5d6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
      break;
 8006e82:	e007      	b.n	8006e94 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff fd83 	bl	8006994 <USBH_MSC_BOT_Process>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
      break;
 8006e92:	bf00      	nop
  }

  return error;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d002      	beq.n	8006eca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d027      	beq.n	8006f18 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006ec8:	e05f      	b.n	8006f8a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2280      	movs	r2, #128	; 0x80
 8006ed4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	220a      	movs	r2, #10
 8006edc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3363      	adds	r3, #99	; 0x63
 8006ee4:	2210      	movs	r2, #16
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f004 fb74 	bl	800b5d6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2225      	movs	r2, #37	; 0x25
 8006ef2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f103 0210 	add.w	r2, r3, #16
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
      break;
 8006f16:	e038      	b.n	8006f8a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff fd39 	bl	8006994 <USBH_MSC_BOT_Process>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d12d      	bne.n	8006f88 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f32:	3303      	adds	r3, #3
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f3e:	3302      	adds	r3, #2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f52:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f6a:	3307      	adds	r3, #7
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f76:	3306      	adds	r3, #6
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	809a      	strh	r2, [r3, #4]
      break;
 8006f88:	bf00      	nop
  }

  return error;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d002      	beq.n	8006fc0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d03d      	beq.n	800703a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006fbe:	e089      	b.n	80070d4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	2224      	movs	r2, #36	; 0x24
 8006fc4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2280      	movs	r2, #128	; 0x80
 8006fca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3363      	adds	r3, #99	; 0x63
 8006fda:	220a      	movs	r2, #10
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f004 faf9 	bl	800b5d6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2212      	movs	r2, #18
 8006fe8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	015b      	lsls	r3, r3, #5
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2224      	movs	r2, #36	; 0x24
 800700c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f103 0210 	add.w	r2, r3, #16
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007034:	2301      	movs	r3, #1
 8007036:	75fb      	strb	r3, [r7, #23]
      break;
 8007038:	e04c      	b.n	80070d4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	4619      	mov	r1, r3
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f7ff fca8 	bl	8006994 <USBH_MSC_BOT_Process>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d141      	bne.n	80070d2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800704e:	2222      	movs	r2, #34	; 0x22
 8007050:	2100      	movs	r1, #0
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f004 fabf 	bl	800b5d6 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	b2da      	uxtb	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	b2da      	uxtb	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007080:	3301      	adds	r3, #1
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	b25b      	sxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	da03      	bge.n	8007092 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	709a      	strb	r2, [r3, #2]
 8007090:	e002      	b.n	8007098 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1cd8      	adds	r0, r3, #3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a2:	3308      	adds	r3, #8
 80070a4:	2208      	movs	r2, #8
 80070a6:	4619      	mov	r1, r3
 80070a8:	f004 fa8a 	bl	800b5c0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f103 000c 	add.w	r0, r3, #12
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b8:	3310      	adds	r3, #16
 80070ba:	2210      	movs	r2, #16
 80070bc:	4619      	mov	r1, r3
 80070be:	f004 fa7f 	bl	800b5c0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	331d      	adds	r3, #29
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80070cc:	3220      	adds	r2, #32
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	601a      	str	r2, [r3, #0]
      break;
 80070d2:	bf00      	nop
  }

  return error;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	460b      	mov	r3, r1
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070ec:	2302      	movs	r3, #2
 80070ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007100:	2b01      	cmp	r3, #1
 8007102:	d002      	beq.n	800710a <USBH_MSC_SCSI_RequestSense+0x2c>
 8007104:	2b02      	cmp	r3, #2
 8007106:	d03d      	beq.n	8007184 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007108:	e05d      	b.n	80071c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	220e      	movs	r2, #14
 800710e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	220a      	movs	r2, #10
 800711c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	3363      	adds	r3, #99	; 0x63
 8007124:	2210      	movs	r2, #16
 8007126:	2100      	movs	r1, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f004 fa54 	bl	800b5d6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2203      	movs	r2, #3
 8007132:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007136:	7afb      	ldrb	r3, [r7, #11]
 8007138:	015b      	lsls	r3, r3, #5
 800713a:	b2da      	uxtb	r2, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	220e      	movs	r2, #14
 8007156:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f103 0210 	add.w	r2, r3, #16
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
      break;
 8007182:	e020      	b.n	80071c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	4619      	mov	r1, r3
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fc03 	bl	8006994 <USBH_MSC_BOT_Process>
 800718e:	4603      	mov	r3, r0
 8007190:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d115      	bne.n	80071c4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719e:	3302      	adds	r3, #2
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b2:	7b1a      	ldrb	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071be:	7b5a      	ldrb	r2, [r3, #13]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	709a      	strb	r2, [r3, #2]
      break;
 80071c4:	bf00      	nop
  }

  return error;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	460b      	mov	r3, r1
 80071de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80071e0:	2302      	movs	r3, #2
 80071e2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d002      	beq.n	80071fe <USBH_MSC_SCSI_Write+0x2e>
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d047      	beq.n	800728c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80071fc:	e04e      	b.n	800729c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007204:	461a      	mov	r2, r3
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	fb03 f202 	mul.w	r2, r3, r2
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	220a      	movs	r2, #10
 800721c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	3363      	adds	r3, #99	; 0x63
 8007224:	2210      	movs	r2, #16
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f004 f9d4 	bl	800b5d6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	222a      	movs	r2, #42	; 0x2a
 8007232:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007236:	79fa      	ldrb	r2, [r7, #7]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800723e:	79ba      	ldrb	r2, [r7, #6]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007246:	797a      	ldrb	r2, [r7, #5]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007258:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007262:	f107 0320 	add.w	r3, r7, #32
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2202      	movs	r2, #2
 800727a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
      break;
 800728a:	e007      	b.n	800729c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff fb7f 	bl	8006994 <USBH_MSC_BOT_Process>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]
      break;
 800729a:	bf00      	nop
  }

  return error;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	460b      	mov	r3, r1
 80072b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80072b6:	2302      	movs	r3, #2
 80072b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d002      	beq.n	80072d4 <USBH_MSC_SCSI_Read+0x2e>
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d047      	beq.n	8007362 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80072d2:	e04e      	b.n	8007372 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80072da:	461a      	mov	r2, r3
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	fb03 f202 	mul.w	r2, r3, r2
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	220a      	movs	r2, #10
 80072f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3363      	adds	r3, #99	; 0x63
 80072fa:	2210      	movs	r2, #16
 80072fc:	2100      	movs	r1, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	f004 f969 	bl	800b5d6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2228      	movs	r2, #40	; 0x28
 8007308:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800730c:	79fa      	ldrb	r2, [r7, #7]
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007314:	79ba      	ldrb	r2, [r7, #6]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800731c:	797a      	ldrb	r2, [r7, #5]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007324:	1d3b      	adds	r3, r7, #4
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800732e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007338:	f107 0320 	add.w	r3, r7, #32
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
      break;
 8007360:	e007      	b.n	8007372 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	4619      	mov	r1, r3
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff fb14 	bl	8006994 <USBH_MSC_BOT_Process>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
      break;
 8007370:	bf00      	nop
  }

  return error;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007390:	2302      	movs	r3, #2
 8007392:	e029      	b.n	80073e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	79fa      	ldrb	r2, [r7, #7]
 8007398:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f81f 	bl	80073f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f003 fe4f 	bl	800b084 <USBH_LL_Init>

  return USBH_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e009      	b.n	8007416 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	33e0      	adds	r3, #224	; 0xe0
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	2200      	movs	r2, #0
 800740e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3301      	adds	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b0e      	cmp	r3, #14
 800741a:	d9f2      	bls.n	8007402 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e009      	b.n	8007436 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d3f1      	bcc.n	8007422 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d016      	beq.n	80074da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10e      	bne.n	80074d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074bc:	1c59      	adds	r1, r3, #1
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	33de      	adds	r3, #222	; 0xde
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
 80074d2:	e004      	b.n	80074de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074d4:	2302      	movs	r3, #2
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e001      	b.n	80074de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074da:	2302      	movs	r3, #2
 80074dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	429a      	cmp	r2, r3
 8007506:	d204      	bcs.n	8007512 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	78fa      	ldrb	r2, [r7, #3]
 800750c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007510:	e001      	b.n	8007516 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007512:	2302      	movs	r3, #2
 8007514:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	461a      	mov	r2, r3
 8007532:	4603      	mov	r3, r0
 8007534:	70fb      	strb	r3, [r7, #3]
 8007536:	460b      	mov	r3, r1
 8007538:	70bb      	strb	r3, [r7, #2]
 800753a:	4613      	mov	r3, r2
 800753c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007542:	2300      	movs	r3, #0
 8007544:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800754c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800754e:	e025      	b.n	800759c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	221a      	movs	r2, #26
 8007554:	fb02 f303 	mul.w	r3, r2, r3
 8007558:	3308      	adds	r3, #8
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	3302      	adds	r3, #2
 8007560:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	795b      	ldrb	r3, [r3, #5]
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	429a      	cmp	r2, r3
 800756a:	d002      	beq.n	8007572 <USBH_FindInterface+0x4e>
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	2bff      	cmp	r3, #255	; 0xff
 8007570:	d111      	bne.n	8007596 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007576:	78ba      	ldrb	r2, [r7, #2]
 8007578:	429a      	cmp	r2, r3
 800757a:	d002      	beq.n	8007582 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800757c:	78bb      	ldrb	r3, [r7, #2]
 800757e:	2bff      	cmp	r3, #255	; 0xff
 8007580:	d109      	bne.n	8007596 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007586:	787a      	ldrb	r2, [r7, #1]
 8007588:	429a      	cmp	r2, r3
 800758a:	d002      	beq.n	8007592 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800758c:	787b      	ldrb	r3, [r7, #1]
 800758e:	2bff      	cmp	r3, #255	; 0xff
 8007590:	d101      	bne.n	8007596 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	e006      	b.n	80075a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	3301      	adds	r3, #1
 800759a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d9d6      	bls.n	8007550 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075a2:	23ff      	movs	r3, #255	; 0xff
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f003 fd9f 	bl	800b0fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80075be:	2101      	movs	r1, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f003 feb6 	bl	800b332 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af04      	add	r7, sp, #16
 80075d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075d8:	2302      	movs	r3, #2
 80075da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d102      	bne.n	80075f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2203      	movs	r2, #3
 80075f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b0b      	cmp	r3, #11
 80075fa:	f200 81b3 	bhi.w	8007964 <USBH_Process+0x394>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <USBH_Process+0x34>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007635 	.word	0x08007635
 8007608:	08007667 	.word	0x08007667
 800760c:	080076cf 	.word	0x080076cf
 8007610:	080078ff 	.word	0x080078ff
 8007614:	08007965 	.word	0x08007965
 8007618:	08007773 	.word	0x08007773
 800761c:	080078a5 	.word	0x080078a5
 8007620:	080077a9 	.word	0x080077a9
 8007624:	080077c9 	.word	0x080077c9
 8007628:	080077e9 	.word	0x080077e9
 800762c:	08007817 	.word	0x08007817
 8007630:	080078e7 	.word	0x080078e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 8193 	beq.w	8007968 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007648:	20c8      	movs	r0, #200	; 0xc8
 800764a:	f003 feef 	bl	800b42c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f003 fdaf 	bl	800b1b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007664:	e180      	b.n	8007968 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800766c:	2b01      	cmp	r3, #1
 800766e:	d107      	bne.n	8007680 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800767e:	e182      	b.n	8007986 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800768a:	d914      	bls.n	80076b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007692:	3301      	adds	r3, #1
 8007694:	b2da      	uxtb	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d903      	bls.n	80076ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	220d      	movs	r2, #13
 80076aa:	701a      	strb	r2, [r3, #0]
      break;
 80076ac:	e16b      	b.n	8007986 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e167      	b.n	8007986 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076bc:	f103 020a 	add.w	r2, r3, #10
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076c6:	200a      	movs	r0, #10
 80076c8:	f003 feb0 	bl	800b42c <USBH_Delay>
      break;
 80076cc:	e15b      	b.n	8007986 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076de:	2104      	movs	r1, #4
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076e4:	2064      	movs	r0, #100	; 0x64
 80076e6:	f003 fea1 	bl	800b42c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f003 fd3c 	bl	800b168 <USBH_LL_GetSpeed>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2205      	movs	r2, #5
 80076fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007700:	2100      	movs	r1, #0
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 f931 	bl	800896a <USBH_AllocPipe>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007710:	2180      	movs	r1, #128	; 0x80
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 f929 	bl	800896a <USBH_AllocPipe>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	7919      	ldrb	r1, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007734:	b292      	uxth	r2, r2
 8007736:	9202      	str	r2, [sp, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	9201      	str	r2, [sp, #4]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4603      	mov	r3, r0
 8007740:	2280      	movs	r2, #128	; 0x80
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f8e2 	bl	800890c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7959      	ldrb	r1, [r3, #5]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800775c:	b292      	uxth	r2, r2
 800775e:	9202      	str	r2, [sp, #8]
 8007760:	2200      	movs	r2, #0
 8007762:	9201      	str	r2, [sp, #4]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4603      	mov	r3, r0
 8007768:	2200      	movs	r2, #0
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 f8ce 	bl	800890c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007770:	e109      	b.n	8007986 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f90c 	bl	8007990 <USBH_HandleEnum>
 8007778:	4603      	mov	r3, r0
 800777a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 80f3 	bne.w	800796c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007794:	2b01      	cmp	r3, #1
 8007796:	d103      	bne.n	80077a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2208      	movs	r2, #8
 800779c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800779e:	e0e5      	b.n	800796c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2207      	movs	r2, #7
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e0e1      	b.n	800796c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80de 	beq.w	8007970 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ba:	2101      	movs	r1, #1
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2208      	movs	r2, #8
 80077c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077c6:	e0d3      	b.n	8007970 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fc20 	bl	8008018 <USBH_SetCfg>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 80ca 	bne.w	8007974 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2209      	movs	r2, #9
 80077e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077e6:	e0c5      	b.n	8007974 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80077f6:	2101      	movs	r1, #1
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fc30 	bl	800805e <USBH_SetFeature>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	f040 80b9 	bne.w	8007978 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220a      	movs	r2, #10
 800780a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800780c:	e0b4      	b.n	8007978 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	220a      	movs	r2, #10
 8007812:	701a      	strb	r2, [r3, #0]
      break;
 8007814:	e0b0      	b.n	8007978 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80ad 	beq.w	800797c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
 800782e:	e016      	b.n	800785e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007830:	7bfa      	ldrb	r2, [r7, #15]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	32de      	adds	r2, #222	; 0xde
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	791a      	ldrb	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007842:	429a      	cmp	r2, r3
 8007844:	d108      	bne.n	8007858 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007846:	7bfa      	ldrb	r2, [r7, #15]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	32de      	adds	r2, #222	; 0xde
 800784c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007856:	e005      	b.n	8007864 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	3301      	adds	r3, #1
 800785c:	73fb      	strb	r3, [r7, #15]
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0e5      	beq.n	8007830 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d016      	beq.n	800789c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2206      	movs	r2, #6
 8007884:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800788c:	2103      	movs	r1, #3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007892:	e073      	b.n	800797c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	220d      	movs	r2, #13
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e06f      	b.n	800797c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	220d      	movs	r2, #13
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e06b      	b.n	800797c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d017      	beq.n	80078de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220b      	movs	r2, #11
 80078ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078cc:	e058      	b.n	8007980 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d154      	bne.n	8007980 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	220d      	movs	r2, #13
 80078da:	701a      	strb	r2, [r3, #0]
      break;
 80078dc:	e050      	b.n	8007980 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220d      	movs	r2, #13
 80078e2:	701a      	strb	r2, [r3, #0]
      break;
 80078e4:	e04c      	b.n	8007980 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d049      	beq.n	8007984 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
      }
      break;
 80078fc:	e042      	b.n	8007984 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fd72 	bl	80073f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800793a:	2105      	movs	r1, #5
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	d107      	bne.n	800795c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fe2b 	bl	80075b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800795a:	e014      	b.n	8007986 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f003 fbcd 	bl	800b0fc <USBH_LL_Start>
      break;
 8007962:	e010      	b.n	8007986 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007964:	bf00      	nop
 8007966:	e00e      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 8007968:	bf00      	nop
 800796a:	e00c      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 800796c:	bf00      	nop
 800796e:	e00a      	b.n	8007986 <USBH_Process+0x3b6>
    break;
 8007970:	bf00      	nop
 8007972:	e008      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 8007974:	bf00      	nop
 8007976:	e006      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <USBH_Process+0x3b6>
      break;
 8007984:	bf00      	nop
  }
  return USBH_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af04      	add	r7, sp, #16
 8007996:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800799c:	2301      	movs	r3, #1
 800799e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b07      	cmp	r3, #7
 80079a6:	f200 81c1 	bhi.w	8007d2c <USBH_HandleEnum+0x39c>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <USBH_HandleEnum+0x20>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079d1 	.word	0x080079d1
 80079b4:	08007a8f 	.word	0x08007a8f
 80079b8:	08007af9 	.word	0x08007af9
 80079bc:	08007b87 	.word	0x08007b87
 80079c0:	08007bf1 	.word	0x08007bf1
 80079c4:	08007c61 	.word	0x08007c61
 80079c8:	08007ca7 	.word	0x08007ca7
 80079cc:	08007ced 	.word	0x08007ced
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079d0:	2108      	movs	r1, #8
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa50 	bl	8007e78 <USBH_Get_DevDesc>
 80079d8:	4603      	mov	r3, r0
 80079da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d130      	bne.n	8007a44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7919      	ldrb	r1, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a06:	b292      	uxth	r2, r2
 8007a08:	9202      	str	r2, [sp, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	9201      	str	r2, [sp, #4]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4603      	mov	r3, r0
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 ff79 	bl	800890c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7959      	ldrb	r1, [r3, #5]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 ff65 	bl	800890c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a42:	e175      	b.n	8007d30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	f040 8172 	bne.w	8007d30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a52:	3301      	adds	r3, #1
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d903      	bls.n	8007a6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	220d      	movs	r2, #13
 8007a6a:	701a      	strb	r2, [r3, #0]
      break;
 8007a6c:	e160      	b.n	8007d30 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	795b      	ldrb	r3, [r3, #5]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 ff99 	bl	80089ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 ff93 	bl	80089ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
      break;
 8007a8c:	e150      	b.n	8007d30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a8e:	2112      	movs	r1, #18
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9f1 	bl	8007e78 <USBH_Get_DevDesc>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aa6:	e145      	b.n	8007d34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	f040 8142 	bne.w	8007d34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d903      	bls.n	8007ad2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	220d      	movs	r2, #13
 8007ace:	701a      	strb	r2, [r3, #0]
      break;
 8007ad0:	e130      	b.n	8007d34 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	795b      	ldrb	r3, [r3, #5]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 ff67 	bl	80089ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	791b      	ldrb	r3, [r3, #4]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 ff61 	bl	80089ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e11d      	b.n	8007d34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa68 	bl	8007fd0 <USBH_SetAddress>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d132      	bne.n	8007b70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b0a:	2002      	movs	r0, #2
 8007b0c:	f003 fc8e 	bl	800b42c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	7919      	ldrb	r1, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b32:	b292      	uxth	r2, r2
 8007b34:	9202      	str	r2, [sp, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fee3 	bl	800890c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7959      	ldrb	r1, [r3, #5]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	9202      	str	r2, [sp, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4603      	mov	r3, r0
 8007b66:	2200      	movs	r2, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fecf 	bl	800890c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b6e:	e0e3      	b.n	8007d38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f040 80e0 	bne.w	8007d38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220d      	movs	r2, #13
 8007b7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
      break;
 8007b84:	e0d8      	b.n	8007d38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b86:	2109      	movs	r1, #9
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f99d 	bl	8007ec8 <USBH_Get_CfgDesc>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b9e:	e0cd      	b.n	8007d3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	f040 80ca 	bne.w	8007d3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d903      	bls.n	8007bca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	220d      	movs	r2, #13
 8007bc6:	701a      	strb	r2, [r3, #0]
      break;
 8007bc8:	e0b8      	b.n	8007d3c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	795b      	ldrb	r3, [r3, #5]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 feeb 	bl	80089ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fee5 	bl	80089ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e0a5      	b.n	8007d3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f965 	bl	8007ec8 <USBH_Get_CfgDesc>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2205      	movs	r2, #5
 8007c0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c0e:	e097      	b.n	8007d40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	f040 8094 	bne.w	8007d40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d903      	bls.n	8007c3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	220d      	movs	r2, #13
 8007c36:	701a      	strb	r2, [r3, #0]
      break;
 8007c38:	e082      	b.n	8007d40 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	795b      	ldrb	r3, [r3, #5]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 feb3 	bl	80089ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	791b      	ldrb	r3, [r3, #4]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fead 	bl	80089ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
      break;
 8007c5e:	e06f      	b.n	8007d40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d019      	beq.n	8007c9e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c76:	23ff      	movs	r3, #255	; 0xff
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f949 	bl	8007f10 <USBH_Get_StringDesc>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2206      	movs	r2, #6
 8007c8c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c8e:	e059      	b.n	8007d44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d156      	bne.n	8007d44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2206      	movs	r2, #6
 8007c9a:	705a      	strb	r2, [r3, #1]
      break;
 8007c9c:	e052      	b.n	8007d44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2206      	movs	r2, #6
 8007ca2:	705a      	strb	r2, [r3, #1]
      break;
 8007ca4:	e04e      	b.n	8007d44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d019      	beq.n	8007ce4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cbc:	23ff      	movs	r3, #255	; 0xff
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f926 	bl	8007f10 <USBH_Get_StringDesc>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cd4:	e038      	b.n	8007d48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d135      	bne.n	8007d48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2207      	movs	r2, #7
 8007ce0:	705a      	strb	r2, [r3, #1]
      break;
 8007ce2:	e031      	b.n	8007d48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2207      	movs	r2, #7
 8007ce8:	705a      	strb	r2, [r3, #1]
      break;
 8007cea:	e02d      	b.n	8007d48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d017      	beq.n	8007d26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d02:	23ff      	movs	r3, #255	; 0xff
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f903 	bl	8007f10 <USBH_Get_StringDesc>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d18:	e018      	b.n	8007d4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d115      	bne.n	8007d4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
      break;
 8007d24:	e012      	b.n	8007d4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2a:	e00f      	b.n	8007d4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e00e      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d30:	bf00      	nop
 8007d32:	e00c      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d34:	bf00      	nop
 8007d36:	e00a      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d38:	bf00      	nop
 8007d3a:	e008      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d3c:	bf00      	nop
 8007d3e:	e006      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d40:	bf00      	nop
 8007d42:	e004      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d44:	bf00      	nop
 8007d46:	e002      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d48:	bf00      	nop
 8007d4a:	e000      	b.n	8007d4e <USBH_HandleEnum+0x3be>
      break;
 8007d4c:	bf00      	nop
  }
  return Status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f804 	bl	8007d9a <USBH_HandleSof>
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b0b      	cmp	r3, #11
 8007daa:	d10a      	bne.n	8007dc2 <USBH_HandleSof+0x28>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
  }
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007dda:	bf00      	nop
}
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007df6:	bf00      	nop
}
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f003 f96e 	bl	800b132 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	791b      	ldrb	r3, [r3, #4]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fda5 	bl	80089ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fd9f 	bl	80089ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	4613      	mov	r3, r2
 8007e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e96:	2100      	movs	r1, #0
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f864 	bl	8007f66 <USBH_GetDescriptor>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	b292      	uxth	r2, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f000 f918 	bl	80080ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	331c      	adds	r3, #28
 8007ed8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f83d 	bl	8007f66 <USBH_GetDescriptor>
 8007eec:	4603      	mov	r3, r0
 8007eee:	72fb      	strb	r3, [r7, #11]
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007efc:	887a      	ldrh	r2, [r7, #2]
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f964 	bl	80081ce <USBH_ParseCfgDesc>
  }

  return status;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	72fb      	strb	r3, [r7, #11]
 8007f20:	4613      	mov	r3, r2
 8007f22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f2c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f34:	893b      	ldrh	r3, [r7, #8]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f812 	bl	8007f66 <USBH_GetDescriptor>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f52:	893a      	ldrh	r2, [r7, #8]
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fa37 	bl	80083ca <USBH_ParseStringDesc>
  }

  return status;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	72fb      	strb	r3, [r7, #11]
 8007f74:	4613      	mov	r3, r2
 8007f76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	789b      	ldrb	r3, [r3, #2]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d11c      	bne.n	8007fba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2206      	movs	r2, #6
 8007f90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	893a      	ldrh	r2, [r7, #8]
 8007f96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f98:	893b      	ldrh	r3, [r7, #8]
 8007f9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa2:	d104      	bne.n	8007fae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f240 4209 	movw	r2, #1033	; 0x409
 8007faa:	829a      	strh	r2, [r3, #20]
 8007fac:	e002      	b.n	8007fb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8b3a      	ldrh	r2, [r7, #24]
 8007fb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fba:	8b3b      	ldrh	r3, [r7, #24]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fa50 	bl	8008466 <USBH_CtlReq>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	789b      	ldrb	r3, [r3, #2]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d10f      	bne.n	8008004 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2205      	movs	r2, #5
 8007fee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa2c 	bl	8008466 <USBH_CtlReq>
 800800e:	4603      	mov	r3, r0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	789b      	ldrb	r3, [r3, #2]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d10e      	bne.n	800804a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2209      	movs	r2, #9
 8008036:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	887a      	ldrh	r2, [r7, #2]
 800803c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa09 	bl	8008466 <USBH_CtlReq>
 8008054:	4603      	mov	r3, r0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	789b      	ldrb	r3, [r3, #2]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d10f      	bne.n	8008092 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2203      	movs	r2, #3
 800807c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f9e5 	bl	8008466 <USBH_CtlReq>
 800809c:	4603      	mov	r3, r0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	789b      	ldrb	r3, [r3, #2]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d10f      	bne.n	80080da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f9c1 	bl	8008466 <USBH_CtlReq>
 80080e4:	4603      	mov	r3, r0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	4613      	mov	r3, r2
 80080fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	785a      	ldrb	r2, [r3, #1]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	3302      	adds	r3, #2
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b29a      	uxth	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	3303      	adds	r3, #3
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	b29b      	uxth	r3, r3
 8008120:	4313      	orrs	r3, r2
 8008122:	b29a      	uxth	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	791a      	ldrb	r2, [r3, #4]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	795a      	ldrb	r2, [r3, #5]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	799a      	ldrb	r2, [r3, #6]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	79da      	ldrb	r2, [r3, #7]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	2b08      	cmp	r3, #8
 800814c:	d939      	bls.n	80081c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3308      	adds	r3, #8
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b29a      	uxth	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3309      	adds	r3, #9
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	b29b      	uxth	r3, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	330a      	adds	r3, #10
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	b29a      	uxth	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	330b      	adds	r3, #11
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	b29b      	uxth	r3, r3
 800817e:	4313      	orrs	r3, r2
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	330c      	adds	r3, #12
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b29a      	uxth	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	330d      	adds	r3, #13
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	b29b      	uxth	r3, r3
 800819a:	4313      	orrs	r3, r2
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	7b9a      	ldrb	r2, [r3, #14]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	7bda      	ldrb	r2, [r3, #15]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	7c1a      	ldrb	r2, [r3, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	7c5a      	ldrb	r2, [r3, #17]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	745a      	strb	r2, [r3, #17]
  }
}
 80081c2:	bf00      	nop
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b08a      	sub	sp, #40	; 0x28
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	4613      	mov	r3, r2
 80081da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	785a      	ldrb	r2, [r3, #1]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3302      	adds	r3, #2
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b29a      	uxth	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3303      	adds	r3, #3
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	b29b      	uxth	r3, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	791a      	ldrb	r2, [r3, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	795a      	ldrb	r2, [r3, #5]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	799a      	ldrb	r2, [r3, #6]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	79da      	ldrb	r2, [r3, #7]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	7a1a      	ldrb	r2, [r3, #8]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	2b09      	cmp	r3, #9
 8008248:	d95f      	bls.n	800830a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800824a:	2309      	movs	r3, #9
 800824c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008252:	e051      	b.n	80082f8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008254:	f107 0316 	add.w	r3, r7, #22
 8008258:	4619      	mov	r1, r3
 800825a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800825c:	f000 f8e8 	bl	8008430 <USBH_GetNextDesc>
 8008260:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b04      	cmp	r3, #4
 8008268:	d146      	bne.n	80082f8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800826a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800826e:	221a      	movs	r2, #26
 8008270:	fb02 f303 	mul.w	r3, r2, r3
 8008274:	3308      	adds	r3, #8
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	3302      	adds	r3, #2
 800827c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800827e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008280:	69f8      	ldr	r0, [r7, #28]
 8008282:	f000 f846 	bl	8008312 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800828c:	2300      	movs	r3, #0
 800828e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008290:	e022      	b.n	80082d8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008292:	f107 0316 	add.w	r3, r7, #22
 8008296:	4619      	mov	r1, r3
 8008298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800829a:	f000 f8c9 	bl	8008430 <USBH_GetNextDesc>
 800829e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	2b05      	cmp	r3, #5
 80082a6:	d117      	bne.n	80082d8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082b0:	3201      	adds	r2, #1
 80082b2:	00d2      	lsls	r2, r2, #3
 80082b4:	211a      	movs	r1, #26
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	3308      	adds	r3, #8
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	3304      	adds	r3, #4
 80082c4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80082c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c8:	69b8      	ldr	r0, [r7, #24]
 80082ca:	f000 f851 	bl	8008370 <USBH_ParseEPDesc>
            ep_ix++;
 80082ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80082d2:	3301      	adds	r3, #1
 80082d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	791b      	ldrb	r3, [r3, #4]
 80082dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d204      	bcs.n	80082ee <USBH_ParseCfgDesc+0x120>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	885a      	ldrh	r2, [r3, #2]
 80082e8:	8afb      	ldrh	r3, [r7, #22]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d8d1      	bhi.n	8008292 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80082ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082f2:	3301      	adds	r3, #1
 80082f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d804      	bhi.n	800830a <USBH_ParseCfgDesc+0x13c>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	885a      	ldrh	r2, [r3, #2]
 8008304:	8afb      	ldrh	r3, [r7, #22]
 8008306:	429a      	cmp	r2, r3
 8008308:	d8a4      	bhi.n	8008254 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800830a:	bf00      	nop
 800830c:	3728      	adds	r7, #40	; 0x28
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	785a      	ldrb	r2, [r3, #1]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	789a      	ldrb	r2, [r3, #2]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	78da      	ldrb	r2, [r3, #3]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	791a      	ldrb	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	795a      	ldrb	r2, [r3, #5]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	799a      	ldrb	r2, [r3, #6]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	79da      	ldrb	r2, [r3, #7]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	7a1a      	ldrb	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	721a      	strb	r2, [r3, #8]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	785a      	ldrb	r2, [r3, #1]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	789a      	ldrb	r2, [r3, #2]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	78da      	ldrb	r2, [r3, #3]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	3304      	adds	r3, #4
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	3305      	adds	r3, #5
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	799a      	ldrb	r2, [r3, #6]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	719a      	strb	r2, [r3, #6]
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b087      	sub	sp, #28
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d120      	bne.n	8008424 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	1e9a      	subs	r2, r3, #2
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bf28      	it	cs
 80083ee:	4613      	movcs	r3, r2
 80083f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3302      	adds	r3, #2
 80083f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083f8:	2300      	movs	r3, #0
 80083fa:	82fb      	strh	r3, [r7, #22]
 80083fc:	e00b      	b.n	8008416 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083fe:	8afb      	ldrh	r3, [r7, #22]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	781a      	ldrb	r2, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	701a      	strb	r2, [r3, #0]
      pdest++;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	3301      	adds	r3, #1
 800840e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008410:	8afb      	ldrh	r3, [r7, #22]
 8008412:	3302      	adds	r3, #2
 8008414:	82fb      	strh	r3, [r7, #22]
 8008416:	8afa      	ldrh	r2, [r7, #22]
 8008418:	8abb      	ldrh	r3, [r7, #20]
 800841a:	429a      	cmp	r2, r3
 800841c:	d3ef      	bcc.n	80083fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
  }
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	881a      	ldrh	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	4413      	add	r3, r2
 8008446:	b29a      	uxth	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008458:	68fb      	ldr	r3, [r7, #12]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	4613      	mov	r3, r2
 8008472:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008474:	2301      	movs	r3, #1
 8008476:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d002      	beq.n	8008486 <USBH_CtlReq+0x20>
 8008480:	2b02      	cmp	r3, #2
 8008482:	d00f      	beq.n	80084a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008484:	e027      	b.n	80084d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2202      	movs	r2, #2
 800849c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800849e:	2301      	movs	r3, #1
 80084a0:	75fb      	strb	r3, [r7, #23]
      break;
 80084a2:	e018      	b.n	80084d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f81b 	bl	80084e0 <USBH_HandleControl>
 80084aa:	4603      	mov	r3, r0
 80084ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <USBH_CtlReq+0x54>
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d106      	bne.n	80084c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	761a      	strb	r2, [r3, #24]
      break;
 80084c6:	e005      	b.n	80084d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d102      	bne.n	80084d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	709a      	strb	r2, [r3, #2]
      break;
 80084d4:	bf00      	nop
  }
  return status;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084e8:	2301      	movs	r3, #1
 80084ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7e1b      	ldrb	r3, [r3, #24]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	2b0a      	cmp	r3, #10
 80084f8:	f200 8158 	bhi.w	80087ac <USBH_HandleControl+0x2cc>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <USBH_HandleControl+0x24>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008531 	.word	0x08008531
 8008508:	0800854b 	.word	0x0800854b
 800850c:	080085b5 	.word	0x080085b5
 8008510:	080085db 	.word	0x080085db
 8008514:	08008613 	.word	0x08008613
 8008518:	0800863f 	.word	0x0800863f
 800851c:	08008691 	.word	0x08008691
 8008520:	080086b3 	.word	0x080086b3
 8008524:	080086ef 	.word	0x080086ef
 8008528:	08008717 	.word	0x08008717
 800852c:	08008755 	.word	0x08008755
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f103 0110 	add.w	r1, r3, #16
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	795b      	ldrb	r3, [r3, #5]
 800853a:	461a      	mov	r2, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f945 	bl	80087cc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	761a      	strb	r2, [r3, #24]
      break;
 8008548:	e13b      	b.n	80087c2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	795b      	ldrb	r3, [r3, #5]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f002 fedb 	bl	800b30c <USBH_LL_GetURBState>
 8008556:	4603      	mov	r3, r0
 8008558:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d11e      	bne.n	800859e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7c1b      	ldrb	r3, [r3, #16]
 8008564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008568:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8adb      	ldrh	r3, [r3, #22]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d103      	bne.n	8008580 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2203      	movs	r2, #3
 800857c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800857e:	e117      	b.n	80087b0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2205      	movs	r2, #5
 8008584:	761a      	strb	r2, [r3, #24]
      break;
 8008586:	e113      	b.n	80087b0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008588:	7b7b      	ldrb	r3, [r7, #13]
 800858a:	2b80      	cmp	r3, #128	; 0x80
 800858c:	d103      	bne.n	8008596 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2209      	movs	r2, #9
 8008592:	761a      	strb	r2, [r3, #24]
      break;
 8008594:	e10c      	b.n	80087b0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2207      	movs	r2, #7
 800859a:	761a      	strb	r2, [r3, #24]
      break;
 800859c:	e108      	b.n	80087b0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d003      	beq.n	80085ac <USBH_HandleControl+0xcc>
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	f040 8102 	bne.w	80087b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	220b      	movs	r2, #11
 80085b0:	761a      	strb	r2, [r3, #24]
      break;
 80085b2:	e0fd      	b.n	80087b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6899      	ldr	r1, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	899a      	ldrh	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	791b      	ldrb	r3, [r3, #4]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f93c 	bl	800884a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	761a      	strb	r2, [r3, #24]
      break;
 80085d8:	e0f3      	b.n	80087c2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	791b      	ldrb	r3, [r3, #4]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f002 fe93 	bl	800b30c <USBH_LL_GetURBState>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d102      	bne.n	80085f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2209      	movs	r2, #9
 80085f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	d102      	bne.n	8008602 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085fc:	2303      	movs	r3, #3
 80085fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008600:	e0d8      	b.n	80087b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b04      	cmp	r3, #4
 8008606:	f040 80d5 	bne.w	80087b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	220b      	movs	r2, #11
 800860e:	761a      	strb	r2, [r3, #24]
      break;
 8008610:	e0d0      	b.n	80087b4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6899      	ldr	r1, [r3, #8]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	899a      	ldrh	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7958      	ldrb	r0, [r3, #5]
 800861e:	2301      	movs	r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	4603      	mov	r3, r0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8eb 	bl	8008800 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2206      	movs	r2, #6
 800863a:	761a      	strb	r2, [r3, #24]
      break;
 800863c:	e0c1      	b.n	80087c2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	795b      	ldrb	r3, [r3, #5]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f002 fe61 	bl	800b30c <USBH_LL_GetURBState>
 800864a:	4603      	mov	r3, r0
 800864c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d103      	bne.n	800865c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2207      	movs	r2, #7
 8008658:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800865a:	e0ad      	b.n	80087b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b05      	cmp	r3, #5
 8008660:	d105      	bne.n	800866e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220c      	movs	r2, #12
 8008666:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008668:	2303      	movs	r3, #3
 800866a:	73fb      	strb	r3, [r7, #15]
      break;
 800866c:	e0a4      	b.n	80087b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d103      	bne.n	800867c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2205      	movs	r2, #5
 8008678:	761a      	strb	r2, [r3, #24]
      break;
 800867a:	e09d      	b.n	80087b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	2b04      	cmp	r3, #4
 8008680:	f040 809a 	bne.w	80087b8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	220b      	movs	r2, #11
 8008688:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800868a:	2302      	movs	r3, #2
 800868c:	73fb      	strb	r3, [r7, #15]
      break;
 800868e:	e093      	b.n	80087b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	791b      	ldrb	r3, [r3, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8d6 	bl	800884a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2208      	movs	r2, #8
 80086ae:	761a      	strb	r2, [r3, #24]

      break;
 80086b0:	e087      	b.n	80087c2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	791b      	ldrb	r3, [r3, #4]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f002 fe27 	bl	800b30c <USBH_LL_GetURBState>
 80086be:	4603      	mov	r3, r0
 80086c0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d105      	bne.n	80086d4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	220d      	movs	r2, #13
 80086cc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086d2:	e073      	b.n	80087bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d103      	bne.n	80086e2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	220b      	movs	r2, #11
 80086de:	761a      	strb	r2, [r3, #24]
      break;
 80086e0:	e06c      	b.n	80087bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b05      	cmp	r3, #5
 80086e6:	d169      	bne.n	80087bc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80086e8:	2303      	movs	r3, #3
 80086ea:	73fb      	strb	r3, [r7, #15]
      break;
 80086ec:	e066      	b.n	80087bc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	795a      	ldrb	r2, [r3, #5]
 80086f2:	2301      	movs	r3, #1
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4613      	mov	r3, r2
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f87f 	bl	8008800 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	220a      	movs	r2, #10
 8008712:	761a      	strb	r2, [r3, #24]
      break;
 8008714:	e055      	b.n	80087c2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	795b      	ldrb	r3, [r3, #5]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f002 fdf5 	bl	800b30c <USBH_LL_GetURBState>
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d105      	bne.n	8008738 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	220d      	movs	r2, #13
 8008734:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008736:	e043      	b.n	80087c0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d103      	bne.n	8008746 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2209      	movs	r2, #9
 8008742:	761a      	strb	r2, [r3, #24]
      break;
 8008744:	e03c      	b.n	80087c0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d139      	bne.n	80087c0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	220b      	movs	r2, #11
 8008750:	761a      	strb	r2, [r3, #24]
      break;
 8008752:	e035      	b.n	80087c0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	7e5b      	ldrb	r3, [r3, #25]
 8008758:	3301      	adds	r3, #1
 800875a:	b2da      	uxtb	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	765a      	strb	r2, [r3, #25]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7e5b      	ldrb	r3, [r3, #25]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d806      	bhi.n	8008776 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008774:	e025      	b.n	80087c2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800877c:	2106      	movs	r1, #6
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	795b      	ldrb	r3, [r3, #5]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f90c 	bl	80089ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	791b      	ldrb	r3, [r3, #4]
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f906 	bl	80089ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087a6:	2302      	movs	r3, #2
 80087a8:	73fb      	strb	r3, [r7, #15]
      break;
 80087aa:	e00a      	b.n	80087c2 <USBH_HandleControl+0x2e2>

    default:
      break;
 80087ac:	bf00      	nop
 80087ae:	e008      	b.n	80087c2 <USBH_HandleControl+0x2e2>
      break;
 80087b0:	bf00      	nop
 80087b2:	e006      	b.n	80087c2 <USBH_HandleControl+0x2e2>
      break;
 80087b4:	bf00      	nop
 80087b6:	e004      	b.n	80087c2 <USBH_HandleControl+0x2e2>
      break;
 80087b8:	bf00      	nop
 80087ba:	e002      	b.n	80087c2 <USBH_HandleControl+0x2e2>
      break;
 80087bc:	bf00      	nop
 80087be:	e000      	b.n	80087c2 <USBH_HandleControl+0x2e2>
      break;
 80087c0:	bf00      	nop
  }

  return status;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af04      	add	r7, sp, #16
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087da:	79f9      	ldrb	r1, [r7, #7]
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	2308      	movs	r3, #8
 80087e2:	9302      	str	r3, [sp, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f002 fd5a 	bl	800b2aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af04      	add	r7, sp, #16
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4611      	mov	r1, r2
 800880c:	461a      	mov	r2, r3
 800880e:	460b      	mov	r3, r1
 8008810:	80fb      	strh	r3, [r7, #6]
 8008812:	4613      	mov	r3, r2
 8008814:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008824:	7979      	ldrb	r1, [r7, #5]
 8008826:	7e3b      	ldrb	r3, [r7, #24]
 8008828:	9303      	str	r3, [sp, #12]
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	9302      	str	r3, [sp, #8]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	2301      	movs	r3, #1
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	2200      	movs	r2, #0
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f002 fd35 	bl	800b2aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b088      	sub	sp, #32
 800884e:	af04      	add	r7, sp, #16
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	4611      	mov	r1, r2
 8008856:	461a      	mov	r2, r3
 8008858:	460b      	mov	r3, r1
 800885a:	80fb      	strh	r3, [r7, #6]
 800885c:	4613      	mov	r3, r2
 800885e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008860:	7979      	ldrb	r1, [r7, #5]
 8008862:	2300      	movs	r3, #0
 8008864:	9303      	str	r3, [sp, #12]
 8008866:	88fb      	ldrh	r3, [r7, #6]
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	2301      	movs	r3, #1
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	2201      	movs	r2, #1
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f002 fd17 	bl	800b2aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800887c:	2300      	movs	r3, #0

}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b088      	sub	sp, #32
 800888a:	af04      	add	r7, sp, #16
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	460b      	mov	r3, r1
 8008896:	80fb      	strh	r3, [r7, #6]
 8008898:	4613      	mov	r3, r2
 800889a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088aa:	7979      	ldrb	r1, [r7, #5]
 80088ac:	7e3b      	ldrb	r3, [r7, #24]
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	88fb      	ldrh	r3, [r7, #6]
 80088b2:	9302      	str	r3, [sp, #8]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	2301      	movs	r3, #1
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f002 fcf2 	bl	800b2aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af04      	add	r7, sp, #16
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4611      	mov	r1, r2
 80088dc:	461a      	mov	r2, r3
 80088de:	460b      	mov	r3, r1
 80088e0:	80fb      	strh	r3, [r7, #6]
 80088e2:	4613      	mov	r3, r2
 80088e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088e6:	7979      	ldrb	r1, [r7, #5]
 80088e8:	2300      	movs	r3, #0
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	9302      	str	r3, [sp, #8]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	2301      	movs	r3, #1
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	2302      	movs	r3, #2
 80088fa:	2201      	movs	r2, #1
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f002 fcd4 	bl	800b2aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af04      	add	r7, sp, #16
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	461a      	mov	r2, r3
 800891a:	4603      	mov	r3, r0
 800891c:	70fb      	strb	r3, [r7, #3]
 800891e:	460b      	mov	r3, r1
 8008920:	70bb      	strb	r3, [r7, #2]
 8008922:	4613      	mov	r3, r2
 8008924:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008926:	7878      	ldrb	r0, [r7, #1]
 8008928:	78ba      	ldrb	r2, [r7, #2]
 800892a:	78f9      	ldrb	r1, [r7, #3]
 800892c:	8b3b      	ldrh	r3, [r7, #24]
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	7d3b      	ldrb	r3, [r7, #20]
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	7c3b      	ldrb	r3, [r7, #16]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4603      	mov	r3, r0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f002 fc67 	bl	800b20e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f002 fc86 	bl	800b26c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f836 	bl	80089e8 <USBH_GetFreePipe>
 800897c:	4603      	mov	r3, r0
 800897e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008980:	89fb      	ldrh	r3, [r7, #14]
 8008982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008986:	4293      	cmp	r3, r2
 8008988:	d00a      	beq.n	80089a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	89fb      	ldrh	r3, [r7, #14]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	33e0      	adds	r3, #224	; 0xe0
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089a0:	89fb      	ldrh	r3, [r7, #14]
 80089a2:	b2db      	uxtb	r3, r3
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	2b0a      	cmp	r3, #10
 80089bc:	d80d      	bhi.n	80089da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	33e0      	adds	r3, #224	; 0xe0
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	78fb      	ldrb	r3, [r7, #3]
 80089cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	33e0      	adds	r3, #224	; 0xe0
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
 80089f8:	e00f      	b.n	8008a1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	33e0      	adds	r3, #224	; 0xe0
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	e007      	b.n	8008a24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	3301      	adds	r3, #1
 8008a18:	73fb      	strb	r3, [r7, #15]
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	2b0a      	cmp	r3, #10
 8008a1e:	d9ec      	bls.n	80089fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	4a08      	ldr	r2, [pc, #32]	; (8008a60 <disk_status+0x30>)
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	79fa      	ldrb	r2, [r7, #7]
 8008a48:	4905      	ldr	r1, [pc, #20]	; (8008a60 <disk_status+0x30>)
 8008a4a:	440a      	add	r2, r1
 8008a4c:	7a12      	ldrb	r2, [r2, #8]
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4798      	blx	r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	200100e0 	.word	0x200100e0

08008a64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <disk_initialize+0x48>)
 8008a76:	5cd3      	ldrb	r3, [r2, r3]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d111      	bne.n	8008aa0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	4a0b      	ldr	r2, [pc, #44]	; (8008aac <disk_initialize+0x48>)
 8008a80:	2101      	movs	r1, #1
 8008a82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	4a09      	ldr	r2, [pc, #36]	; (8008aac <disk_initialize+0x48>)
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	79fa      	ldrb	r2, [r7, #7]
 8008a92:	4906      	ldr	r1, [pc, #24]	; (8008aac <disk_initialize+0x48>)
 8008a94:	440a      	add	r2, r1
 8008a96:	7a12      	ldrb	r2, [r2, #8]
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200100e0 	.word	0x200100e0

08008ab0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4a0a      	ldr	r2, [pc, #40]	; (8008aec <disk_read+0x3c>)
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	689c      	ldr	r4, [r3, #8]
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4a07      	ldr	r2, [pc, #28]	; (8008aec <disk_read+0x3c>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	7a18      	ldrb	r0, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	47a0      	blx	r4
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd90      	pop	{r4, r7, pc}
 8008aea:	bf00      	nop
 8008aec:	200100e0 	.word	0x200100e0

08008af0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008af0:	b590      	push	{r4, r7, lr}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <disk_write+0x3c>)
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	68dc      	ldr	r4, [r3, #12]
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4a07      	ldr	r2, [pc, #28]	; (8008b2c <disk_write+0x3c>)
 8008b10:	4413      	add	r3, r2
 8008b12:	7a18      	ldrb	r0, [r3, #8]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	47a0      	blx	r4
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd90      	pop	{r4, r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200100e0 	.word	0x200100e0

08008b30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	603a      	str	r2, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <disk_ioctl+0x38>)
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	79fa      	ldrb	r2, [r7, #7]
 8008b4e:	4906      	ldr	r1, [pc, #24]	; (8008b68 <disk_ioctl+0x38>)
 8008b50:	440a      	add	r2, r1
 8008b52:	7a10      	ldrb	r0, [r2, #8]
 8008b54:	79b9      	ldrb	r1, [r7, #6]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	4798      	blx	r3
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	200100e0 	.word	0x200100e0

08008b6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3301      	adds	r3, #1
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b7c:	89fb      	ldrh	r3, [r7, #14]
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	b21a      	sxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	b21b      	sxth	r3, r3
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	b21b      	sxth	r3, r3
 8008b8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b8e:	89fb      	ldrh	r3, [r7, #14]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3303      	adds	r3, #3
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	021b      	lsls	r3, r3, #8
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	3202      	adds	r2, #2
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7812      	ldrb	r2, [r2, #0]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
	return rv;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	887a      	ldrh	r2, [r7, #2]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	887b      	ldrh	r3, [r7, #2]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	887a      	ldrh	r2, [r7, #2]
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	0a1b      	lsrs	r3, r3, #8
 8008c32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	607a      	str	r2, [r7, #4]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	b2d2      	uxtb	r2, r2
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	701a      	strb	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00d      	beq.n	8008ca6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	1c53      	adds	r3, r2, #1
 8008c8e:	613b      	str	r3, [r7, #16]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	1c59      	adds	r1, r3, #1
 8008c94:	6179      	str	r1, [r7, #20]
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f1      	bne.n	8008c8a <mem_cpy+0x1a>
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008cb2:	b480      	push	{r7}
 8008cb4:	b087      	sub	sp, #28
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	617a      	str	r2, [r7, #20]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	607b      	str	r3, [r7, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f3      	bne.n	8008cc2 <mem_set+0x10>
}
 8008cda:	bf00      	nop
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ce6:	b480      	push	{r7}
 8008ce8:	b089      	sub	sp, #36	; 0x24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	61fb      	str	r3, [r7, #28]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	61fa      	str	r2, [r7, #28]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	4619      	mov	r1, r3
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	61ba      	str	r2, [r7, #24]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	1acb      	subs	r3, r1, r3
 8008d12:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	607b      	str	r3, [r7, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <mem_cmp+0x40>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0eb      	beq.n	8008cfe <mem_cmp+0x18>

	return r;
 8008d26:	697b      	ldr	r3, [r7, #20]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3724      	adds	r7, #36	; 0x24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008d3e:	e002      	b.n	8008d46 <chk_chr+0x12>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3301      	adds	r3, #1
 8008d44:	607b      	str	r3, [r7, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <chk_chr+0x26>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d1f2      	bne.n	8008d40 <chk_chr+0xc>
	return *str;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
	...

08008d6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e029      	b.n	8008dd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d80:	4a27      	ldr	r2, [pc, #156]	; (8008e20 <chk_lock+0xb4>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	4413      	add	r3, r2
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01d      	beq.n	8008dca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d8e:	4a24      	ldr	r2, [pc, #144]	; (8008e20 <chk_lock+0xb4>)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	4413      	add	r3, r2
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d116      	bne.n	8008dce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008da0:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <chk_lock+0xb4>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	4413      	add	r3, r2
 8008da8:	3304      	adds	r3, #4
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d10c      	bne.n	8008dce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008db4:	4a1a      	ldr	r2, [pc, #104]	; (8008e20 <chk_lock+0xb4>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	4413      	add	r3, r2
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d102      	bne.n	8008dce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008dc8:	e007      	b.n	8008dda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d9d2      	bls.n	8008d80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d109      	bne.n	8008df4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <chk_lock+0x80>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d101      	bne.n	8008df0 <chk_lock+0x84>
 8008dec:	2300      	movs	r3, #0
 8008dee:	e010      	b.n	8008e12 <chk_lock+0xa6>
 8008df0:	2312      	movs	r3, #18
 8008df2:	e00e      	b.n	8008e12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d108      	bne.n	8008e0c <chk_lock+0xa0>
 8008dfa:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <chk_lock+0xb4>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	4413      	add	r3, r2
 8008e02:	330c      	adds	r3, #12
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e0a:	d101      	bne.n	8008e10 <chk_lock+0xa4>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	e000      	b.n	8008e12 <chk_lock+0xa6>
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	200100c0 	.word	0x200100c0

08008e24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	e002      	b.n	8008e36 <enq_lock+0x12>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3301      	adds	r3, #1
 8008e34:	607b      	str	r3, [r7, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d806      	bhi.n	8008e4a <enq_lock+0x26>
 8008e3c:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <enq_lock+0x40>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	4413      	add	r3, r2
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f2      	bne.n	8008e30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	bf14      	ite	ne
 8008e50:	2301      	movne	r3, #1
 8008e52:	2300      	moveq	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	200100c0 	.word	0x200100c0

08008e68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e01f      	b.n	8008eb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e78:	4a41      	ldr	r2, [pc, #260]	; (8008f80 <inc_lock+0x118>)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	4413      	add	r3, r2
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d113      	bne.n	8008eb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e8a:	4a3d      	ldr	r2, [pc, #244]	; (8008f80 <inc_lock+0x118>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	4413      	add	r3, r2
 8008e92:	3304      	adds	r3, #4
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d109      	bne.n	8008eb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e9e:	4a38      	ldr	r2, [pc, #224]	; (8008f80 <inc_lock+0x118>)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d006      	beq.n	8008ec0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d9dc      	bls.n	8008e78 <inc_lock+0x10>
 8008ebe:	e000      	b.n	8008ec2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ec0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d132      	bne.n	8008f2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e002      	b.n	8008ed4 <inc_lock+0x6c>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d806      	bhi.n	8008ee8 <inc_lock+0x80>
 8008eda:	4a29      	ldr	r2, [pc, #164]	; (8008f80 <inc_lock+0x118>)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	011b      	lsls	r3, r3, #4
 8008ee0:	4413      	add	r3, r2
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f2      	bne.n	8008ece <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d101      	bne.n	8008ef2 <inc_lock+0x8a>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e040      	b.n	8008f74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4922      	ldr	r1, [pc, #136]	; (8008f80 <inc_lock+0x118>)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	440b      	add	r3, r1
 8008efe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	491e      	ldr	r1, [pc, #120]	; (8008f80 <inc_lock+0x118>)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	440b      	add	r3, r1
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	491a      	ldr	r1, [pc, #104]	; (8008f80 <inc_lock+0x118>)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008f20:	4a17      	ldr	r2, [pc, #92]	; (8008f80 <inc_lock+0x118>)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	4413      	add	r3, r2
 8008f28:	330c      	adds	r3, #12
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <inc_lock+0xe0>
 8008f34:	4a12      	ldr	r2, [pc, #72]	; (8008f80 <inc_lock+0x118>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	4413      	add	r3, r2
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <inc_lock+0xe0>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e015      	b.n	8008f74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d108      	bne.n	8008f60 <inc_lock+0xf8>
 8008f4e:	4a0c      	ldr	r2, [pc, #48]	; (8008f80 <inc_lock+0x118>)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	011b      	lsls	r3, r3, #4
 8008f54:	4413      	add	r3, r2
 8008f56:	330c      	adds	r3, #12
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	e001      	b.n	8008f64 <inc_lock+0xfc>
 8008f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f64:	4906      	ldr	r1, [pc, #24]	; (8008f80 <inc_lock+0x118>)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	440b      	add	r3, r1
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	200100c0 	.word	0x200100c0

08008f84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	607b      	str	r3, [r7, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d825      	bhi.n	8008fe4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008f98:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <dec_lock+0x74>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	4413      	add	r3, r2
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008fa6:	89fb      	ldrh	r3, [r7, #14]
 8008fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fac:	d101      	bne.n	8008fb2 <dec_lock+0x2e>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <dec_lock+0x3a>
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008fbe:	4a0e      	ldr	r2, [pc, #56]	; (8008ff8 <dec_lock+0x74>)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	4413      	add	r3, r2
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	89fa      	ldrh	r2, [r7, #14]
 8008fca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008fcc:	89fb      	ldrh	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <dec_lock+0x5a>
 8008fd2:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <dec_lock+0x74>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	4413      	add	r3, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	737b      	strb	r3, [r7, #13]
 8008fe2:	e001      	b.n	8008fe8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008fe8:	7b7b      	ldrb	r3, [r7, #13]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	200100c0 	.word	0x200100c0

08008ffc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e010      	b.n	800902c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800900a:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <clear_lock+0x44>)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	4413      	add	r3, r2
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	429a      	cmp	r2, r3
 8009018:	d105      	bne.n	8009026 <clear_lock+0x2a>
 800901a:	4a09      	ldr	r2, [pc, #36]	; (8009040 <clear_lock+0x44>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d9eb      	bls.n	800900a <clear_lock+0xe>
	}
}
 8009032:	bf00      	nop
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	200100c0 	.word	0x200100c0

08009044 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	78db      	ldrb	r3, [r3, #3]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d034      	beq.n	80090c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	7858      	ldrb	r0, [r3, #1]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009068:	2301      	movs	r3, #1
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	f7ff fd40 	bl	8008af0 <disk_write>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009076:	2301      	movs	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	e022      	b.n	80090c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	1ad2      	subs	r2, r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	429a      	cmp	r2, r3
 8009090:	d217      	bcs.n	80090c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	789b      	ldrb	r3, [r3, #2]
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	e010      	b.n	80090bc <sync_window+0x78>
					wsect += fs->fsize;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4413      	add	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7858      	ldrb	r0, [r3, #1]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090ae:	2301      	movs	r3, #1
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	f7ff fd1d 	bl	8008af0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d8eb      	bhi.n	800909a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d01b      	beq.n	800911c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff ffad 	bl	8009044 <sync_window>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d113      	bne.n	800911c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7858      	ldrb	r0, [r3, #1]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090fe:	2301      	movs	r3, #1
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	f7ff fcd5 	bl	8008ab0 <disk_read>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009112:	2301      	movs	r3, #1
 8009114:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff87 	bl	8009044 <sync_window>
 8009136:	4603      	mov	r3, r0
 8009138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d158      	bne.n	80091f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b03      	cmp	r3, #3
 8009146:	d148      	bne.n	80091da <sync_fs+0xb2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	791b      	ldrb	r3, [r3, #4]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d144      	bne.n	80091da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3330      	adds	r3, #48	; 0x30
 8009154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fda9 	bl	8008cb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3330      	adds	r3, #48	; 0x30
 8009164:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009168:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff fd38 	bl	8008be2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3330      	adds	r3, #48	; 0x30
 8009176:	4921      	ldr	r1, [pc, #132]	; (80091fc <sync_fs+0xd4>)
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fd4d 	bl	8008c18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3330      	adds	r3, #48	; 0x30
 8009182:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009186:	491e      	ldr	r1, [pc, #120]	; (8009200 <sync_fs+0xd8>)
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fd45 	bl	8008c18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3330      	adds	r3, #48	; 0x30
 8009192:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	4619      	mov	r1, r3
 800919c:	4610      	mov	r0, r2
 800919e:	f7ff fd3b 	bl	8008c18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3330      	adds	r3, #48	; 0x30
 80091a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7ff fd31 	bl	8008c18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7858      	ldrb	r0, [r3, #1]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	2301      	movs	r3, #1
 80091d0:	f7ff fc8e 	bl	8008af0 <disk_write>
			fs->fsi_flag = 0;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2200      	movs	r2, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fca4 	bl	8008b30 <disk_ioctl>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <sync_fs+0xca>
 80091ee:	2301      	movs	r3, #1
 80091f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	41615252 	.word	0x41615252
 8009200:	61417272 	.word	0x61417272

08009204 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	3b02      	subs	r3, #2
 8009212:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	3b02      	subs	r3, #2
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d301      	bcc.n	8009224 <clust2sect+0x20>
 8009220:	2300      	movs	r3, #0
 8009222:	e008      	b.n	8009236 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	895b      	ldrh	r3, [r3, #10]
 8009228:	461a      	mov	r2, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	fb03 f202 	mul.w	r2, r3, r2
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	4413      	add	r3, r2
}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d904      	bls.n	8009262 <get_fat+0x20>
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d302      	bcc.n	8009268 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009262:	2301      	movs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e08c      	b.n	8009382 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d045      	beq.n	8009302 <get_fat+0xc0>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d05d      	beq.n	8009336 <get_fat+0xf4>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d177      	bne.n	800936e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4413      	add	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	6a1a      	ldr	r2, [r3, #32]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0a5b      	lsrs	r3, r3, #9
 8009294:	4413      	add	r3, r2
 8009296:	4619      	mov	r1, r3
 8009298:	6938      	ldr	r0, [r7, #16]
 800929a:	f7ff ff17 	bl	80090cc <move_window>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d167      	bne.n	8009374 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	60fa      	str	r2, [r7, #12]
 80092aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4413      	add	r3, r2
 80092b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092b6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6a1a      	ldr	r2, [r3, #32]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	0a5b      	lsrs	r3, r3, #9
 80092c0:	4413      	add	r3, r2
 80092c2:	4619      	mov	r1, r3
 80092c4:	6938      	ldr	r0, [r7, #16]
 80092c6:	f7ff ff01 	bl	80090cc <move_window>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d153      	bne.n	8009378 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4413      	add	r3, r2
 80092da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	461a      	mov	r2, r3
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <get_fat+0xb6>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	091b      	lsrs	r3, r3, #4
 80092f6:	e002      	b.n	80092fe <get_fat+0xbc>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092fe:	617b      	str	r3, [r7, #20]
			break;
 8009300:	e03f      	b.n	8009382 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6a1a      	ldr	r2, [r3, #32]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	4413      	add	r3, r2
 800930c:	4619      	mov	r1, r3
 800930e:	6938      	ldr	r0, [r7, #16]
 8009310:	f7ff fedc 	bl	80090cc <move_window>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d130      	bne.n	800937c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009328:	4413      	add	r3, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fc1e 	bl	8008b6c <ld_word>
 8009330:	4603      	mov	r3, r0
 8009332:	617b      	str	r3, [r7, #20]
			break;
 8009334:	e025      	b.n	8009382 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6a1a      	ldr	r2, [r3, #32]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	09db      	lsrs	r3, r3, #7
 800933e:	4413      	add	r3, r2
 8009340:	4619      	mov	r1, r3
 8009342:	6938      	ldr	r0, [r7, #16]
 8009344:	f7ff fec2 	bl	80090cc <move_window>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d118      	bne.n	8009380 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800935c:	4413      	add	r3, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fc1c 	bl	8008b9c <ld_dword>
 8009364:	4603      	mov	r3, r0
 8009366:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800936a:	617b      	str	r3, [r7, #20]
			break;
 800936c:	e009      	b.n	8009382 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800936e:	2301      	movs	r3, #1
 8009370:	617b      	str	r3, [r7, #20]
 8009372:	e006      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009374:	bf00      	nop
 8009376:	e004      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009378:	bf00      	nop
 800937a:	e002      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800937c:	bf00      	nop
 800937e:	e000      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009380:	bf00      	nop
		}
	}

	return val;
 8009382:	697b      	ldr	r3, [r7, #20]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009398:	2302      	movs	r3, #2
 800939a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	f240 80d6 	bls.w	8009550 <put_fat+0x1c4>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	f080 80d0 	bcs.w	8009550 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d073      	beq.n	80094a0 <put_fat+0x114>
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	f000 8091 	beq.w	80094e0 <put_fat+0x154>
 80093be:	2b01      	cmp	r3, #1
 80093c0:	f040 80c6 	bne.w	8009550 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	085b      	lsrs	r3, r3, #1
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4413      	add	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a1a      	ldr	r2, [r3, #32]
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	0a5b      	lsrs	r3, r3, #9
 80093da:	4413      	add	r3, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff fe74 	bl	80090cc <move_window>
 80093e4:	4603      	mov	r3, r0
 80093e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093e8:	7ffb      	ldrb	r3, [r7, #31]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f040 80a9 	bne.w	8009542 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	1c59      	adds	r1, r3, #1
 80093fa:	61b9      	str	r1, [r7, #24]
 80093fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009400:	4413      	add	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00d      	beq.n	800942a <put_fat+0x9e>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b25b      	sxtb	r3, r3
 8009414:	f003 030f 	and.w	r3, r3, #15
 8009418:	b25a      	sxtb	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	b25b      	sxtb	r3, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	b25b      	sxtb	r3, r3
 8009426:	b2db      	uxtb	r3, r3
 8009428:	e001      	b.n	800942e <put_fat+0xa2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a1a      	ldr	r2, [r3, #32]
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	0a5b      	lsrs	r3, r3, #9
 8009440:	4413      	add	r3, r2
 8009442:	4619      	mov	r1, r3
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff fe41 	bl	80090cc <move_window>
 800944a:	4603      	mov	r3, r0
 800944c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800944e:	7ffb      	ldrb	r3, [r7, #31]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d178      	bne.n	8009546 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009460:	4413      	add	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <put_fat+0xea>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	b2db      	uxtb	r3, r3
 8009474:	e00e      	b.n	8009494 <put_fat+0x108>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b25b      	sxtb	r3, r3
 800947c:	f023 030f 	bic.w	r3, r3, #15
 8009480:	b25a      	sxtb	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	b25b      	sxtb	r3, r3
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	b25b      	sxtb	r3, r3
 800948e:	4313      	orrs	r3, r2
 8009490:	b25b      	sxtb	r3, r3
 8009492:	b2db      	uxtb	r3, r3
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2201      	movs	r2, #1
 800949c:	70da      	strb	r2, [r3, #3]
			break;
 800949e:	e057      	b.n	8009550 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a1a      	ldr	r2, [r3, #32]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	0a1b      	lsrs	r3, r3, #8
 80094a8:	4413      	add	r3, r2
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff fe0d 	bl	80090cc <move_window>
 80094b2:	4603      	mov	r3, r0
 80094b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094b6:	7ffb      	ldrb	r3, [r7, #31]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d146      	bne.n	800954a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80094ca:	4413      	add	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	b292      	uxth	r2, r2
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff fb85 	bl	8008be2 <st_word>
			fs->wflag = 1;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	70da      	strb	r2, [r3, #3]
			break;
 80094de:	e037      	b.n	8009550 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6a1a      	ldr	r2, [r3, #32]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	09db      	lsrs	r3, r3, #7
 80094e8:	4413      	add	r3, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff fded 	bl	80090cc <move_window>
 80094f2:	4603      	mov	r3, r0
 80094f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094f6:	7ffb      	ldrb	r3, [r7, #31]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d128      	bne.n	800954e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009510:	4413      	add	r3, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fb42 	bl	8008b9c <ld_dword>
 8009518:	4603      	mov	r3, r0
 800951a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800951e:	4323      	orrs	r3, r4
 8009520:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009530:	4413      	add	r3, r2
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff fb6f 	bl	8008c18 <st_dword>
			fs->wflag = 1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	70da      	strb	r2, [r3, #3]
			break;
 8009540:	e006      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009542:	bf00      	nop
 8009544:	e004      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009546:	bf00      	nop
 8009548:	e002      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800954a:	bf00      	nop
 800954c:	e000      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800954e:	bf00      	nop
		}
	}
	return res;
 8009550:	7ffb      	ldrb	r3, [r7, #31]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3724      	adds	r7, #36	; 0x24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd90      	pop	{r4, r7, pc}

0800955a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b088      	sub	sp, #32
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d904      	bls.n	8009580 <remove_chain+0x26>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	429a      	cmp	r2, r3
 800957e:	d301      	bcc.n	8009584 <remove_chain+0x2a>
 8009580:	2302      	movs	r3, #2
 8009582:	e04b      	b.n	800961c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800958a:	f04f 32ff 	mov.w	r2, #4294967295
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	69b8      	ldr	r0, [r7, #24]
 8009592:	f7ff fefb 	bl	800938c <put_fat>
 8009596:	4603      	mov	r3, r0
 8009598:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800959a:	7ffb      	ldrb	r3, [r7, #31]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <remove_chain+0x4a>
 80095a0:	7ffb      	ldrb	r3, [r7, #31]
 80095a2:	e03b      	b.n	800961c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff fe4b 	bl	8009242 <get_fat>
 80095ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d031      	beq.n	8009618 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d101      	bne.n	80095be <remove_chain+0x64>
 80095ba:	2302      	movs	r3, #2
 80095bc:	e02e      	b.n	800961c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d101      	bne.n	80095ca <remove_chain+0x70>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e028      	b.n	800961c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095ca:	2200      	movs	r2, #0
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	69b8      	ldr	r0, [r7, #24]
 80095d0:	f7ff fedc 	bl	800938c <put_fat>
 80095d4:	4603      	mov	r3, r0
 80095d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80095d8:	7ffb      	ldrb	r3, [r7, #31]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <remove_chain+0x88>
 80095de:	7ffb      	ldrb	r3, [r7, #31]
 80095e0:	e01c      	b.n	800961c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	3b02      	subs	r3, #2
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d20b      	bcs.n	8009608 <remove_chain+0xae>
			fs->free_clst++;
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	429a      	cmp	r2, r3
 8009614:	d3c6      	bcc.n	80095a4 <remove_chain+0x4a>
 8009616:	e000      	b.n	800961a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009618:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10d      	bne.n	8009656 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <create_chain+0x2c>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	429a      	cmp	r2, r3
 800964e:	d31b      	bcc.n	8009688 <create_chain+0x64>
 8009650:	2301      	movs	r3, #1
 8009652:	61bb      	str	r3, [r7, #24]
 8009654:	e018      	b.n	8009688 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fdf2 	bl	8009242 <get_fat>
 800965e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d801      	bhi.n	800966a <create_chain+0x46>
 8009666:	2301      	movs	r3, #1
 8009668:	e070      	b.n	800974c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d101      	bne.n	8009676 <create_chain+0x52>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	e06a      	b.n	800974c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	429a      	cmp	r2, r3
 800967e:	d201      	bcs.n	8009684 <create_chain+0x60>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	e063      	b.n	800974c <create_chain+0x128>
		scl = clst;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	3301      	adds	r3, #1
 8009690:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	429a      	cmp	r2, r3
 800969a:	d307      	bcc.n	80096ac <create_chain+0x88>
				ncl = 2;
 800969c:	2302      	movs	r3, #2
 800969e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d901      	bls.n	80096ac <create_chain+0x88>
 80096a8:	2300      	movs	r3, #0
 80096aa:	e04f      	b.n	800974c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80096ac:	69f9      	ldr	r1, [r7, #28]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fdc7 	bl	8009242 <get_fat>
 80096b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00e      	beq.n	80096da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d003      	beq.n	80096ca <create_chain+0xa6>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d101      	bne.n	80096ce <create_chain+0xaa>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	e03e      	b.n	800974c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d1da      	bne.n	800968c <create_chain+0x68>
 80096d6:	2300      	movs	r3, #0
 80096d8:	e038      	b.n	800974c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80096da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295
 80096e0:	69f9      	ldr	r1, [r7, #28]
 80096e2:	6938      	ldr	r0, [r7, #16]
 80096e4:	f7ff fe52 	bl	800938c <put_fat>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <create_chain+0xe2>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6938      	ldr	r0, [r7, #16]
 80096fe:	f7ff fe45 	bl	800938c <put_fat>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d116      	bne.n	800973a <create_chain+0x116>
		fs->last_clst = ncl;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	3b02      	subs	r3, #2
 800971c:	429a      	cmp	r2, r3
 800971e:	d804      	bhi.n	800972a <create_chain+0x106>
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	1e5a      	subs	r2, r3, #1
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	791b      	ldrb	r3, [r3, #4]
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	711a      	strb	r2, [r3, #4]
 8009738:	e007      	b.n	800974a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d102      	bne.n	8009746 <create_chain+0x122>
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	e000      	b.n	8009748 <create_chain+0x124>
 8009746:	2301      	movs	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800974a:	69fb      	ldr	r3, [r7, #28]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	3304      	adds	r3, #4
 800976a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	0a5b      	lsrs	r3, r3, #9
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	8952      	ldrh	r2, [r2, #10]
 8009774:	fbb3 f3f2 	udiv	r3, r3, r2
 8009778:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	1d1a      	adds	r2, r3, #4
 800977e:	613a      	str	r2, [r7, #16]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <clmt_clust+0x3a>
 800978a:	2300      	movs	r3, #0
 800978c:	e010      	b.n	80097b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d307      	bcc.n	80097a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	3304      	adds	r3, #4
 80097a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097a4:	e7e9      	b.n	800977a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80097a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097d2:	d204      	bcs.n	80097de <dir_sdi+0x22>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	f003 031f 	and.w	r3, r3, #31
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80097de:	2302      	movs	r3, #2
 80097e0:	e063      	b.n	80098aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <dir_sdi+0x46>
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d902      	bls.n	8009802 <dir_sdi+0x46>
		clst = fs->dirbase;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10c      	bne.n	8009822 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	8912      	ldrh	r2, [r2, #8]
 8009810:	4293      	cmp	r3, r2
 8009812:	d301      	bcc.n	8009818 <dir_sdi+0x5c>
 8009814:	2302      	movs	r3, #2
 8009816:	e048      	b.n	80098aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	61da      	str	r2, [r3, #28]
 8009820:	e029      	b.n	8009876 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	895b      	ldrh	r3, [r3, #10]
 8009826:	025b      	lsls	r3, r3, #9
 8009828:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800982a:	e019      	b.n	8009860 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6979      	ldr	r1, [r7, #20]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fd06 	bl	8009242 <get_fat>
 8009836:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d101      	bne.n	8009844 <dir_sdi+0x88>
 8009840:	2301      	movs	r3, #1
 8009842:	e032      	b.n	80098aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d904      	bls.n	8009854 <dir_sdi+0x98>
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	429a      	cmp	r2, r3
 8009852:	d301      	bcc.n	8009858 <dir_sdi+0x9c>
 8009854:	2302      	movs	r3, #2
 8009856:	e028      	b.n	80098aa <dir_sdi+0xee>
			ofs -= csz;
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d2e1      	bcs.n	800982c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009868:	6979      	ldr	r1, [r7, #20]
 800986a:	6938      	ldr	r0, [r7, #16]
 800986c:	f7ff fcca 	bl	8009204 <clust2sect>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <dir_sdi+0xcc>
 8009884:	2302      	movs	r3, #2
 8009886:	e010      	b.n	80098aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	0a5b      	lsrs	r3, r3, #9
 8009890:	441a      	add	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a2:	441a      	add	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	3320      	adds	r3, #32
 80098c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <dir_next+0x28>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098d8:	d301      	bcc.n	80098de <dir_next+0x2c>
 80098da:	2304      	movs	r3, #4
 80098dc:	e0aa      	b.n	8009a34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f040 8098 	bne.w	8009a1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	8912      	ldrh	r2, [r2, #8]
 8009904:	4293      	cmp	r3, r2
 8009906:	f0c0 8088 	bcc.w	8009a1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	61da      	str	r2, [r3, #28]
 8009910:	2304      	movs	r3, #4
 8009912:	e08f      	b.n	8009a34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	0a5b      	lsrs	r3, r3, #9
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	8952      	ldrh	r2, [r2, #10]
 800991c:	3a01      	subs	r2, #1
 800991e:	4013      	ands	r3, r2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d17a      	bne.n	8009a1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f7ff fc88 	bl	8009242 <get_fat>
 8009932:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d801      	bhi.n	800993e <dir_next+0x8c>
 800993a:	2302      	movs	r3, #2
 800993c:	e07a      	b.n	8009a34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d101      	bne.n	800994a <dir_next+0x98>
 8009946:	2301      	movs	r3, #1
 8009948:	e074      	b.n	8009a34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	429a      	cmp	r2, r3
 8009952:	d358      	bcc.n	8009a06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d104      	bne.n	8009964 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	61da      	str	r2, [r3, #28]
 8009960:	2304      	movs	r3, #4
 8009962:	e067      	b.n	8009a34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f7ff fe59 	bl	8009624 <create_chain>
 8009972:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <dir_next+0xcc>
 800997a:	2307      	movs	r3, #7
 800997c:	e05a      	b.n	8009a34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <dir_next+0xd6>
 8009984:	2302      	movs	r3, #2
 8009986:	e055      	b.n	8009a34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d101      	bne.n	8009994 <dir_next+0xe2>
 8009990:	2301      	movs	r3, #1
 8009992:	e04f      	b.n	8009a34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fb55 	bl	8009044 <sync_window>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <dir_next+0xf2>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e047      	b.n	8009a34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3330      	adds	r3, #48	; 0x30
 80099a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f97f 	bl	8008cb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]
 80099b8:	6979      	ldr	r1, [r7, #20]
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7ff fc22 	bl	8009204 <clust2sect>
 80099c0:	4602      	mov	r2, r0
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80099c6:	e012      	b.n	80099ee <dir_next+0x13c>
						fs->wflag = 1;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fb38 	bl	8009044 <sync_window>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <dir_next+0x12c>
 80099da:	2301      	movs	r3, #1
 80099dc:	e02a      	b.n	8009a34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3301      	adds	r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	895b      	ldrh	r3, [r3, #10]
 80099f2:	461a      	mov	r2, r3
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d3e6      	bcc.n	80099c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad2      	subs	r2, r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a0c:	6979      	ldr	r1, [r7, #20]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff fbf8 	bl	8009204 <clust2sect>
 8009a14:	4602      	mov	r2, r0
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	441a      	add	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff feb4 	bl	80097bc <dir_sdi>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d12b      	bne.n	8009ab6 <dir_alloc+0x7a>
		n = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4619      	mov	r1, r3
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fb2f 	bl	80090cc <move_window>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11d      	bne.n	8009ab4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2be5      	cmp	r3, #229	; 0xe5
 8009a80:	d004      	beq.n	8009a8c <dir_alloc+0x50>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d107      	bne.n	8009a9c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d102      	bne.n	8009aa0 <dir_alloc+0x64>
 8009a9a:	e00c      	b.n	8009ab6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff ff05 	bl	80098b2 <dir_next>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0d7      	beq.n	8009a62 <dir_alloc+0x26>
 8009ab2:	e000      	b.n	8009ab6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ab4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d101      	bne.n	8009ac0 <dir_alloc+0x84>
 8009abc:	2307      	movs	r3, #7
 8009abe:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	331a      	adds	r3, #26
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff f847 	bl	8008b6c <ld_word>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d109      	bne.n	8009afe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	3314      	adds	r3, #20
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff f83c 	bl	8008b6c <ld_word>
 8009af4:	4603      	mov	r3, r0
 8009af6:	041b      	lsls	r3, r3, #16
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009afe:	68fb      	ldr	r3, [r7, #12]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	331a      	adds	r3, #26
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	b292      	uxth	r2, r2
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff f85f 	bl	8008be2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d109      	bne.n	8009b40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f103 0214 	add.w	r2, r3, #20
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	0c1b      	lsrs	r3, r3, #16
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7ff f851 	bl	8008be2 <st_word>
	}
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b56:	2100      	movs	r1, #0
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff fe2f 	bl	80097bc <dir_sdi>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <dir_find+0x24>
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	e03e      	b.n	8009bea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6938      	ldr	r0, [r7, #16]
 8009b74:	f7ff faaa 	bl	80090cc <move_window>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d12f      	bne.n	8009be2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <dir_find+0x4e>
 8009b90:	2304      	movs	r3, #4
 8009b92:	75fb      	strb	r3, [r7, #23]
 8009b94:	e028      	b.n	8009be8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	330b      	adds	r3, #11
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	330b      	adds	r3, #11
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 0308 	and.w	r3, r3, #8
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <dir_find+0x86>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a18      	ldr	r0, [r3, #32]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3324      	adds	r3, #36	; 0x24
 8009bc0:	220b      	movs	r2, #11
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	f7ff f88f 	bl	8008ce6 <mem_cmp>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fe6e 	bl	80098b2 <dir_next>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0c5      	beq.n	8009b6c <dir_find+0x24>
 8009be0:	e002      	b.n	8009be8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009be2:	bf00      	nop
 8009be4:	e000      	b.n	8009be8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009be6:	bf00      	nop

	return res;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b084      	sub	sp, #16
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009c00:	2101      	movs	r1, #1
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ff1a 	bl	8009a3c <dir_alloc>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d11c      	bne.n	8009c4c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	4619      	mov	r1, r3
 8009c18:	68b8      	ldr	r0, [r7, #8]
 8009c1a:	f7ff fa57 	bl	80090cc <move_window>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d111      	bne.n	8009c4c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff f83e 	bl	8008cb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a18      	ldr	r0, [r3, #32]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3324      	adds	r3, #36	; 0x24
 8009c3e:	220b      	movs	r2, #11
 8009c40:	4619      	mov	r1, r3
 8009c42:	f7ff f815 	bl	8008c70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d04e      	beq.n	8009d0c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009c76:	e021      	b.n	8009cbc <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a1a      	ldr	r2, [r3, #32]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	1c59      	adds	r1, r3, #1
 8009c80:	6179      	str	r1, [r7, #20]
 8009c82:	4413      	add	r3, r2
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	d100      	bne.n	8009c90 <get_fileinfo+0x3a>
 8009c8e:	e015      	b.n	8009cbc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b05      	cmp	r3, #5
 8009c94:	d101      	bne.n	8009c9a <get_fileinfo+0x44>
 8009c96:	23e5      	movs	r3, #229	; 0xe5
 8009c98:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	d106      	bne.n	8009cae <get_fileinfo+0x58>
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	613a      	str	r2, [r7, #16]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	4413      	add	r3, r2
 8009caa:	222e      	movs	r2, #46	; 0x2e
 8009cac:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	613a      	str	r2, [r7, #16]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	7bfa      	ldrb	r2, [r7, #15]
 8009cba:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b0a      	cmp	r3, #10
 8009cc0:	d9da      	bls.n	8009c78 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	3309      	adds	r3, #9
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	7ada      	ldrb	r2, [r3, #11]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	331c      	adds	r3, #28
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe ff5c 	bl	8008b9c <ld_dword>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	3316      	adds	r3, #22
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe ff53 	bl	8008b9c <ld_dword>
 8009cf6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	80da      	strh	r2, [r3, #6]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	0c1b      	lsrs	r3, r3, #16
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	809a      	strh	r2, [r3, #4]
 8009d0a:	e000      	b.n	8009d0e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009d0c:	bf00      	nop
}
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3324      	adds	r3, #36	; 0x24
 8009d28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009d2a:	220b      	movs	r2, #11
 8009d2c:	2120      	movs	r1, #32
 8009d2e:	68b8      	ldr	r0, [r7, #8]
 8009d30:	f7fe ffbf 	bl	8008cb2 <mem_set>
	si = i = 0; ni = 8;
 8009d34:	2300      	movs	r3, #0
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	617a      	str	r2, [r7, #20]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d4e:	7ffb      	ldrb	r3, [r7, #31]
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d94e      	bls.n	8009df2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009d54:	7ffb      	ldrb	r3, [r7, #31]
 8009d56:	2b2f      	cmp	r3, #47	; 0x2f
 8009d58:	d006      	beq.n	8009d68 <create_name+0x54>
 8009d5a:	7ffb      	ldrb	r3, [r7, #31]
 8009d5c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d5e:	d110      	bne.n	8009d82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d60:	e002      	b.n	8009d68 <create_name+0x54>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b2f      	cmp	r3, #47	; 0x2f
 8009d72:	d0f6      	beq.n	8009d62 <create_name+0x4e>
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4413      	add	r3, r2
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d7e:	d0f0      	beq.n	8009d62 <create_name+0x4e>
			break;
 8009d80:	e038      	b.n	8009df4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009d82:	7ffb      	ldrb	r3, [r7, #31]
 8009d84:	2b2e      	cmp	r3, #46	; 0x2e
 8009d86:	d003      	beq.n	8009d90 <create_name+0x7c>
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d30c      	bcc.n	8009daa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b0b      	cmp	r3, #11
 8009d94:	d002      	beq.n	8009d9c <create_name+0x88>
 8009d96:	7ffb      	ldrb	r3, [r7, #31]
 8009d98:	2b2e      	cmp	r3, #46	; 0x2e
 8009d9a:	d001      	beq.n	8009da0 <create_name+0x8c>
 8009d9c:	2306      	movs	r3, #6
 8009d9e:	e044      	b.n	8009e2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009da0:	2308      	movs	r3, #8
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	230b      	movs	r3, #11
 8009da6:	61bb      	str	r3, [r7, #24]
			continue;
 8009da8:	e022      	b.n	8009df0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009daa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da04      	bge.n	8009dbc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009db2:	7ffb      	ldrb	r3, [r7, #31]
 8009db4:	3b80      	subs	r3, #128	; 0x80
 8009db6:	4a1f      	ldr	r2, [pc, #124]	; (8009e34 <create_name+0x120>)
 8009db8:	5cd3      	ldrb	r3, [r2, r3]
 8009dba:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009dbc:	7ffb      	ldrb	r3, [r7, #31]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	481d      	ldr	r0, [pc, #116]	; (8009e38 <create_name+0x124>)
 8009dc2:	f7fe ffb7 	bl	8008d34 <chk_chr>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <create_name+0xbc>
 8009dcc:	2306      	movs	r3, #6
 8009dce:	e02c      	b.n	8009e2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009dd0:	7ffb      	ldrb	r3, [r7, #31]
 8009dd2:	2b60      	cmp	r3, #96	; 0x60
 8009dd4:	d905      	bls.n	8009de2 <create_name+0xce>
 8009dd6:	7ffb      	ldrb	r3, [r7, #31]
 8009dd8:	2b7a      	cmp	r3, #122	; 0x7a
 8009dda:	d802      	bhi.n	8009de2 <create_name+0xce>
 8009ddc:	7ffb      	ldrb	r3, [r7, #31]
 8009dde:	3b20      	subs	r3, #32
 8009de0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	613a      	str	r2, [r7, #16]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	4413      	add	r3, r2
 8009dec:	7ffa      	ldrb	r2, [r7, #31]
 8009dee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009df0:	e7a6      	b.n	8009d40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009df2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	441a      	add	r2, r3
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <create_name+0xf4>
 8009e04:	2306      	movs	r3, #6
 8009e06:	e010      	b.n	8009e2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2be5      	cmp	r3, #229	; 0xe5
 8009e0e:	d102      	bne.n	8009e16 <create_name+0x102>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2205      	movs	r2, #5
 8009e14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e16:	7ffb      	ldrb	r3, [r7, #31]
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d801      	bhi.n	8009e20 <create_name+0x10c>
 8009e1c:	2204      	movs	r2, #4
 8009e1e:	e000      	b.n	8009e22 <create_name+0x10e>
 8009e20:	2200      	movs	r2, #0
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	330b      	adds	r3, #11
 8009e26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009e28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3720      	adds	r7, #32
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	0800c6ac 	.word	0x0800c6ac
 8009e38:	0800c63c 	.word	0x0800c63c

08009e3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e50:	e002      	b.n	8009e58 <follow_path+0x1c>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e5e:	d0f8      	beq.n	8009e52 <follow_path+0x16>
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b5c      	cmp	r3, #92	; 0x5c
 8009e66:	d0f4      	beq.n	8009e52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b1f      	cmp	r3, #31
 8009e74:	d80a      	bhi.n	8009e8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2280      	movs	r2, #128	; 0x80
 8009e7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff fc9b 	bl	80097bc <dir_sdi>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]
 8009e8a:	e043      	b.n	8009f14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff ff3f 	bl	8009d14 <create_name>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d134      	bne.n	8009f0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fe51 	bl	8009b48 <dir_find>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009eb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	d127      	bne.n	8009f0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ebe:	7afb      	ldrb	r3, [r7, #11]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d122      	bne.n	8009f0e <follow_path+0xd2>
 8009ec8:	2305      	movs	r3, #5
 8009eca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ecc:	e01f      	b.n	8009f0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11c      	bne.n	8009f12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	799b      	ldrb	r3, [r3, #6]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009ee4:	2305      	movs	r3, #5
 8009ee6:	75fb      	strb	r3, [r7, #23]
 8009ee8:	e014      	b.n	8009f14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef8:	4413      	add	r3, r2
 8009efa:	4619      	mov	r1, r3
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff fde4 	bl	8009aca <ld_clust>
 8009f02:	4602      	mov	r2, r0
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f08:	e7c0      	b.n	8009e8c <follow_path+0x50>
			if (res != FR_OK) break;
 8009f0a:	bf00      	nop
 8009f0c:	e002      	b.n	8009f14 <follow_path+0xd8>
				break;
 8009f0e:	bf00      	nop
 8009f10:	e000      	b.n	8009f14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f12:	bf00      	nop
			}
		}
	}

	return res;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b087      	sub	sp, #28
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d031      	beq.n	8009f98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	e002      	b.n	8009f42 <get_ldnumber+0x24>
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d903      	bls.n	8009f52 <get_ldnumber+0x34>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b3a      	cmp	r3, #58	; 0x3a
 8009f50:	d1f4      	bne.n	8009f3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b3a      	cmp	r3, #58	; 0x3a
 8009f58:	d11c      	bne.n	8009f94 <get_ldnumber+0x76>
			tp = *path;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	60fa      	str	r2, [r7, #12]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	3b30      	subs	r3, #48	; 0x30
 8009f6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b09      	cmp	r3, #9
 8009f70:	d80e      	bhi.n	8009f90 <get_ldnumber+0x72>
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d10a      	bne.n	8009f90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <get_ldnumber+0x72>
					vol = (int)i;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	3301      	adds	r3, #1
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	e002      	b.n	8009f9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f94:	2300      	movs	r3, #0
 8009f96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f98:	693b      	ldr	r3, [r7, #16]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	70da      	strb	r2, [r3, #3]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff f882 	bl	80090cc <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <check_fs+0x2a>
 8009fce:	2304      	movs	r3, #4
 8009fd0:	e038      	b.n	800a044 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3330      	adds	r3, #48	; 0x30
 8009fd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fdc6 	bl	8008b6c <ld_word>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d001      	beq.n	8009ff0 <check_fs+0x48>
 8009fec:	2303      	movs	r3, #3
 8009fee:	e029      	b.n	800a044 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ff6:	2be9      	cmp	r3, #233	; 0xe9
 8009ff8:	d009      	beq.n	800a00e <check_fs+0x66>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a000:	2beb      	cmp	r3, #235	; 0xeb
 800a002:	d11e      	bne.n	800a042 <check_fs+0x9a>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a00a:	2b90      	cmp	r3, #144	; 0x90
 800a00c:	d119      	bne.n	800a042 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3330      	adds	r3, #48	; 0x30
 800a012:	3336      	adds	r3, #54	; 0x36
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fdc1 	bl	8008b9c <ld_dword>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <check_fs+0xa4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d101      	bne.n	800a02a <check_fs+0x82>
 800a026:	2300      	movs	r3, #0
 800a028:	e00c      	b.n	800a044 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	3330      	adds	r3, #48	; 0x30
 800a02e:	3352      	adds	r3, #82	; 0x52
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fdb3 	bl	8008b9c <ld_dword>
 800a036:	4602      	mov	r2, r0
 800a038:	4b05      	ldr	r3, [pc, #20]	; (800a050 <check_fs+0xa8>)
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d101      	bne.n	800a042 <check_fs+0x9a>
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a042:	2302      	movs	r3, #2
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	00544146 	.word	0x00544146
 800a050:	33544146 	.word	0x33544146

0800a054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b096      	sub	sp, #88	; 0x58
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff ff58 	bl	8009f1e <get_ldnumber>
 800a06e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a072:	2b00      	cmp	r3, #0
 800a074:	da01      	bge.n	800a07a <find_volume+0x26>
 800a076:	230b      	movs	r3, #11
 800a078:	e22e      	b.n	800a4d8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a07a:	4aa8      	ldr	r2, [pc, #672]	; (800a31c <find_volume+0x2c8>)
 800a07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a082:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <find_volume+0x3a>
 800a08a:	230c      	movs	r3, #12
 800a08c:	e224      	b.n	800a4d8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a092:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01a      	beq.n	800a0da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fcc1 	bl	8008a30 <disk_status>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10c      	bne.n	800a0da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <find_volume+0x82>
 800a0c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e200      	b.n	800a4d8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e1fe      	b.n	800a4d8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fcb9 	bl	8008a64 <disk_initialize>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a0f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a104:	2303      	movs	r3, #3
 800a106:	e1e7      	b.n	800a4d8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <find_volume+0xca>
 800a10e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a112:	f003 0304 	and.w	r3, r3, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a11a:	230a      	movs	r3, #10
 800a11c:	e1dc      	b.n	800a4d8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a122:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a126:	f7ff ff3f 	bl	8009fa8 <check_fs>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a134:	2b02      	cmp	r3, #2
 800a136:	d14b      	bne.n	800a1d0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a138:	2300      	movs	r3, #0
 800a13a:	643b      	str	r3, [r7, #64]	; 0x40
 800a13c:	e01f      	b.n	800a17e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a14c:	4413      	add	r3, r2
 800a14e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	3304      	adds	r3, #4
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <find_volume+0x114>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	3308      	adds	r3, #8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fd1c 	bl	8008b9c <ld_dword>
 800a164:	4602      	mov	r2, r0
 800a166:	e000      	b.n	800a16a <find_volume+0x116>
 800a168:	2200      	movs	r2, #0
 800a16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a172:	440b      	add	r3, r1
 800a174:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	3301      	adds	r3, #1
 800a17c:	643b      	str	r3, [r7, #64]	; 0x40
 800a17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a180:	2b03      	cmp	r3, #3
 800a182:	d9dc      	bls.n	800a13e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a184:	2300      	movs	r3, #0
 800a186:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <find_volume+0x140>
 800a18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a190:	3b01      	subs	r3, #1
 800a192:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a19c:	4413      	add	r3, r2
 800a19e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <find_volume+0x162>
 800a1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1ae:	f7ff fefb 	bl	8009fa8 <check_fs>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	e000      	b.n	800a1b8 <find_volume+0x164>
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a1bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d905      	bls.n	800a1d0 <find_volume+0x17c>
 800a1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d9e1      	bls.n	800a194 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a1d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	d101      	bne.n	800a1dc <find_volume+0x188>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e17d      	b.n	800a4d8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a1dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d901      	bls.n	800a1e8 <find_volume+0x194>
 800a1e4:	230d      	movs	r3, #13
 800a1e6:	e177      	b.n	800a4d8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	3330      	adds	r3, #48	; 0x30
 800a1ec:	330b      	adds	r3, #11
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fcbc 	bl	8008b6c <ld_word>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1fa:	d001      	beq.n	800a200 <find_volume+0x1ac>
 800a1fc:	230d      	movs	r3, #13
 800a1fe:	e16b      	b.n	800a4d8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	3330      	adds	r3, #48	; 0x30
 800a204:	3316      	adds	r3, #22
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe fcb0 	bl	8008b6c <ld_word>
 800a20c:	4603      	mov	r3, r0
 800a20e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <find_volume+0x1d0>
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	3330      	adds	r3, #48	; 0x30
 800a21a:	3324      	adds	r3, #36	; 0x24
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe fcbd 	bl	8008b9c <ld_dword>
 800a222:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a228:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	789b      	ldrb	r3, [r3, #2]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d005      	beq.n	800a248 <find_volume+0x1f4>
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	789b      	ldrb	r3, [r3, #2]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d001      	beq.n	800a248 <find_volume+0x1f4>
 800a244:	230d      	movs	r3, #13
 800a246:	e147      	b.n	800a4d8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	789b      	ldrb	r3, [r3, #2]
 800a24c:	461a      	mov	r2, r3
 800a24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a250:	fb02 f303 	mul.w	r3, r2, r3
 800a254:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	895b      	ldrh	r3, [r3, #10]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d008      	beq.n	800a27c <find_volume+0x228>
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	895b      	ldrh	r3, [r3, #10]
 800a26e:	461a      	mov	r2, r3
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	895b      	ldrh	r3, [r3, #10]
 800a274:	3b01      	subs	r3, #1
 800a276:	4013      	ands	r3, r2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <find_volume+0x22c>
 800a27c:	230d      	movs	r3, #13
 800a27e:	e12b      	b.n	800a4d8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	3330      	adds	r3, #48	; 0x30
 800a284:	3311      	adds	r3, #17
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fc70 	bl	8008b6c <ld_word>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	891b      	ldrh	r3, [r3, #8]
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <find_volume+0x252>
 800a2a2:	230d      	movs	r3, #13
 800a2a4:	e118      	b.n	800a4d8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	3330      	adds	r3, #48	; 0x30
 800a2aa:	3313      	adds	r3, #19
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe fc5d 	bl	8008b6c <ld_word>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <find_volume+0x276>
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	3330      	adds	r3, #48	; 0x30
 800a2c0:	3320      	adds	r3, #32
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fc6a 	bl	8008b9c <ld_dword>
 800a2c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	3330      	adds	r3, #48	; 0x30
 800a2ce:	330e      	adds	r3, #14
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe fc4b 	bl	8008b6c <ld_word>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a2da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <find_volume+0x290>
 800a2e0:	230d      	movs	r3, #13
 800a2e2:	e0f9      	b.n	800a4d8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a2e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e8:	4413      	add	r3, r2
 800a2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ec:	8912      	ldrh	r2, [r2, #8]
 800a2ee:	0912      	lsrs	r2, r2, #4
 800a2f0:	b292      	uxth	r2, r2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d201      	bcs.n	800a302 <find_volume+0x2ae>
 800a2fe:	230d      	movs	r3, #13
 800a300:	e0ea      	b.n	800a4d8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30a:	8952      	ldrh	r2, [r2, #10]
 800a30c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d103      	bne.n	800a320 <find_volume+0x2cc>
 800a318:	230d      	movs	r3, #13
 800a31a:	e0dd      	b.n	800a4d8 <find_volume+0x484>
 800a31c:	200100b8 	.word	0x200100b8
		fmt = FS_FAT32;
 800a320:	2303      	movs	r3, #3
 800a322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d802      	bhi.n	800a336 <find_volume+0x2e2>
 800a330:	2302      	movs	r3, #2
 800a332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d802      	bhi.n	800a346 <find_volume+0x2f2>
 800a340:	2301      	movs	r3, #1
 800a342:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	1c9a      	adds	r2, r3, #2
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a352:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a354:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a358:	441a      	add	r2, r3
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a35e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	441a      	add	r2, r3
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d11e      	bne.n	800a3ae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	3330      	adds	r3, #48	; 0x30
 800a374:	332a      	adds	r3, #42	; 0x2a
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fbf8 	bl	8008b6c <ld_word>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <find_volume+0x332>
 800a382:	230d      	movs	r3, #13
 800a384:	e0a8      	b.n	800a4d8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	891b      	ldrh	r3, [r3, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <find_volume+0x33e>
 800a38e:	230d      	movs	r3, #13
 800a390:	e0a2      	b.n	800a4d8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	3330      	adds	r3, #48	; 0x30
 800a396:	332c      	adds	r3, #44	; 0x2c
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fbff 	bl	8008b9c <ld_dword>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ac:	e01f      	b.n	800a3ee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	891b      	ldrh	r3, [r3, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <find_volume+0x366>
 800a3b6:	230d      	movs	r3, #13
 800a3b8:	e08e      	b.n	800a4d8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	441a      	add	r2, r3
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a3c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d103      	bne.n	800a3d6 <find_volume+0x382>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	e00a      	b.n	800a3ec <find_volume+0x398>
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	695a      	ldr	r2, [r3, #20]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	085a      	lsrs	r2, r3, #1
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a3ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a3f8:	0a5b      	lsrs	r3, r3, #9
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d201      	bcs.n	800a402 <find_volume+0x3ae>
 800a3fe:	230d      	movs	r3, #13
 800a400:	e06a      	b.n	800a4d8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	f04f 32ff 	mov.w	r2, #4294967295
 800a408:	611a      	str	r2, [r3, #16]
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	691a      	ldr	r2, [r3, #16]
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	2280      	movs	r2, #128	; 0x80
 800a416:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d149      	bne.n	800a4b4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	3330      	adds	r3, #48	; 0x30
 800a424:	3330      	adds	r3, #48	; 0x30
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fba0 	bl	8008b6c <ld_word>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d140      	bne.n	800a4b4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a434:	3301      	adds	r3, #1
 800a436:	4619      	mov	r1, r3
 800a438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a43a:	f7fe fe47 	bl	80090cc <move_window>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d137      	bne.n	800a4b4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	2200      	movs	r2, #0
 800a448:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	3330      	adds	r3, #48	; 0x30
 800a44e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fb8a 	bl	8008b6c <ld_word>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a460:	429a      	cmp	r2, r3
 800a462:	d127      	bne.n	800a4b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	3330      	adds	r3, #48	; 0x30
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe fb97 	bl	8008b9c <ld_dword>
 800a46e:	4602      	mov	r2, r0
 800a470:	4b1b      	ldr	r3, [pc, #108]	; (800a4e0 <find_volume+0x48c>)
 800a472:	429a      	cmp	r2, r3
 800a474:	d11e      	bne.n	800a4b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	3330      	adds	r3, #48	; 0x30
 800a47a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fb8c 	bl	8008b9c <ld_dword>
 800a484:	4602      	mov	r2, r0
 800a486:	4b17      	ldr	r3, [pc, #92]	; (800a4e4 <find_volume+0x490>)
 800a488:	429a      	cmp	r2, r3
 800a48a:	d113      	bne.n	800a4b4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	3330      	adds	r3, #48	; 0x30
 800a490:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe fb81 	bl	8008b9c <ld_dword>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	3330      	adds	r3, #48	; 0x30
 800a4a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fb77 	bl	8008b9c <ld_dword>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a4ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <find_volume+0x494>)
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <find_volume+0x494>)
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <find_volume+0x494>)
 800a4ca:	881a      	ldrh	r2, [r3, #0]
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a4d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4d2:	f7fe fd93 	bl	8008ffc <clear_lock>
#endif
	return FR_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3758      	adds	r7, #88	; 0x58
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	41615252 	.word	0x41615252
 800a4e4:	61417272 	.word	0x61417272
 800a4e8:	200100bc 	.word	0x200100bc

0800a4ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a4f6:	2309      	movs	r3, #9
 800a4f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01c      	beq.n	800a53a <validate+0x4e>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d018      	beq.n	800a53a <validate+0x4e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d013      	beq.n	800a53a <validate+0x4e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	889a      	ldrh	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	88db      	ldrh	r3, [r3, #6]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d10c      	bne.n	800a53a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fa82 	bl	8008a30 <disk_status>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <validate+0x4e>
			res = FR_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <validate+0x5a>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	e000      	b.n	800a548 <validate+0x5c>
 800a546:	2300      	movs	r3, #0
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	6013      	str	r3, [r2, #0]
	return res;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4613      	mov	r3, r2
 800a564:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a56a:	f107 0310 	add.w	r3, r7, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fcd5 	bl	8009f1e <get_ldnumber>
 800a574:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	da01      	bge.n	800a580 <f_mount+0x28>
 800a57c:	230b      	movs	r3, #11
 800a57e:	e02b      	b.n	800a5d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a580:	4a17      	ldr	r2, [pc, #92]	; (800a5e0 <f_mount+0x88>)
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a588:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a590:	69b8      	ldr	r0, [r7, #24]
 800a592:	f7fe fd33 	bl	8008ffc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2200      	movs	r2, #0
 800a59a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	490d      	ldr	r1, [pc, #52]	; (800a5e0 <f_mount+0x88>)
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <f_mount+0x66>
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d001      	beq.n	800a5c2 <f_mount+0x6a>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e00a      	b.n	800a5d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a5c2:	f107 010c 	add.w	r1, r7, #12
 800a5c6:	f107 0308 	add.w	r3, r7, #8
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7ff fd41 	bl	800a054 <find_volume>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	200100b8 	.word	0x200100b8

0800a5e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b098      	sub	sp, #96	; 0x60
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <f_open+0x18>
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	e1ad      	b.n	800a958 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a602:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a604:	79fa      	ldrb	r2, [r7, #7]
 800a606:	f107 0110 	add.w	r1, r7, #16
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fd20 	bl	800a054 <find_volume>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a61a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f040 8191 	bne.w	800a946 <f_open+0x362>
		dj.obj.fs = fs;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	f107 0314 	add.w	r3, r7, #20
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff fc03 	bl	8009e3c <follow_path>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a63c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a640:	2b00      	cmp	r3, #0
 800a642:	d11a      	bne.n	800a67a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a644:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a648:	b25b      	sxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	da03      	bge.n	800a656 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a64e:	2306      	movs	r3, #6
 800a650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a654:	e011      	b.n	800a67a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	f023 0301 	bic.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bf14      	ite	ne
 800a660:	2301      	movne	r3, #1
 800a662:	2300      	moveq	r3, #0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	f107 0314 	add.w	r3, r7, #20
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fb7c 	bl	8008d6c <chk_lock>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	f003 031c 	and.w	r3, r3, #28
 800a680:	2b00      	cmp	r3, #0
 800a682:	d07f      	beq.n	800a784 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d017      	beq.n	800a6bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a68c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a690:	2b04      	cmp	r3, #4
 800a692:	d10e      	bne.n	800a6b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a694:	f7fe fbc6 	bl	8008e24 <enq_lock>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d006      	beq.n	800a6ac <f_open+0xc8>
 800a69e:	f107 0314 	add.w	r3, r7, #20
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff faa5 	bl	8009bf2 <dir_register>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	e000      	b.n	800a6ae <f_open+0xca>
 800a6ac:	2312      	movs	r3, #18
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	f043 0308 	orr.w	r3, r3, #8
 800a6b8:	71fb      	strb	r3, [r7, #7]
 800a6ba:	e010      	b.n	800a6de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a6bc:	7ebb      	ldrb	r3, [r7, #26]
 800a6be:	f003 0311 	and.w	r3, r3, #17
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <f_open+0xea>
					res = FR_DENIED;
 800a6c6:	2307      	movs	r3, #7
 800a6c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6cc:	e007      	b.n	800a6de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <f_open+0xfa>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a6de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d168      	bne.n	800a7b8 <f_open+0x1d4>
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	f003 0308 	and.w	r3, r3, #8
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d063      	beq.n	800a7b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a6f0:	f7fb f9a6 	bl	8005a40 <get_fattime>
 800a6f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	330e      	adds	r3, #14
 800a6fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fe fa8b 	bl	8008c18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a704:	3316      	adds	r3, #22
 800a706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fa85 	bl	8008c18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a710:	330b      	adds	r3, #11
 800a712:	2220      	movs	r2, #32
 800a714:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff f9d4 	bl	8009aca <ld_clust>
 800a722:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a728:	2200      	movs	r2, #0
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff f9ec 	bl	8009b08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	331c      	adds	r3, #28
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fa6e 	bl	8008c18 <st_dword>
					fs->wflag = 1;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2201      	movs	r2, #1
 800a740:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d037      	beq.n	800a7b8 <f_open+0x1d4>
						dw = fs->winsect;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a74e:	f107 0314 	add.w	r3, r7, #20
 800a752:	2200      	movs	r2, #0
 800a754:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe feff 	bl	800955a <remove_chain>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a766:	2b00      	cmp	r3, #0
 800a768:	d126      	bne.n	800a7b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fcac 	bl	80090cc <move_window>
 800a774:	4603      	mov	r3, r0
 800a776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a77e:	3a01      	subs	r2, #1
 800a780:	60da      	str	r2, [r3, #12]
 800a782:	e019      	b.n	800a7b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d115      	bne.n	800a7b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a78c:	7ebb      	ldrb	r3, [r7, #26]
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a796:	2304      	movs	r3, #4
 800a798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a79c:	e00c      	b.n	800a7b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <f_open+0x1d4>
 800a7a8:	7ebb      	ldrb	r3, [r7, #26]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <f_open+0x1d4>
						res = FR_DENIED;
 800a7b2:	2307      	movs	r3, #7
 800a7b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a7b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d128      	bne.n	800a812 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	f003 0308 	and.w	r3, r3, #8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a7da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	f023 0301 	bic.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bf14      	ite	ne
 800a7ea:	2301      	movne	r3, #1
 800a7ec:	2300      	moveq	r3, #0
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f107 0314 	add.w	r3, r7, #20
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fe fb35 	bl	8008e68 <inc_lock>
 800a7fe:	4602      	mov	r2, r0
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <f_open+0x22e>
 800a80c:	2302      	movs	r3, #2
 800a80e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a816:	2b00      	cmp	r3, #0
 800a818:	f040 8095 	bne.w	800a946 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff f951 	bl	8009aca <ld_clust>
 800a828:	4602      	mov	r2, r0
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	331c      	adds	r3, #28
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe f9b2 	bl	8008b9c <ld_dword>
 800a838:	4602      	mov	r2, r0
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	88da      	ldrh	r2, [r3, #6]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	79fa      	ldrb	r2, [r7, #7]
 800a856:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3330      	adds	r3, #48	; 0x30
 800a86e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a872:	2100      	movs	r1, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe fa1c 	bl	8008cb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d060      	beq.n	800a946 <f_open+0x362>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d05c      	beq.n	800a946 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	68da      	ldr	r2, [r3, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	895b      	ldrh	r3, [r3, #10]
 800a898:	025b      	lsls	r3, r3, #9
 800a89a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a8a8:	e016      	b.n	800a8d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fcc7 	bl	8009242 <get_fat>
 800a8b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a8b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d802      	bhi.n	800a8c2 <f_open+0x2de>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a8c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c8:	d102      	bne.n	800a8d0 <f_open+0x2ec>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	657b      	str	r3, [r7, #84]	; 0x54
 800a8d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d103      	bne.n	800a8e8 <f_open+0x304>
 800a8e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d8e0      	bhi.n	800a8aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a8ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d127      	bne.n	800a946 <f_open+0x362>
 800a8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d022      	beq.n	800a946 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe fc7d 	bl	8009204 <clust2sect>
 800a90a:	6478      	str	r0, [r7, #68]	; 0x44
 800a90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d103      	bne.n	800a91a <f_open+0x336>
						res = FR_INT_ERR;
 800a912:	2302      	movs	r3, #2
 800a914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a918:	e015      	b.n	800a946 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a91c:	0a5a      	lsrs	r2, r3, #9
 800a91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a920:	441a      	add	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	7858      	ldrb	r0, [r3, #1]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a1a      	ldr	r2, [r3, #32]
 800a934:	2301      	movs	r3, #1
 800a936:	f7fe f8bb 	bl	8008ab0 <disk_read>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <f_open+0x362>
 800a940:	2301      	movs	r3, #1
 800a942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <f_open+0x370>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3760      	adds	r7, #96	; 0x60
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08e      	sub	sp, #56	; 0x38
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2200      	movs	r2, #0
 800a976:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f107 0214 	add.w	r2, r7, #20
 800a97e:	4611      	mov	r1, r2
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fdb3 	bl	800a4ec <validate>
 800a986:	4603      	mov	r3, r0
 800a988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a98c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a990:	2b00      	cmp	r3, #0
 800a992:	d107      	bne.n	800a9a4 <f_read+0x44>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	7d5b      	ldrb	r3, [r3, #21]
 800a998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a99c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <f_read+0x4a>
 800a9a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9a8:	e115      	b.n	800abd6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	7d1b      	ldrb	r3, [r3, #20]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <f_read+0x5a>
 800a9b6:	2307      	movs	r3, #7
 800a9b8:	e10d      	b.n	800abd6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	f240 80fe 	bls.w	800abcc <f_read+0x26c>
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a9d4:	e0fa      	b.n	800abcc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f040 80c6 	bne.w	800ab70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	0a5b      	lsrs	r3, r3, #9
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	8952      	ldrh	r2, [r2, #10]
 800a9ee:	3a01      	subs	r2, #1
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d12f      	bne.n	800aa5a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d103      	bne.n	800aa0a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	633b      	str	r3, [r7, #48]	; 0x30
 800aa08:	e013      	b.n	800aa32 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d007      	beq.n	800aa22 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	4619      	mov	r1, r3
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7fe fe9b 	bl	8009754 <clmt_clust>
 800aa1e:	6338      	str	r0, [r7, #48]	; 0x30
 800aa20:	e007      	b.n	800aa32 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fe fc09 	bl	8009242 <get_fat>
 800aa30:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d804      	bhi.n	800aa42 <f_read+0xe2>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	755a      	strb	r2, [r3, #21]
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e0c9      	b.n	800abd6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d104      	bne.n	800aa54 <f_read+0xf4>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	755a      	strb	r2, [r3, #21]
 800aa50:	2301      	movs	r3, #1
 800aa52:	e0c0      	b.n	800abd6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	4619      	mov	r1, r3
 800aa62:	4610      	mov	r0, r2
 800aa64:	f7fe fbce 	bl	8009204 <clust2sect>
 800aa68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <f_read+0x11a>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2202      	movs	r2, #2
 800aa74:	755a      	strb	r2, [r3, #21]
 800aa76:	2302      	movs	r3, #2
 800aa78:	e0ad      	b.n	800abd6 <f_read+0x276>
			sect += csect;
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	4413      	add	r3, r2
 800aa80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	0a5b      	lsrs	r3, r3, #9
 800aa86:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d039      	beq.n	800ab02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa8e:	69fa      	ldr	r2, [r7, #28]
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	4413      	add	r3, r2
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	8952      	ldrh	r2, [r2, #10]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d905      	bls.n	800aaa8 <f_read+0x148>
					cc = fs->csize - csect;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	895b      	ldrh	r3, [r3, #10]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	7858      	ldrb	r0, [r3, #1]
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aab2:	f7fd fffd 	bl	8008ab0 <disk_read>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <f_read+0x166>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2201      	movs	r2, #1
 800aac0:	755a      	strb	r2, [r3, #21]
 800aac2:	2301      	movs	r3, #1
 800aac4:	e087      	b.n	800abd6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	7d1b      	ldrb	r3, [r3, #20]
 800aaca:	b25b      	sxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	da14      	bge.n	800aafa <f_read+0x19a>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a1a      	ldr	r2, [r3, #32]
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aada:	429a      	cmp	r2, r3
 800aadc:	d90d      	bls.n	800aafa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6a1a      	ldr	r2, [r3, #32]
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	025b      	lsls	r3, r3, #9
 800aae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaea:	18d0      	adds	r0, r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	3330      	adds	r3, #48	; 0x30
 800aaf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7fe f8bb 	bl	8008c70 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	025b      	lsls	r3, r3, #9
 800aafe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ab00:	e050      	b.n	800aba4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d02e      	beq.n	800ab6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	7d1b      	ldrb	r3, [r3, #20]
 800ab10:	b25b      	sxtb	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	da18      	bge.n	800ab48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	7858      	ldrb	r0, [r3, #1]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6a1a      	ldr	r2, [r3, #32]
 800ab24:	2301      	movs	r3, #1
 800ab26:	f7fd ffe3 	bl	8008af0 <disk_write>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <f_read+0x1da>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2201      	movs	r2, #1
 800ab34:	755a      	strb	r2, [r3, #21]
 800ab36:	2301      	movs	r3, #1
 800ab38:	e04d      	b.n	800abd6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	7d1b      	ldrb	r3, [r3, #20]
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	7858      	ldrb	r0, [r3, #1]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab52:	2301      	movs	r3, #1
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	f7fd ffab 	bl	8008ab0 <disk_read>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <f_read+0x20a>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2201      	movs	r2, #1
 800ab64:	755a      	strb	r2, [r3, #21]
 800ab66:	2301      	movs	r3, #1
 800ab68:	e035      	b.n	800abd6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	69ba      	ldr	r2, [r7, #24]
 800ab6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ab7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ab7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d901      	bls.n	800ab8a <f_read+0x22a>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab98:	4413      	add	r3, r2
 800ab9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aba0:	f7fe f866 	bl	8008c70 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	4413      	add	r3, r2
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	699a      	ldr	r2, [r3, #24]
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	441a      	add	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	619a      	str	r2, [r3, #24]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	441a      	add	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f47f af01 	bne.w	800a9d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3738      	adds	r7, #56	; 0x38
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b086      	sub	sp, #24
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f107 0208 	add.w	r2, r7, #8
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff fc7c 	bl	800a4ec <validate>
 800abf4:	4603      	mov	r3, r0
 800abf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d168      	bne.n	800acd0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	7d1b      	ldrb	r3, [r3, #20]
 800ac02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d062      	beq.n	800acd0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	7d1b      	ldrb	r3, [r3, #20]
 800ac0e:	b25b      	sxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da15      	bge.n	800ac40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	7858      	ldrb	r0, [r3, #1]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1a      	ldr	r2, [r3, #32]
 800ac22:	2301      	movs	r3, #1
 800ac24:	f7fd ff64 	bl	8008af0 <disk_write>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <f_sync+0x54>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e04f      	b.n	800acd2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7d1b      	ldrb	r3, [r3, #20]
 800ac36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ac40:	f7fa fefe 	bl	8005a40 <get_fattime>
 800ac44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	f7fe fa3c 	bl	80090cc <move_window>
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d138      	bne.n	800acd0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	330b      	adds	r3, #11
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	330b      	adds	r3, #11
 800ac6e:	f042 0220 	orr.w	r2, r2, #32
 800ac72:	b2d2      	uxtb	r2, r2
 800ac74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	68f9      	ldr	r1, [r7, #12]
 800ac82:	f7fe ff41 	bl	8009b08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f103 021c 	add.w	r2, r3, #28
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f7fd ffc0 	bl	8008c18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3316      	adds	r3, #22
 800ac9c:	6939      	ldr	r1, [r7, #16]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fd ffba 	bl	8008c18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3312      	adds	r3, #18
 800aca8:	2100      	movs	r1, #0
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fd ff99 	bl	8008be2 <st_word>
					fs->wflag = 1;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2201      	movs	r2, #1
 800acb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fa35 	bl	8009128 <sync_fs>
 800acbe:	4603      	mov	r3, r0
 800acc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
 800acc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acca:	b2da      	uxtb	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff ff7b 	bl	800abde <f_sync>
 800ace8:	4603      	mov	r3, r0
 800acea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d118      	bne.n	800ad24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f107 0208 	add.w	r2, r7, #8
 800acf8:	4611      	mov	r1, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fbf6 	bl	800a4ec <validate>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10c      	bne.n	800ad24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe f938 	bl	8008f84 <dec_lock>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d102      	bne.n	800ad24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b090      	sub	sp, #64	; 0x40
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ad38:	f107 010c 	add.w	r1, r7, #12
 800ad3c:	1d3b      	adds	r3, r7, #4
 800ad3e:	2200      	movs	r2, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff f987 	bl	800a054 <find_volume>
 800ad46:	4603      	mov	r3, r0
 800ad48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ad4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d11f      	bne.n	800ad94 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	f107 030c 	add.w	r3, r7, #12
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff f86d 	bl	8009e3c <follow_path>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ad68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d111      	bne.n	800ad94 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ad70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad74:	b25b      	sxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	da03      	bge.n	800ad82 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ad7a:	2306      	movs	r3, #6
 800ad7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ad80:	e008      	b.n	800ad94 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <f_stat+0x66>
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe ff61 	bl	8009c56 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ad94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3740      	adds	r7, #64	; 0x40
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	4613      	mov	r3, r2
 800adac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adae:	2301      	movs	r3, #1
 800adb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800adb6:	4b1f      	ldr	r3, [pc, #124]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800adb8:	7a5b      	ldrb	r3, [r3, #9]
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d131      	bne.n	800ae24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800adc0:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800adc2:	7a5b      	ldrb	r3, [r3, #9]
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	461a      	mov	r2, r3
 800adc8:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800adca:	2100      	movs	r1, #0
 800adcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800adce:	4b19      	ldr	r3, [pc, #100]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800add0:	7a5b      	ldrb	r3, [r3, #9]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	4a17      	ldr	r2, [pc, #92]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800adde:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800ade0:	7a5b      	ldrb	r3, [r3, #9]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	4b13      	ldr	r3, [pc, #76]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800ade8:	4413      	add	r3, r2
 800adea:	79fa      	ldrb	r2, [r7, #7]
 800adec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800adee:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800adf0:	7a5b      	ldrb	r3, [r3, #9]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	b2d1      	uxtb	r1, r2
 800adf8:	4a0e      	ldr	r2, [pc, #56]	; (800ae34 <FATFS_LinkDriverEx+0x94>)
 800adfa:	7251      	strb	r1, [r2, #9]
 800adfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800adfe:	7dbb      	ldrb	r3, [r7, #22]
 800ae00:	3330      	adds	r3, #48	; 0x30
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	223a      	movs	r2, #58	; 0x3a
 800ae0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	3302      	adds	r3, #2
 800ae14:	222f      	movs	r2, #47	; 0x2f
 800ae16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3303      	adds	r3, #3
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	200100e0 	.word	0x200100e0

0800ae38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae42:	2200      	movs	r2, #0
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff ffaa 	bl	800ada0 <FATFS_LinkDriverEx>
 800ae4c:	4603      	mov	r3, r0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	490e      	ldr	r1, [pc, #56]	; (800ae98 <MX_USB_HOST_Init+0x40>)
 800ae60:	480e      	ldr	r0, [pc, #56]	; (800ae9c <MX_USB_HOST_Init+0x44>)
 800ae62:	f7fc fa8b 	bl	800737c <USBH_Init>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ae6c:	f7f5 fe62 	bl	8000b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ae70:	490b      	ldr	r1, [pc, #44]	; (800aea0 <MX_USB_HOST_Init+0x48>)
 800ae72:	480a      	ldr	r0, [pc, #40]	; (800ae9c <MX_USB_HOST_Init+0x44>)
 800ae74:	f7fc fb10 	bl	8007498 <USBH_RegisterClass>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ae7e:	f7f5 fe59 	bl	8000b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ae82:	4806      	ldr	r0, [pc, #24]	; (800ae9c <MX_USB_HOST_Init+0x44>)
 800ae84:	f7fc fb94 	bl	80075b0 <USBH_Start>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae8e:	f7f5 fe51 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae92:	bf00      	nop
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	0800aeb9 	.word	0x0800aeb9
 800ae9c:	20010cec 	.word	0x20010cec
 800aea0:	2000000c 	.word	0x2000000c

0800aea4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aea8:	4802      	ldr	r0, [pc, #8]	; (800aeb4 <MX_USB_HOST_Process+0x10>)
 800aeaa:	f7fc fb91 	bl	80075d0 <USBH_Process>
}
 800aeae:	bf00      	nop
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20010cec 	.word	0x20010cec

0800aeb8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	d819      	bhi.n	800af00 <USBH_UserProcess+0x48>
 800aecc:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <USBH_UserProcess+0x1c>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800af01 	.word	0x0800af01
 800aed8:	0800aef1 	.word	0x0800aef1
 800aedc:	0800af01 	.word	0x0800af01
 800aee0:	0800aef9 	.word	0x0800aef9
 800aee4:	0800aee9 	.word	0x0800aee9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aee8:	4b09      	ldr	r3, [pc, #36]	; (800af10 <USBH_UserProcess+0x58>)
 800aeea:	2203      	movs	r2, #3
 800aeec:	701a      	strb	r2, [r3, #0]
  break;
 800aeee:	e008      	b.n	800af02 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aef0:	4b07      	ldr	r3, [pc, #28]	; (800af10 <USBH_UserProcess+0x58>)
 800aef2:	2202      	movs	r2, #2
 800aef4:	701a      	strb	r2, [r3, #0]
  break;
 800aef6:	e004      	b.n	800af02 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aef8:	4b05      	ldr	r3, [pc, #20]	; (800af10 <USBH_UserProcess+0x58>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	701a      	strb	r2, [r3, #0]
  break;
 800aefe:	e000      	b.n	800af02 <USBH_UserProcess+0x4a>

  default:
  break;
 800af00:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	200100ec 	.word	0x200100ec

0800af14 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af1c:	f107 0314 	add.w	r3, r7, #20
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	609a      	str	r2, [r3, #8]
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af34:	d149      	bne.n	800afca <HAL_HCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af36:	4b27      	ldr	r3, [pc, #156]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	4a26      	ldr	r2, [pc, #152]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	6313      	str	r3, [r2, #48]	; 0x30
 800af42:	4b24      	ldr	r3, [pc, #144]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800af4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800af52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af54:	2302      	movs	r3, #2
 800af56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af5c:	2303      	movs	r3, #3
 800af5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af60:	230a      	movs	r3, #10
 800af62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af64:	f107 0314 	add.w	r3, r7, #20
 800af68:	4619      	mov	r1, r3
 800af6a:	481b      	ldr	r0, [pc, #108]	; (800afd8 <HAL_HCD_MspInit+0xc4>)
 800af6c:	f7f6 fc86 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800af70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af76:	2300      	movs	r3, #0
 800af78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800af7e:	f107 0314 	add.w	r3, r7, #20
 800af82:	4619      	mov	r1, r3
 800af84:	4814      	ldr	r0, [pc, #80]	; (800afd8 <HAL_HCD_MspInit+0xc4>)
 800af86:	f7f6 fc79 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800af8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8e:	4a11      	ldr	r2, [pc, #68]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800af90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af94:	6353      	str	r3, [r2, #52]	; 0x34
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800af98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	4a0b      	ldr	r2, [pc, #44]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800afa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afac:	6453      	str	r3, [r2, #68]	; 0x44
 800afae:	4b09      	ldr	r3, [pc, #36]	; (800afd4 <HAL_HCD_MspInit+0xc0>)
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afb6:	60bb      	str	r3, [r7, #8]
 800afb8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800afba:	2200      	movs	r2, #0
 800afbc:	2100      	movs	r1, #0
 800afbe:	2043      	movs	r0, #67	; 0x43
 800afc0:	f7f6 f8b3 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afc4:	2043      	movs	r0, #67	; 0x43
 800afc6:	f7f6 f8cc 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afca:	bf00      	nop
 800afcc:	3728      	adds	r7, #40	; 0x28
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	40023800 	.word	0x40023800
 800afd8:	40020000 	.word	0x40020000

0800afdc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afea:	4618      	mov	r0, r3
 800afec:	f7fc fec3 	bl	8007d76 <USBH_LL_IncTimer>
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b006:	4618      	mov	r0, r3
 800b008:	f7fc fefb 	bl	8007e02 <USBH_LL_Connect>
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b022:	4618      	mov	r0, r3
 800b024:	f7fc ff04 	bl	8007e30 <USBH_LL_Disconnect>
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
 800b03c:	4613      	mov	r3, r2
 800b03e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fc feb5 	bl	8007dca <USBH_LL_PortEnabled>
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b076:	4618      	mov	r0, r3
 800b078:	f7fc feb5 	bl	8007de6 <USBH_LL_PortDisabled>
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b092:	2b01      	cmp	r3, #1
 800b094:	d12a      	bne.n	800b0ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b096:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a15      	ldr	r2, [pc, #84]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0a2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b0ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b0ae:	4b12      	ldr	r3, [pc, #72]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b0b4:	4b10      	ldr	r3, [pc, #64]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b0ba:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b0c0:	4b0d      	ldr	r3, [pc, #52]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b0c6:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b0cc:	480a      	ldr	r0, [pc, #40]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0ce:	f7f6 fdbc 	bl	8001c4a <HAL_HCD_Init>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b0d8:	f7f5 fd2c 	bl	8000b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b0dc:	4806      	ldr	r0, [pc, #24]	; (800b0f8 <USBH_LL_Init+0x74>)
 800b0de:	f7f7 f9bf 	bl	8002460 <HAL_HCD_GetCurrentFrame>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7fc fe36 	bl	8007d58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	200110c4 	.word	0x200110c4

0800b0fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b112:	4618      	mov	r0, r3
 800b114:	f7f7 f92c 	bl	8002370 <HAL_HCD_Start>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f990 	bl	800b444 <USBH_Get_USB_Status>
 800b124:	4603      	mov	r3, r0
 800b126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b128:	7bbb      	ldrb	r3, [r7, #14]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f7 f934 	bl	80023b6 <HAL_HCD_Stop>
 800b14e:	4603      	mov	r3, r0
 800b150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f975 	bl	800b444 <USBH_Get_USB_Status>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b170:	2301      	movs	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7f7 f97e 	bl	800247c <HAL_HCD_GetCurrentSpeed>
 800b180:	4603      	mov	r3, r0
 800b182:	2b01      	cmp	r3, #1
 800b184:	d007      	beq.n	800b196 <USBH_LL_GetSpeed+0x2e>
 800b186:	2b01      	cmp	r3, #1
 800b188:	d302      	bcc.n	800b190 <USBH_LL_GetSpeed+0x28>
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d006      	beq.n	800b19c <USBH_LL_GetSpeed+0x34>
 800b18e:	e008      	b.n	800b1a2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
    break;
 800b194:	e008      	b.n	800b1a8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b196:	2301      	movs	r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]
    break;
 800b19a:	e005      	b.n	800b1a8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b19c:	2302      	movs	r3, #2
 800b19e:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a0:	e002      	b.n	800b1a8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a6:	bf00      	nop
  }
  return  speed;
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f7 f911 	bl	80023f0 <HAL_HCD_ResetPort>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 f935 	bl	800b444 <USBH_Get_USB_Status>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1fa:	78fa      	ldrb	r2, [r7, #3]
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7f7 f919 	bl	8002436 <HAL_HCD_HC_GetXferCount>
 800b204:	4603      	mov	r3, r0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b20e:	b590      	push	{r4, r7, lr}
 800b210:	b089      	sub	sp, #36	; 0x24
 800b212:	af04      	add	r7, sp, #16
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	4608      	mov	r0, r1
 800b218:	4611      	mov	r1, r2
 800b21a:	461a      	mov	r2, r3
 800b21c:	4603      	mov	r3, r0
 800b21e:	70fb      	strb	r3, [r7, #3]
 800b220:	460b      	mov	r3, r1
 800b222:	70bb      	strb	r3, [r7, #2]
 800b224:	4613      	mov	r3, r2
 800b226:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b236:	787c      	ldrb	r4, [r7, #1]
 800b238:	78ba      	ldrb	r2, [r7, #2]
 800b23a:	78f9      	ldrb	r1, [r7, #3]
 800b23c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	4623      	mov	r3, r4
 800b24e:	f7f6 fd5e 	bl	8001d0e <HAL_HCD_HC_Init>
 800b252:	4603      	mov	r3, r0
 800b254:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b256:	7bfb      	ldrb	r3, [r7, #15]
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 f8f3 	bl	800b444 <USBH_Get_USB_Status>
 800b25e:	4603      	mov	r3, r0
 800b260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b262:	7bbb      	ldrb	r3, [r7, #14]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd90      	pop	{r4, r7, pc}

0800b26c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b286:	78fa      	ldrb	r2, [r7, #3]
 800b288:	4611      	mov	r1, r2
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f6 fdd7 	bl	8001e3e <HAL_HCD_HC_Halt>
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	4618      	mov	r0, r3
 800b298:	f000 f8d4 	bl	800b444 <USBH_Get_USB_Status>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b2aa:	b590      	push	{r4, r7, lr}
 800b2ac:	b089      	sub	sp, #36	; 0x24
 800b2ae:	af04      	add	r7, sp, #16
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	70fb      	strb	r3, [r7, #3]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70bb      	strb	r3, [r7, #2]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b2d2:	787c      	ldrb	r4, [r7, #1]
 800b2d4:	78ba      	ldrb	r2, [r7, #2]
 800b2d6:	78f9      	ldrb	r1, [r7, #3]
 800b2d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b2dc:	9303      	str	r3, [sp, #12]
 800b2de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b2e0:	9302      	str	r3, [sp, #8]
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	4623      	mov	r3, r4
 800b2ee:	f7f6 fdc9 	bl	8001e84 <HAL_HCD_HC_SubmitRequest>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f8a3 	bl	800b444 <USBH_Get_USB_Status>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b302:	7bbb      	ldrb	r3, [r7, #14]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd90      	pop	{r4, r7, pc}

0800b30c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b31e:	78fa      	ldrb	r2, [r7, #3]
 800b320:	4611      	mov	r1, r2
 800b322:	4618      	mov	r0, r3
 800b324:	f7f7 f872 	bl	800240c <HAL_HCD_HC_GetURBState>
 800b328:	4603      	mov	r3, r0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b344:	2b01      	cmp	r3, #1
 800b346:	d103      	bne.n	800b350 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f8a6 	bl	800b49c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b350:	20c8      	movs	r0, #200	; 0xc8
 800b352:	f7f5 fded 	bl	8000f30 <HAL_Delay>
  return USBH_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
 800b36c:	4613      	mov	r3, r2
 800b36e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b376:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b378:	78fa      	ldrb	r2, [r7, #3]
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	4613      	mov	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	440b      	add	r3, r1
 800b386:	333b      	adds	r3, #59	; 0x3b
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00a      	beq.n	800b3a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b38e:	78fa      	ldrb	r2, [r7, #3]
 800b390:	68f9      	ldr	r1, [r7, #12]
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	440b      	add	r3, r1
 800b39c:	3350      	adds	r3, #80	; 0x50
 800b39e:	78ba      	ldrb	r2, [r7, #2]
 800b3a0:	701a      	strb	r2, [r3, #0]
 800b3a2:	e009      	b.n	800b3b8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b3a4:	78fa      	ldrb	r2, [r7, #3]
 800b3a6:	68f9      	ldr	r1, [r7, #12]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	440b      	add	r3, r1
 800b3b2:	3351      	adds	r3, #81	; 0x51
 800b3b4:	78ba      	ldrb	r2, [r7, #2]
 800b3b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3dc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b3de:	78fa      	ldrb	r2, [r7, #3]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	00db      	lsls	r3, r3, #3
 800b3ea:	440b      	add	r3, r1
 800b3ec:	333b      	adds	r3, #59	; 0x3b
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00a      	beq.n	800b40a <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b3f4:	78fa      	ldrb	r2, [r7, #3]
 800b3f6:	68b9      	ldr	r1, [r7, #8]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	440b      	add	r3, r1
 800b402:	3350      	adds	r3, #80	; 0x50
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	73fb      	strb	r3, [r7, #15]
 800b408:	e009      	b.n	800b41e <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b40a:	78fa      	ldrb	r2, [r7, #3]
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	00db      	lsls	r3, r3, #3
 800b416:	440b      	add	r3, r1
 800b418:	3351      	adds	r3, #81	; 0x51
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7f5 fd7b 	bl	8000f30 <HAL_Delay>
}
 800b43a:	bf00      	nop
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	2b03      	cmp	r3, #3
 800b456:	d817      	bhi.n	800b488 <USBH_Get_USB_Status+0x44>
 800b458:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <USBH_Get_USB_Status+0x1c>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b471 	.word	0x0800b471
 800b464:	0800b477 	.word	0x0800b477
 800b468:	0800b47d 	.word	0x0800b47d
 800b46c:	0800b483 	.word	0x0800b483
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	73fb      	strb	r3, [r7, #15]
    break;
 800b474:	e00b      	b.n	800b48e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b476:	2302      	movs	r3, #2
 800b478:	73fb      	strb	r3, [r7, #15]
    break;
 800b47a:	e008      	b.n	800b48e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
    break;
 800b480:	e005      	b.n	800b48e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b482:	2302      	movs	r3, #2
 800b484:	73fb      	strb	r3, [r7, #15]
    break;
 800b486:	e002      	b.n	800b48e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b488:	2302      	movs	r3, #2
 800b48a:	73fb      	strb	r3, [r7, #15]
    break;
 800b48c:	bf00      	nop
  }
  return usb_status;
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	73fb      	strb	r3, [r7, #15]
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
 // HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
}
 800b4b4:	e001      	b.n	800b4ba <MX_DriverVbusFS+0x1e>
    data = GPIO_PIN_RESET;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73fb      	strb	r3, [r7, #15]
}
 800b4ba:	bf00      	nop
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <BootAppImage>:
#define uint32_t unsigned int
#define uint8_t unsigned char


void BootAppImage(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	75fb      	strb	r3, [r7, #23]
	uint32_t msp_value = *(volatile uint32_t *)0x8100000;
 800b4d2:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	613b      	str	r3, [r7, #16]
	if(msp_value == 0xFFFFFFFF)
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e0:	d02a      	beq.n	800b538 <BootAppImage+0x70>
	{
		return;
	}
	uint32_t resest_address = *(volatile uint32_t *)0x8100004;
 800b4e2:	4b17      	ldr	r3, [pc, #92]	; (800b540 <BootAppImage+0x78>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f383 8808 	msr	MSP, r3
	__set_MSP(msp_value);
	AppEntry Jump = (void *)resest_address;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4f6:	b672      	cpsid	i
	__disable_irq();
	SysTick->CTRL = 0;
 800b4f8:	4b12      	ldr	r3, [pc, #72]	; (800b544 <BootAppImage+0x7c>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
	HAL_RCC_DeInit();
 800b4fe:	f7f8 f8e5 	bl	80036cc <HAL_RCC_DeInit>
	for (i=0;i<5;i++)
 800b502:	2300      	movs	r3, #0
 800b504:	75fb      	strb	r3, [r7, #23]
 800b506:	e010      	b.n	800b52a <BootAppImage+0x62>
	{
		NVIC->ICER[i]=0xFFFFFFFF;
 800b508:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <BootAppImage+0x80>)
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	3320      	adds	r3, #32
 800b50e:	f04f 31ff 	mov.w	r1, #4294967295
 800b512:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i]=0xFFFFFFFF;
 800b516:	4a0c      	ldr	r2, [pc, #48]	; (800b548 <BootAppImage+0x80>)
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	3360      	adds	r3, #96	; 0x60
 800b51c:	f04f 31ff 	mov.w	r1, #4294967295
 800b520:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<5;i++)
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	3301      	adds	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d9eb      	bls.n	800b508 <BootAppImage+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
 800b530:	b662      	cpsie	i
	}
	__enable_irq();
	Jump();
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	4798      	blx	r3
 800b536:	e000      	b.n	800b53a <BootAppImage+0x72>
		return;
 800b538:	bf00      	nop
}
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	08100004 	.word	0x08100004
 800b544:	e000e010 	.word	0xe000e010
 800b548:	e000e100 	.word	0xe000e100

0800b54c <__errno>:
 800b54c:	4b01      	ldr	r3, [pc, #4]	; (800b554 <__errno+0x8>)
 800b54e:	6818      	ldr	r0, [r3, #0]
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	2000002c 	.word	0x2000002c

0800b558 <__libc_init_array>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	4e0d      	ldr	r6, [pc, #52]	; (800b590 <__libc_init_array+0x38>)
 800b55c:	4c0d      	ldr	r4, [pc, #52]	; (800b594 <__libc_init_array+0x3c>)
 800b55e:	1ba4      	subs	r4, r4, r6
 800b560:	10a4      	asrs	r4, r4, #2
 800b562:	2500      	movs	r5, #0
 800b564:	42a5      	cmp	r5, r4
 800b566:	d109      	bne.n	800b57c <__libc_init_array+0x24>
 800b568:	4e0b      	ldr	r6, [pc, #44]	; (800b598 <__libc_init_array+0x40>)
 800b56a:	4c0c      	ldr	r4, [pc, #48]	; (800b59c <__libc_init_array+0x44>)
 800b56c:	f000 ff84 	bl	800c478 <_init>
 800b570:	1ba4      	subs	r4, r4, r6
 800b572:	10a4      	asrs	r4, r4, #2
 800b574:	2500      	movs	r5, #0
 800b576:	42a5      	cmp	r5, r4
 800b578:	d105      	bne.n	800b586 <__libc_init_array+0x2e>
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b580:	4798      	blx	r3
 800b582:	3501      	adds	r5, #1
 800b584:	e7ee      	b.n	800b564 <__libc_init_array+0xc>
 800b586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b58a:	4798      	blx	r3
 800b58c:	3501      	adds	r5, #1
 800b58e:	e7f2      	b.n	800b576 <__libc_init_array+0x1e>
 800b590:	0800c7cc 	.word	0x0800c7cc
 800b594:	0800c7cc 	.word	0x0800c7cc
 800b598:	0800c7cc 	.word	0x0800c7cc
 800b59c:	0800c7d0 	.word	0x0800c7d0

0800b5a0 <malloc>:
 800b5a0:	4b02      	ldr	r3, [pc, #8]	; (800b5ac <malloc+0xc>)
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	f000 b86d 	b.w	800b684 <_malloc_r>
 800b5aa:	bf00      	nop
 800b5ac:	2000002c 	.word	0x2000002c

0800b5b0 <free>:
 800b5b0:	4b02      	ldr	r3, [pc, #8]	; (800b5bc <free+0xc>)
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	f000 b817 	b.w	800b5e8 <_free_r>
 800b5ba:	bf00      	nop
 800b5bc:	2000002c 	.word	0x2000002c

0800b5c0 <memcpy>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	1e43      	subs	r3, r0, #1
 800b5c4:	440a      	add	r2, r1
 800b5c6:	4291      	cmp	r1, r2
 800b5c8:	d100      	bne.n	800b5cc <memcpy+0xc>
 800b5ca:	bd10      	pop	{r4, pc}
 800b5cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d4:	e7f7      	b.n	800b5c6 <memcpy+0x6>

0800b5d6 <memset>:
 800b5d6:	4402      	add	r2, r0
 800b5d8:	4603      	mov	r3, r0
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d100      	bne.n	800b5e0 <memset+0xa>
 800b5de:	4770      	bx	lr
 800b5e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e4:	e7f9      	b.n	800b5da <memset+0x4>
	...

0800b5e8 <_free_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	d045      	beq.n	800b67c <_free_r+0x94>
 800b5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f4:	1f0c      	subs	r4, r1, #4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	bfb8      	it	lt
 800b5fa:	18e4      	addlt	r4, r4, r3
 800b5fc:	f000 fbc6 	bl	800bd8c <__malloc_lock>
 800b600:	4a1f      	ldr	r2, [pc, #124]	; (800b680 <_free_r+0x98>)
 800b602:	6813      	ldr	r3, [r2, #0]
 800b604:	4610      	mov	r0, r2
 800b606:	b933      	cbnz	r3, 800b616 <_free_r+0x2e>
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	6014      	str	r4, [r2, #0]
 800b60c:	4628      	mov	r0, r5
 800b60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b612:	f000 bbbc 	b.w	800bd8e <__malloc_unlock>
 800b616:	42a3      	cmp	r3, r4
 800b618:	d90c      	bls.n	800b634 <_free_r+0x4c>
 800b61a:	6821      	ldr	r1, [r4, #0]
 800b61c:	1862      	adds	r2, r4, r1
 800b61e:	4293      	cmp	r3, r2
 800b620:	bf04      	itt	eq
 800b622:	681a      	ldreq	r2, [r3, #0]
 800b624:	685b      	ldreq	r3, [r3, #4]
 800b626:	6063      	str	r3, [r4, #4]
 800b628:	bf04      	itt	eq
 800b62a:	1852      	addeq	r2, r2, r1
 800b62c:	6022      	streq	r2, [r4, #0]
 800b62e:	6004      	str	r4, [r0, #0]
 800b630:	e7ec      	b.n	800b60c <_free_r+0x24>
 800b632:	4613      	mov	r3, r2
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	b10a      	cbz	r2, 800b63c <_free_r+0x54>
 800b638:	42a2      	cmp	r2, r4
 800b63a:	d9fa      	bls.n	800b632 <_free_r+0x4a>
 800b63c:	6819      	ldr	r1, [r3, #0]
 800b63e:	1858      	adds	r0, r3, r1
 800b640:	42a0      	cmp	r0, r4
 800b642:	d10b      	bne.n	800b65c <_free_r+0x74>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	4401      	add	r1, r0
 800b648:	1858      	adds	r0, r3, r1
 800b64a:	4282      	cmp	r2, r0
 800b64c:	6019      	str	r1, [r3, #0]
 800b64e:	d1dd      	bne.n	800b60c <_free_r+0x24>
 800b650:	6810      	ldr	r0, [r2, #0]
 800b652:	6852      	ldr	r2, [r2, #4]
 800b654:	605a      	str	r2, [r3, #4]
 800b656:	4401      	add	r1, r0
 800b658:	6019      	str	r1, [r3, #0]
 800b65a:	e7d7      	b.n	800b60c <_free_r+0x24>
 800b65c:	d902      	bls.n	800b664 <_free_r+0x7c>
 800b65e:	230c      	movs	r3, #12
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	e7d3      	b.n	800b60c <_free_r+0x24>
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	1821      	adds	r1, r4, r0
 800b668:	428a      	cmp	r2, r1
 800b66a:	bf04      	itt	eq
 800b66c:	6811      	ldreq	r1, [r2, #0]
 800b66e:	6852      	ldreq	r2, [r2, #4]
 800b670:	6062      	str	r2, [r4, #4]
 800b672:	bf04      	itt	eq
 800b674:	1809      	addeq	r1, r1, r0
 800b676:	6021      	streq	r1, [r4, #0]
 800b678:	605c      	str	r4, [r3, #4]
 800b67a:	e7c7      	b.n	800b60c <_free_r+0x24>
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop
 800b680:	200100f0 	.word	0x200100f0

0800b684 <_malloc_r>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	1ccd      	adds	r5, r1, #3
 800b688:	f025 0503 	bic.w	r5, r5, #3
 800b68c:	3508      	adds	r5, #8
 800b68e:	2d0c      	cmp	r5, #12
 800b690:	bf38      	it	cc
 800b692:	250c      	movcc	r5, #12
 800b694:	2d00      	cmp	r5, #0
 800b696:	4606      	mov	r6, r0
 800b698:	db01      	blt.n	800b69e <_malloc_r+0x1a>
 800b69a:	42a9      	cmp	r1, r5
 800b69c:	d903      	bls.n	800b6a6 <_malloc_r+0x22>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	bd70      	pop	{r4, r5, r6, pc}
 800b6a6:	f000 fb71 	bl	800bd8c <__malloc_lock>
 800b6aa:	4a21      	ldr	r2, [pc, #132]	; (800b730 <_malloc_r+0xac>)
 800b6ac:	6814      	ldr	r4, [r2, #0]
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	b991      	cbnz	r1, 800b6d8 <_malloc_r+0x54>
 800b6b2:	4c20      	ldr	r4, [pc, #128]	; (800b734 <_malloc_r+0xb0>)
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	b91b      	cbnz	r3, 800b6c0 <_malloc_r+0x3c>
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f000 f8b9 	bl	800b830 <_sbrk_r>
 800b6be:	6020      	str	r0, [r4, #0]
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 f8b4 	bl	800b830 <_sbrk_r>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d124      	bne.n	800b716 <_malloc_r+0x92>
 800b6cc:	230c      	movs	r3, #12
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f000 fb5c 	bl	800bd8e <__malloc_unlock>
 800b6d6:	e7e4      	b.n	800b6a2 <_malloc_r+0x1e>
 800b6d8:	680b      	ldr	r3, [r1, #0]
 800b6da:	1b5b      	subs	r3, r3, r5
 800b6dc:	d418      	bmi.n	800b710 <_malloc_r+0x8c>
 800b6de:	2b0b      	cmp	r3, #11
 800b6e0:	d90f      	bls.n	800b702 <_malloc_r+0x7e>
 800b6e2:	600b      	str	r3, [r1, #0]
 800b6e4:	50cd      	str	r5, [r1, r3]
 800b6e6:	18cc      	adds	r4, r1, r3
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f000 fb50 	bl	800bd8e <__malloc_unlock>
 800b6ee:	f104 000b 	add.w	r0, r4, #11
 800b6f2:	1d23      	adds	r3, r4, #4
 800b6f4:	f020 0007 	bic.w	r0, r0, #7
 800b6f8:	1ac3      	subs	r3, r0, r3
 800b6fa:	d0d3      	beq.n	800b6a4 <_malloc_r+0x20>
 800b6fc:	425a      	negs	r2, r3
 800b6fe:	50e2      	str	r2, [r4, r3]
 800b700:	e7d0      	b.n	800b6a4 <_malloc_r+0x20>
 800b702:	428c      	cmp	r4, r1
 800b704:	684b      	ldr	r3, [r1, #4]
 800b706:	bf16      	itet	ne
 800b708:	6063      	strne	r3, [r4, #4]
 800b70a:	6013      	streq	r3, [r2, #0]
 800b70c:	460c      	movne	r4, r1
 800b70e:	e7eb      	b.n	800b6e8 <_malloc_r+0x64>
 800b710:	460c      	mov	r4, r1
 800b712:	6849      	ldr	r1, [r1, #4]
 800b714:	e7cc      	b.n	800b6b0 <_malloc_r+0x2c>
 800b716:	1cc4      	adds	r4, r0, #3
 800b718:	f024 0403 	bic.w	r4, r4, #3
 800b71c:	42a0      	cmp	r0, r4
 800b71e:	d005      	beq.n	800b72c <_malloc_r+0xa8>
 800b720:	1a21      	subs	r1, r4, r0
 800b722:	4630      	mov	r0, r6
 800b724:	f000 f884 	bl	800b830 <_sbrk_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d0cf      	beq.n	800b6cc <_malloc_r+0x48>
 800b72c:	6025      	str	r5, [r4, #0]
 800b72e:	e7db      	b.n	800b6e8 <_malloc_r+0x64>
 800b730:	200100f0 	.word	0x200100f0
 800b734:	200100f4 	.word	0x200100f4

0800b738 <iprintf>:
 800b738:	b40f      	push	{r0, r1, r2, r3}
 800b73a:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <iprintf+0x2c>)
 800b73c:	b513      	push	{r0, r1, r4, lr}
 800b73e:	681c      	ldr	r4, [r3, #0]
 800b740:	b124      	cbz	r4, 800b74c <iprintf+0x14>
 800b742:	69a3      	ldr	r3, [r4, #24]
 800b744:	b913      	cbnz	r3, 800b74c <iprintf+0x14>
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fa32 	bl	800bbb0 <__sinit>
 800b74c:	ab05      	add	r3, sp, #20
 800b74e:	9a04      	ldr	r2, [sp, #16]
 800b750:	68a1      	ldr	r1, [r4, #8]
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fb45 	bl	800bde4 <_vfiprintf_r>
 800b75a:	b002      	add	sp, #8
 800b75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b760:	b004      	add	sp, #16
 800b762:	4770      	bx	lr
 800b764:	2000002c 	.word	0x2000002c

0800b768 <_puts_r>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	460e      	mov	r6, r1
 800b76c:	4605      	mov	r5, r0
 800b76e:	b118      	cbz	r0, 800b778 <_puts_r+0x10>
 800b770:	6983      	ldr	r3, [r0, #24]
 800b772:	b90b      	cbnz	r3, 800b778 <_puts_r+0x10>
 800b774:	f000 fa1c 	bl	800bbb0 <__sinit>
 800b778:	69ab      	ldr	r3, [r5, #24]
 800b77a:	68ac      	ldr	r4, [r5, #8]
 800b77c:	b913      	cbnz	r3, 800b784 <_puts_r+0x1c>
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 fa16 	bl	800bbb0 <__sinit>
 800b784:	4b23      	ldr	r3, [pc, #140]	; (800b814 <_puts_r+0xac>)
 800b786:	429c      	cmp	r4, r3
 800b788:	d117      	bne.n	800b7ba <_puts_r+0x52>
 800b78a:	686c      	ldr	r4, [r5, #4]
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	071b      	lsls	r3, r3, #28
 800b790:	d51d      	bpl.n	800b7ce <_puts_r+0x66>
 800b792:	6923      	ldr	r3, [r4, #16]
 800b794:	b1db      	cbz	r3, 800b7ce <_puts_r+0x66>
 800b796:	3e01      	subs	r6, #1
 800b798:	68a3      	ldr	r3, [r4, #8]
 800b79a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	60a3      	str	r3, [r4, #8]
 800b7a2:	b9e9      	cbnz	r1, 800b7e0 <_puts_r+0x78>
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	da2e      	bge.n	800b806 <_puts_r+0x9e>
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	210a      	movs	r1, #10
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f000 f84f 	bl	800b850 <__swbuf_r>
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d011      	beq.n	800b7da <_puts_r+0x72>
 800b7b6:	200a      	movs	r0, #10
 800b7b8:	e011      	b.n	800b7de <_puts_r+0x76>
 800b7ba:	4b17      	ldr	r3, [pc, #92]	; (800b818 <_puts_r+0xb0>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	d101      	bne.n	800b7c4 <_puts_r+0x5c>
 800b7c0:	68ac      	ldr	r4, [r5, #8]
 800b7c2:	e7e3      	b.n	800b78c <_puts_r+0x24>
 800b7c4:	4b15      	ldr	r3, [pc, #84]	; (800b81c <_puts_r+0xb4>)
 800b7c6:	429c      	cmp	r4, r3
 800b7c8:	bf08      	it	eq
 800b7ca:	68ec      	ldreq	r4, [r5, #12]
 800b7cc:	e7de      	b.n	800b78c <_puts_r+0x24>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	f000 f88f 	bl	800b8f4 <__swsetup_r>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d0dd      	beq.n	800b796 <_puts_r+0x2e>
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	da04      	bge.n	800b7ee <_puts_r+0x86>
 800b7e4:	69a2      	ldr	r2, [r4, #24]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	dc06      	bgt.n	800b7f8 <_puts_r+0x90>
 800b7ea:	290a      	cmp	r1, #10
 800b7ec:	d004      	beq.n	800b7f8 <_puts_r+0x90>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	6022      	str	r2, [r4, #0]
 800b7f4:	7019      	strb	r1, [r3, #0]
 800b7f6:	e7cf      	b.n	800b798 <_puts_r+0x30>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f000 f828 	bl	800b850 <__swbuf_r>
 800b800:	3001      	adds	r0, #1
 800b802:	d1c9      	bne.n	800b798 <_puts_r+0x30>
 800b804:	e7e9      	b.n	800b7da <_puts_r+0x72>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	200a      	movs	r0, #10
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	6022      	str	r2, [r4, #0]
 800b80e:	7018      	strb	r0, [r3, #0]
 800b810:	e7e5      	b.n	800b7de <_puts_r+0x76>
 800b812:	bf00      	nop
 800b814:	0800c750 	.word	0x0800c750
 800b818:	0800c770 	.word	0x0800c770
 800b81c:	0800c730 	.word	0x0800c730

0800b820 <puts>:
 800b820:	4b02      	ldr	r3, [pc, #8]	; (800b82c <puts+0xc>)
 800b822:	4601      	mov	r1, r0
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	f7ff bf9f 	b.w	800b768 <_puts_r>
 800b82a:	bf00      	nop
 800b82c:	2000002c 	.word	0x2000002c

0800b830 <_sbrk_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4c06      	ldr	r4, [pc, #24]	; (800b84c <_sbrk_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4605      	mov	r5, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	f7f5 faa6 	bl	8000d8c <_sbrk>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_sbrk_r+0x1a>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	b103      	cbz	r3, 800b84a <_sbrk_r+0x1a>
 800b848:	602b      	str	r3, [r5, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	20011388 	.word	0x20011388

0800b850 <__swbuf_r>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	460e      	mov	r6, r1
 800b854:	4614      	mov	r4, r2
 800b856:	4605      	mov	r5, r0
 800b858:	b118      	cbz	r0, 800b862 <__swbuf_r+0x12>
 800b85a:	6983      	ldr	r3, [r0, #24]
 800b85c:	b90b      	cbnz	r3, 800b862 <__swbuf_r+0x12>
 800b85e:	f000 f9a7 	bl	800bbb0 <__sinit>
 800b862:	4b21      	ldr	r3, [pc, #132]	; (800b8e8 <__swbuf_r+0x98>)
 800b864:	429c      	cmp	r4, r3
 800b866:	d12a      	bne.n	800b8be <__swbuf_r+0x6e>
 800b868:	686c      	ldr	r4, [r5, #4]
 800b86a:	69a3      	ldr	r3, [r4, #24]
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	071a      	lsls	r2, r3, #28
 800b872:	d52e      	bpl.n	800b8d2 <__swbuf_r+0x82>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	b363      	cbz	r3, 800b8d2 <__swbuf_r+0x82>
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	1ac0      	subs	r0, r0, r3
 800b87e:	6963      	ldr	r3, [r4, #20]
 800b880:	b2f6      	uxtb	r6, r6
 800b882:	4283      	cmp	r3, r0
 800b884:	4637      	mov	r7, r6
 800b886:	dc04      	bgt.n	800b892 <__swbuf_r+0x42>
 800b888:	4621      	mov	r1, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f926 	bl	800badc <_fflush_r>
 800b890:	bb28      	cbnz	r0, 800b8de <__swbuf_r+0x8e>
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	3b01      	subs	r3, #1
 800b896:	60a3      	str	r3, [r4, #8]
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	6022      	str	r2, [r4, #0]
 800b89e:	701e      	strb	r6, [r3, #0]
 800b8a0:	6963      	ldr	r3, [r4, #20]
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	4283      	cmp	r3, r0
 800b8a6:	d004      	beq.n	800b8b2 <__swbuf_r+0x62>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	07db      	lsls	r3, r3, #31
 800b8ac:	d519      	bpl.n	800b8e2 <__swbuf_r+0x92>
 800b8ae:	2e0a      	cmp	r6, #10
 800b8b0:	d117      	bne.n	800b8e2 <__swbuf_r+0x92>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 f911 	bl	800badc <_fflush_r>
 800b8ba:	b190      	cbz	r0, 800b8e2 <__swbuf_r+0x92>
 800b8bc:	e00f      	b.n	800b8de <__swbuf_r+0x8e>
 800b8be:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <__swbuf_r+0x9c>)
 800b8c0:	429c      	cmp	r4, r3
 800b8c2:	d101      	bne.n	800b8c8 <__swbuf_r+0x78>
 800b8c4:	68ac      	ldr	r4, [r5, #8]
 800b8c6:	e7d0      	b.n	800b86a <__swbuf_r+0x1a>
 800b8c8:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <__swbuf_r+0xa0>)
 800b8ca:	429c      	cmp	r4, r3
 800b8cc:	bf08      	it	eq
 800b8ce:	68ec      	ldreq	r4, [r5, #12]
 800b8d0:	e7cb      	b.n	800b86a <__swbuf_r+0x1a>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f80d 	bl	800b8f4 <__swsetup_r>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d0cc      	beq.n	800b878 <__swbuf_r+0x28>
 800b8de:	f04f 37ff 	mov.w	r7, #4294967295
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800c750 	.word	0x0800c750
 800b8ec:	0800c770 	.word	0x0800c770
 800b8f0:	0800c730 	.word	0x0800c730

0800b8f4 <__swsetup_r>:
 800b8f4:	4b32      	ldr	r3, [pc, #200]	; (800b9c0 <__swsetup_r+0xcc>)
 800b8f6:	b570      	push	{r4, r5, r6, lr}
 800b8f8:	681d      	ldr	r5, [r3, #0]
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	b125      	cbz	r5, 800b90a <__swsetup_r+0x16>
 800b900:	69ab      	ldr	r3, [r5, #24]
 800b902:	b913      	cbnz	r3, 800b90a <__swsetup_r+0x16>
 800b904:	4628      	mov	r0, r5
 800b906:	f000 f953 	bl	800bbb0 <__sinit>
 800b90a:	4b2e      	ldr	r3, [pc, #184]	; (800b9c4 <__swsetup_r+0xd0>)
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d10f      	bne.n	800b930 <__swsetup_r+0x3c>
 800b910:	686c      	ldr	r4, [r5, #4]
 800b912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b916:	b29a      	uxth	r2, r3
 800b918:	0715      	lsls	r5, r2, #28
 800b91a:	d42c      	bmi.n	800b976 <__swsetup_r+0x82>
 800b91c:	06d0      	lsls	r0, r2, #27
 800b91e:	d411      	bmi.n	800b944 <__swsetup_r+0x50>
 800b920:	2209      	movs	r2, #9
 800b922:	6032      	str	r2, [r6, #0]
 800b924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	e03e      	b.n	800b9ae <__swsetup_r+0xba>
 800b930:	4b25      	ldr	r3, [pc, #148]	; (800b9c8 <__swsetup_r+0xd4>)
 800b932:	429c      	cmp	r4, r3
 800b934:	d101      	bne.n	800b93a <__swsetup_r+0x46>
 800b936:	68ac      	ldr	r4, [r5, #8]
 800b938:	e7eb      	b.n	800b912 <__swsetup_r+0x1e>
 800b93a:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <__swsetup_r+0xd8>)
 800b93c:	429c      	cmp	r4, r3
 800b93e:	bf08      	it	eq
 800b940:	68ec      	ldreq	r4, [r5, #12]
 800b942:	e7e6      	b.n	800b912 <__swsetup_r+0x1e>
 800b944:	0751      	lsls	r1, r2, #29
 800b946:	d512      	bpl.n	800b96e <__swsetup_r+0x7a>
 800b948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b94a:	b141      	cbz	r1, 800b95e <__swsetup_r+0x6a>
 800b94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b950:	4299      	cmp	r1, r3
 800b952:	d002      	beq.n	800b95a <__swsetup_r+0x66>
 800b954:	4630      	mov	r0, r6
 800b956:	f7ff fe47 	bl	800b5e8 <_free_r>
 800b95a:	2300      	movs	r3, #0
 800b95c:	6363      	str	r3, [r4, #52]	; 0x34
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b964:	81a3      	strh	r3, [r4, #12]
 800b966:	2300      	movs	r3, #0
 800b968:	6063      	str	r3, [r4, #4]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	f043 0308 	orr.w	r3, r3, #8
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	b94b      	cbnz	r3, 800b98e <__swsetup_r+0x9a>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b984:	d003      	beq.n	800b98e <__swsetup_r+0x9a>
 800b986:	4621      	mov	r1, r4
 800b988:	4630      	mov	r0, r6
 800b98a:	f000 f9bf 	bl	800bd0c <__smakebuf_r>
 800b98e:	89a2      	ldrh	r2, [r4, #12]
 800b990:	f012 0301 	ands.w	r3, r2, #1
 800b994:	d00c      	beq.n	800b9b0 <__swsetup_r+0xbc>
 800b996:	2300      	movs	r3, #0
 800b998:	60a3      	str	r3, [r4, #8]
 800b99a:	6963      	ldr	r3, [r4, #20]
 800b99c:	425b      	negs	r3, r3
 800b99e:	61a3      	str	r3, [r4, #24]
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	b953      	cbnz	r3, 800b9ba <__swsetup_r+0xc6>
 800b9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b9ac:	d1ba      	bne.n	800b924 <__swsetup_r+0x30>
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	0792      	lsls	r2, r2, #30
 800b9b2:	bf58      	it	pl
 800b9b4:	6963      	ldrpl	r3, [r4, #20]
 800b9b6:	60a3      	str	r3, [r4, #8]
 800b9b8:	e7f2      	b.n	800b9a0 <__swsetup_r+0xac>
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	e7f7      	b.n	800b9ae <__swsetup_r+0xba>
 800b9be:	bf00      	nop
 800b9c0:	2000002c 	.word	0x2000002c
 800b9c4:	0800c750 	.word	0x0800c750
 800b9c8:	0800c770 	.word	0x0800c770
 800b9cc:	0800c730 	.word	0x0800c730

0800b9d0 <__sflush_r>:
 800b9d0:	898a      	ldrh	r2, [r1, #12]
 800b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	0710      	lsls	r0, r2, #28
 800b9da:	460c      	mov	r4, r1
 800b9dc:	d458      	bmi.n	800ba90 <__sflush_r+0xc0>
 800b9de:	684b      	ldr	r3, [r1, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc05      	bgt.n	800b9f0 <__sflush_r+0x20>
 800b9e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dc02      	bgt.n	800b9f0 <__sflush_r+0x20>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9f2:	2e00      	cmp	r6, #0
 800b9f4:	d0f9      	beq.n	800b9ea <__sflush_r+0x1a>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9fc:	682f      	ldr	r7, [r5, #0]
 800b9fe:	6a21      	ldr	r1, [r4, #32]
 800ba00:	602b      	str	r3, [r5, #0]
 800ba02:	d032      	beq.n	800ba6a <__sflush_r+0x9a>
 800ba04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	075a      	lsls	r2, r3, #29
 800ba0a:	d505      	bpl.n	800ba18 <__sflush_r+0x48>
 800ba0c:	6863      	ldr	r3, [r4, #4]
 800ba0e:	1ac0      	subs	r0, r0, r3
 800ba10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba12:	b10b      	cbz	r3, 800ba18 <__sflush_r+0x48>
 800ba14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba16:	1ac0      	subs	r0, r0, r3
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba1e:	6a21      	ldr	r1, [r4, #32]
 800ba20:	4628      	mov	r0, r5
 800ba22:	47b0      	blx	r6
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	d106      	bne.n	800ba38 <__sflush_r+0x68>
 800ba2a:	6829      	ldr	r1, [r5, #0]
 800ba2c:	291d      	cmp	r1, #29
 800ba2e:	d848      	bhi.n	800bac2 <__sflush_r+0xf2>
 800ba30:	4a29      	ldr	r2, [pc, #164]	; (800bad8 <__sflush_r+0x108>)
 800ba32:	40ca      	lsrs	r2, r1
 800ba34:	07d6      	lsls	r6, r2, #31
 800ba36:	d544      	bpl.n	800bac2 <__sflush_r+0xf2>
 800ba38:	2200      	movs	r2, #0
 800ba3a:	6062      	str	r2, [r4, #4]
 800ba3c:	04d9      	lsls	r1, r3, #19
 800ba3e:	6922      	ldr	r2, [r4, #16]
 800ba40:	6022      	str	r2, [r4, #0]
 800ba42:	d504      	bpl.n	800ba4e <__sflush_r+0x7e>
 800ba44:	1c42      	adds	r2, r0, #1
 800ba46:	d101      	bne.n	800ba4c <__sflush_r+0x7c>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b903      	cbnz	r3, 800ba4e <__sflush_r+0x7e>
 800ba4c:	6560      	str	r0, [r4, #84]	; 0x54
 800ba4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba50:	602f      	str	r7, [r5, #0]
 800ba52:	2900      	cmp	r1, #0
 800ba54:	d0c9      	beq.n	800b9ea <__sflush_r+0x1a>
 800ba56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba5a:	4299      	cmp	r1, r3
 800ba5c:	d002      	beq.n	800ba64 <__sflush_r+0x94>
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f7ff fdc2 	bl	800b5e8 <_free_r>
 800ba64:	2000      	movs	r0, #0
 800ba66:	6360      	str	r0, [r4, #52]	; 0x34
 800ba68:	e7c0      	b.n	800b9ec <__sflush_r+0x1c>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b0      	blx	r6
 800ba70:	1c41      	adds	r1, r0, #1
 800ba72:	d1c8      	bne.n	800ba06 <__sflush_r+0x36>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0c5      	beq.n	800ba06 <__sflush_r+0x36>
 800ba7a:	2b1d      	cmp	r3, #29
 800ba7c:	d001      	beq.n	800ba82 <__sflush_r+0xb2>
 800ba7e:	2b16      	cmp	r3, #22
 800ba80:	d101      	bne.n	800ba86 <__sflush_r+0xb6>
 800ba82:	602f      	str	r7, [r5, #0]
 800ba84:	e7b1      	b.n	800b9ea <__sflush_r+0x1a>
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	e7ad      	b.n	800b9ec <__sflush_r+0x1c>
 800ba90:	690f      	ldr	r7, [r1, #16]
 800ba92:	2f00      	cmp	r7, #0
 800ba94:	d0a9      	beq.n	800b9ea <__sflush_r+0x1a>
 800ba96:	0793      	lsls	r3, r2, #30
 800ba98:	680e      	ldr	r6, [r1, #0]
 800ba9a:	bf08      	it	eq
 800ba9c:	694b      	ldreq	r3, [r1, #20]
 800ba9e:	600f      	str	r7, [r1, #0]
 800baa0:	bf18      	it	ne
 800baa2:	2300      	movne	r3, #0
 800baa4:	eba6 0807 	sub.w	r8, r6, r7
 800baa8:	608b      	str	r3, [r1, #8]
 800baaa:	f1b8 0f00 	cmp.w	r8, #0
 800baae:	dd9c      	ble.n	800b9ea <__sflush_r+0x1a>
 800bab0:	4643      	mov	r3, r8
 800bab2:	463a      	mov	r2, r7
 800bab4:	6a21      	ldr	r1, [r4, #32]
 800bab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bab8:	4628      	mov	r0, r5
 800baba:	47b0      	blx	r6
 800babc:	2800      	cmp	r0, #0
 800babe:	dc06      	bgt.n	800bace <__sflush_r+0xfe>
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	e78e      	b.n	800b9ec <__sflush_r+0x1c>
 800bace:	4407      	add	r7, r0
 800bad0:	eba8 0800 	sub.w	r8, r8, r0
 800bad4:	e7e9      	b.n	800baaa <__sflush_r+0xda>
 800bad6:	bf00      	nop
 800bad8:	20400001 	.word	0x20400001

0800badc <_fflush_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	690b      	ldr	r3, [r1, #16]
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	b1db      	cbz	r3, 800bb1e <_fflush_r+0x42>
 800bae6:	b118      	cbz	r0, 800baf0 <_fflush_r+0x14>
 800bae8:	6983      	ldr	r3, [r0, #24]
 800baea:	b90b      	cbnz	r3, 800baf0 <_fflush_r+0x14>
 800baec:	f000 f860 	bl	800bbb0 <__sinit>
 800baf0:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <_fflush_r+0x48>)
 800baf2:	429c      	cmp	r4, r3
 800baf4:	d109      	bne.n	800bb0a <_fflush_r+0x2e>
 800baf6:	686c      	ldr	r4, [r5, #4]
 800baf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bafc:	b17b      	cbz	r3, 800bb1e <_fflush_r+0x42>
 800bafe:	4621      	mov	r1, r4
 800bb00:	4628      	mov	r0, r5
 800bb02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb06:	f7ff bf63 	b.w	800b9d0 <__sflush_r>
 800bb0a:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <_fflush_r+0x4c>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	d101      	bne.n	800bb14 <_fflush_r+0x38>
 800bb10:	68ac      	ldr	r4, [r5, #8]
 800bb12:	e7f1      	b.n	800baf8 <_fflush_r+0x1c>
 800bb14:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <_fflush_r+0x50>)
 800bb16:	429c      	cmp	r4, r3
 800bb18:	bf08      	it	eq
 800bb1a:	68ec      	ldreq	r4, [r5, #12]
 800bb1c:	e7ec      	b.n	800baf8 <_fflush_r+0x1c>
 800bb1e:	2000      	movs	r0, #0
 800bb20:	bd38      	pop	{r3, r4, r5, pc}
 800bb22:	bf00      	nop
 800bb24:	0800c750 	.word	0x0800c750
 800bb28:	0800c770 	.word	0x0800c770
 800bb2c:	0800c730 	.word	0x0800c730

0800bb30 <std>:
 800bb30:	2300      	movs	r3, #0
 800bb32:	b510      	push	{r4, lr}
 800bb34:	4604      	mov	r4, r0
 800bb36:	e9c0 3300 	strd	r3, r3, [r0]
 800bb3a:	6083      	str	r3, [r0, #8]
 800bb3c:	8181      	strh	r1, [r0, #12]
 800bb3e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb40:	81c2      	strh	r2, [r0, #14]
 800bb42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb46:	6183      	str	r3, [r0, #24]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	2208      	movs	r2, #8
 800bb4c:	305c      	adds	r0, #92	; 0x5c
 800bb4e:	f7ff fd42 	bl	800b5d6 <memset>
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <std+0x38>)
 800bb54:	6263      	str	r3, [r4, #36]	; 0x24
 800bb56:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <std+0x3c>)
 800bb58:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb5a:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <std+0x40>)
 800bb5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb5e:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <std+0x44>)
 800bb60:	6224      	str	r4, [r4, #32]
 800bb62:	6323      	str	r3, [r4, #48]	; 0x30
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	bf00      	nop
 800bb68:	0800c321 	.word	0x0800c321
 800bb6c:	0800c343 	.word	0x0800c343
 800bb70:	0800c37b 	.word	0x0800c37b
 800bb74:	0800c39f 	.word	0x0800c39f

0800bb78 <_cleanup_r>:
 800bb78:	4901      	ldr	r1, [pc, #4]	; (800bb80 <_cleanup_r+0x8>)
 800bb7a:	f000 b885 	b.w	800bc88 <_fwalk_reent>
 800bb7e:	bf00      	nop
 800bb80:	0800badd 	.word	0x0800badd

0800bb84 <__sfmoreglue>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	1e4a      	subs	r2, r1, #1
 800bb88:	2568      	movs	r5, #104	; 0x68
 800bb8a:	4355      	muls	r5, r2
 800bb8c:	460e      	mov	r6, r1
 800bb8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb92:	f7ff fd77 	bl	800b684 <_malloc_r>
 800bb96:	4604      	mov	r4, r0
 800bb98:	b140      	cbz	r0, 800bbac <__sfmoreglue+0x28>
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	e9c0 1600 	strd	r1, r6, [r0]
 800bba0:	300c      	adds	r0, #12
 800bba2:	60a0      	str	r0, [r4, #8]
 800bba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bba8:	f7ff fd15 	bl	800b5d6 <memset>
 800bbac:	4620      	mov	r0, r4
 800bbae:	bd70      	pop	{r4, r5, r6, pc}

0800bbb0 <__sinit>:
 800bbb0:	6983      	ldr	r3, [r0, #24]
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	bb33      	cbnz	r3, 800bc06 <__sinit+0x56>
 800bbb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bbbc:	6503      	str	r3, [r0, #80]	; 0x50
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <__sinit+0x58>)
 800bbc0:	4a12      	ldr	r2, [pc, #72]	; (800bc0c <__sinit+0x5c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6282      	str	r2, [r0, #40]	; 0x28
 800bbc6:	4298      	cmp	r0, r3
 800bbc8:	bf04      	itt	eq
 800bbca:	2301      	moveq	r3, #1
 800bbcc:	6183      	streq	r3, [r0, #24]
 800bbce:	f000 f81f 	bl	800bc10 <__sfp>
 800bbd2:	6060      	str	r0, [r4, #4]
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f000 f81b 	bl	800bc10 <__sfp>
 800bbda:	60a0      	str	r0, [r4, #8]
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 f817 	bl	800bc10 <__sfp>
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	60e0      	str	r0, [r4, #12]
 800bbe6:	2104      	movs	r1, #4
 800bbe8:	6860      	ldr	r0, [r4, #4]
 800bbea:	f7ff ffa1 	bl	800bb30 <std>
 800bbee:	2201      	movs	r2, #1
 800bbf0:	2109      	movs	r1, #9
 800bbf2:	68a0      	ldr	r0, [r4, #8]
 800bbf4:	f7ff ff9c 	bl	800bb30 <std>
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	2112      	movs	r1, #18
 800bbfc:	68e0      	ldr	r0, [r4, #12]
 800bbfe:	f7ff ff97 	bl	800bb30 <std>
 800bc02:	2301      	movs	r3, #1
 800bc04:	61a3      	str	r3, [r4, #24]
 800bc06:	bd10      	pop	{r4, pc}
 800bc08:	0800c72c 	.word	0x0800c72c
 800bc0c:	0800bb79 	.word	0x0800bb79

0800bc10 <__sfp>:
 800bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <__sfp+0x70>)
 800bc14:	681e      	ldr	r6, [r3, #0]
 800bc16:	69b3      	ldr	r3, [r6, #24]
 800bc18:	4607      	mov	r7, r0
 800bc1a:	b913      	cbnz	r3, 800bc22 <__sfp+0x12>
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff ffc7 	bl	800bbb0 <__sinit>
 800bc22:	3648      	adds	r6, #72	; 0x48
 800bc24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	d503      	bpl.n	800bc34 <__sfp+0x24>
 800bc2c:	6833      	ldr	r3, [r6, #0]
 800bc2e:	b133      	cbz	r3, 800bc3e <__sfp+0x2e>
 800bc30:	6836      	ldr	r6, [r6, #0]
 800bc32:	e7f7      	b.n	800bc24 <__sfp+0x14>
 800bc34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc38:	b16d      	cbz	r5, 800bc56 <__sfp+0x46>
 800bc3a:	3468      	adds	r4, #104	; 0x68
 800bc3c:	e7f4      	b.n	800bc28 <__sfp+0x18>
 800bc3e:	2104      	movs	r1, #4
 800bc40:	4638      	mov	r0, r7
 800bc42:	f7ff ff9f 	bl	800bb84 <__sfmoreglue>
 800bc46:	6030      	str	r0, [r6, #0]
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d1f1      	bne.n	800bc30 <__sfp+0x20>
 800bc4c:	230c      	movs	r3, #12
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	4604      	mov	r4, r0
 800bc52:	4620      	mov	r0, r4
 800bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc56:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <__sfp+0x74>)
 800bc58:	6665      	str	r5, [r4, #100]	; 0x64
 800bc5a:	e9c4 5500 	strd	r5, r5, [r4]
 800bc5e:	60a5      	str	r5, [r4, #8]
 800bc60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bc64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bc68:	2208      	movs	r2, #8
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc70:	f7ff fcb1 	bl	800b5d6 <memset>
 800bc74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc7c:	e7e9      	b.n	800bc52 <__sfp+0x42>
 800bc7e:	bf00      	nop
 800bc80:	0800c72c 	.word	0x0800c72c
 800bc84:	ffff0001 	.word	0xffff0001

0800bc88 <_fwalk_reent>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc94:	2600      	movs	r6, #0
 800bc96:	b914      	cbnz	r4, 800bc9e <_fwalk_reent+0x16>
 800bc98:	4630      	mov	r0, r6
 800bc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bca2:	3f01      	subs	r7, #1
 800bca4:	d501      	bpl.n	800bcaa <_fwalk_reent+0x22>
 800bca6:	6824      	ldr	r4, [r4, #0]
 800bca8:	e7f5      	b.n	800bc96 <_fwalk_reent+0xe>
 800bcaa:	89ab      	ldrh	r3, [r5, #12]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d907      	bls.n	800bcc0 <_fwalk_reent+0x38>
 800bcb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	d003      	beq.n	800bcc0 <_fwalk_reent+0x38>
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4640      	mov	r0, r8
 800bcbc:	47c8      	blx	r9
 800bcbe:	4306      	orrs	r6, r0
 800bcc0:	3568      	adds	r5, #104	; 0x68
 800bcc2:	e7ee      	b.n	800bca2 <_fwalk_reent+0x1a>

0800bcc4 <__swhatbuf_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bccc:	2900      	cmp	r1, #0
 800bcce:	b096      	sub	sp, #88	; 0x58
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	461d      	mov	r5, r3
 800bcd4:	da07      	bge.n	800bce6 <__swhatbuf_r+0x22>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	89b3      	ldrh	r3, [r6, #12]
 800bcdc:	061a      	lsls	r2, r3, #24
 800bcde:	d410      	bmi.n	800bd02 <__swhatbuf_r+0x3e>
 800bce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce4:	e00e      	b.n	800bd04 <__swhatbuf_r+0x40>
 800bce6:	466a      	mov	r2, sp
 800bce8:	f000 fb80 	bl	800c3ec <_fstat_r>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	dbf2      	blt.n	800bcd6 <__swhatbuf_r+0x12>
 800bcf0:	9a01      	ldr	r2, [sp, #4]
 800bcf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcfa:	425a      	negs	r2, r3
 800bcfc:	415a      	adcs	r2, r3
 800bcfe:	602a      	str	r2, [r5, #0]
 800bd00:	e7ee      	b.n	800bce0 <__swhatbuf_r+0x1c>
 800bd02:	2340      	movs	r3, #64	; 0x40
 800bd04:	2000      	movs	r0, #0
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	b016      	add	sp, #88	; 0x58
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}

0800bd0c <__smakebuf_r>:
 800bd0c:	898b      	ldrh	r3, [r1, #12]
 800bd0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd10:	079d      	lsls	r5, r3, #30
 800bd12:	4606      	mov	r6, r0
 800bd14:	460c      	mov	r4, r1
 800bd16:	d507      	bpl.n	800bd28 <__smakebuf_r+0x1c>
 800bd18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	2301      	movs	r3, #1
 800bd22:	6163      	str	r3, [r4, #20]
 800bd24:	b002      	add	sp, #8
 800bd26:	bd70      	pop	{r4, r5, r6, pc}
 800bd28:	ab01      	add	r3, sp, #4
 800bd2a:	466a      	mov	r2, sp
 800bd2c:	f7ff ffca 	bl	800bcc4 <__swhatbuf_r>
 800bd30:	9900      	ldr	r1, [sp, #0]
 800bd32:	4605      	mov	r5, r0
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7ff fca5 	bl	800b684 <_malloc_r>
 800bd3a:	b948      	cbnz	r0, 800bd50 <__smakebuf_r+0x44>
 800bd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd40:	059a      	lsls	r2, r3, #22
 800bd42:	d4ef      	bmi.n	800bd24 <__smakebuf_r+0x18>
 800bd44:	f023 0303 	bic.w	r3, r3, #3
 800bd48:	f043 0302 	orr.w	r3, r3, #2
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	e7e3      	b.n	800bd18 <__smakebuf_r+0xc>
 800bd50:	4b0d      	ldr	r3, [pc, #52]	; (800bd88 <__smakebuf_r+0x7c>)
 800bd52:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	6020      	str	r0, [r4, #0]
 800bd58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	9b00      	ldr	r3, [sp, #0]
 800bd60:	6163      	str	r3, [r4, #20]
 800bd62:	9b01      	ldr	r3, [sp, #4]
 800bd64:	6120      	str	r0, [r4, #16]
 800bd66:	b15b      	cbz	r3, 800bd80 <__smakebuf_r+0x74>
 800bd68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f000 fb4f 	bl	800c410 <_isatty_r>
 800bd72:	b128      	cbz	r0, 800bd80 <__smakebuf_r+0x74>
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	f043 0301 	orr.w	r3, r3, #1
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	431d      	orrs	r5, r3
 800bd84:	81a5      	strh	r5, [r4, #12]
 800bd86:	e7cd      	b.n	800bd24 <__smakebuf_r+0x18>
 800bd88:	0800bb79 	.word	0x0800bb79

0800bd8c <__malloc_lock>:
 800bd8c:	4770      	bx	lr

0800bd8e <__malloc_unlock>:
 800bd8e:	4770      	bx	lr

0800bd90 <__sfputc_r>:
 800bd90:	6893      	ldr	r3, [r2, #8]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	b410      	push	{r4}
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	da08      	bge.n	800bdae <__sfputc_r+0x1e>
 800bd9c:	6994      	ldr	r4, [r2, #24]
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db01      	blt.n	800bda6 <__sfputc_r+0x16>
 800bda2:	290a      	cmp	r1, #10
 800bda4:	d103      	bne.n	800bdae <__sfputc_r+0x1e>
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	f7ff bd51 	b.w	800b850 <__swbuf_r>
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	1c58      	adds	r0, r3, #1
 800bdb2:	6010      	str	r0, [r2, #0]
 800bdb4:	7019      	strb	r1, [r3, #0]
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <__sfputs_r>:
 800bdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	18d5      	adds	r5, r2, r3
 800bdc8:	42ac      	cmp	r4, r5
 800bdca:	d101      	bne.n	800bdd0 <__sfputs_r+0x12>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e007      	b.n	800bde0 <__sfputs_r+0x22>
 800bdd0:	463a      	mov	r2, r7
 800bdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffda 	bl	800bd90 <__sfputc_r>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d1f3      	bne.n	800bdc8 <__sfputs_r+0xa>
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460c      	mov	r4, r1
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4617      	mov	r7, r2
 800bdee:	461d      	mov	r5, r3
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f7ff feda 	bl	800bbb0 <__sinit>
 800bdfc:	4b7c      	ldr	r3, [pc, #496]	; (800bff0 <_vfiprintf_r+0x20c>)
 800bdfe:	429c      	cmp	r4, r3
 800be00:	d158      	bne.n	800beb4 <_vfiprintf_r+0xd0>
 800be02:	6874      	ldr	r4, [r6, #4]
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	0718      	lsls	r0, r3, #28
 800be08:	d55e      	bpl.n	800bec8 <_vfiprintf_r+0xe4>
 800be0a:	6923      	ldr	r3, [r4, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d05b      	beq.n	800bec8 <_vfiprintf_r+0xe4>
 800be10:	2300      	movs	r3, #0
 800be12:	9309      	str	r3, [sp, #36]	; 0x24
 800be14:	2320      	movs	r3, #32
 800be16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be1a:	2330      	movs	r3, #48	; 0x30
 800be1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be20:	9503      	str	r5, [sp, #12]
 800be22:	f04f 0b01 	mov.w	fp, #1
 800be26:	46b8      	mov	r8, r7
 800be28:	4645      	mov	r5, r8
 800be2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be2e:	b10b      	cbz	r3, 800be34 <_vfiprintf_r+0x50>
 800be30:	2b25      	cmp	r3, #37	; 0x25
 800be32:	d154      	bne.n	800bede <_vfiprintf_r+0xfa>
 800be34:	ebb8 0a07 	subs.w	sl, r8, r7
 800be38:	d00b      	beq.n	800be52 <_vfiprintf_r+0x6e>
 800be3a:	4653      	mov	r3, sl
 800be3c:	463a      	mov	r2, r7
 800be3e:	4621      	mov	r1, r4
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff ffbc 	bl	800bdbe <__sfputs_r>
 800be46:	3001      	adds	r0, #1
 800be48:	f000 80c2 	beq.w	800bfd0 <_vfiprintf_r+0x1ec>
 800be4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4e:	4453      	add	r3, sl
 800be50:	9309      	str	r3, [sp, #36]	; 0x24
 800be52:	f898 3000 	ldrb.w	r3, [r8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 80ba 	beq.w	800bfd0 <_vfiprintf_r+0x1ec>
 800be5c:	2300      	movs	r3, #0
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295
 800be62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	9307      	str	r3, [sp, #28]
 800be6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be6e:	931a      	str	r3, [sp, #104]	; 0x68
 800be70:	46a8      	mov	r8, r5
 800be72:	2205      	movs	r2, #5
 800be74:	f818 1b01 	ldrb.w	r1, [r8], #1
 800be78:	485e      	ldr	r0, [pc, #376]	; (800bff4 <_vfiprintf_r+0x210>)
 800be7a:	f7f4 f9e1 	bl	8000240 <memchr>
 800be7e:	9b04      	ldr	r3, [sp, #16]
 800be80:	bb78      	cbnz	r0, 800bee2 <_vfiprintf_r+0xfe>
 800be82:	06d9      	lsls	r1, r3, #27
 800be84:	bf44      	itt	mi
 800be86:	2220      	movmi	r2, #32
 800be88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be8c:	071a      	lsls	r2, r3, #28
 800be8e:	bf44      	itt	mi
 800be90:	222b      	movmi	r2, #43	; 0x2b
 800be92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be96:	782a      	ldrb	r2, [r5, #0]
 800be98:	2a2a      	cmp	r2, #42	; 0x2a
 800be9a:	d02a      	beq.n	800bef2 <_vfiprintf_r+0x10e>
 800be9c:	9a07      	ldr	r2, [sp, #28]
 800be9e:	46a8      	mov	r8, r5
 800bea0:	2000      	movs	r0, #0
 800bea2:	250a      	movs	r5, #10
 800bea4:	4641      	mov	r1, r8
 800bea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beaa:	3b30      	subs	r3, #48	; 0x30
 800beac:	2b09      	cmp	r3, #9
 800beae:	d969      	bls.n	800bf84 <_vfiprintf_r+0x1a0>
 800beb0:	b360      	cbz	r0, 800bf0c <_vfiprintf_r+0x128>
 800beb2:	e024      	b.n	800befe <_vfiprintf_r+0x11a>
 800beb4:	4b50      	ldr	r3, [pc, #320]	; (800bff8 <_vfiprintf_r+0x214>)
 800beb6:	429c      	cmp	r4, r3
 800beb8:	d101      	bne.n	800bebe <_vfiprintf_r+0xda>
 800beba:	68b4      	ldr	r4, [r6, #8]
 800bebc:	e7a2      	b.n	800be04 <_vfiprintf_r+0x20>
 800bebe:	4b4f      	ldr	r3, [pc, #316]	; (800bffc <_vfiprintf_r+0x218>)
 800bec0:	429c      	cmp	r4, r3
 800bec2:	bf08      	it	eq
 800bec4:	68f4      	ldreq	r4, [r6, #12]
 800bec6:	e79d      	b.n	800be04 <_vfiprintf_r+0x20>
 800bec8:	4621      	mov	r1, r4
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff fd12 	bl	800b8f4 <__swsetup_r>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d09d      	beq.n	800be10 <_vfiprintf_r+0x2c>
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	b01d      	add	sp, #116	; 0x74
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bede:	46a8      	mov	r8, r5
 800bee0:	e7a2      	b.n	800be28 <_vfiprintf_r+0x44>
 800bee2:	4a44      	ldr	r2, [pc, #272]	; (800bff4 <_vfiprintf_r+0x210>)
 800bee4:	1a80      	subs	r0, r0, r2
 800bee6:	fa0b f000 	lsl.w	r0, fp, r0
 800beea:	4318      	orrs	r0, r3
 800beec:	9004      	str	r0, [sp, #16]
 800beee:	4645      	mov	r5, r8
 800bef0:	e7be      	b.n	800be70 <_vfiprintf_r+0x8c>
 800bef2:	9a03      	ldr	r2, [sp, #12]
 800bef4:	1d11      	adds	r1, r2, #4
 800bef6:	6812      	ldr	r2, [r2, #0]
 800bef8:	9103      	str	r1, [sp, #12]
 800befa:	2a00      	cmp	r2, #0
 800befc:	db01      	blt.n	800bf02 <_vfiprintf_r+0x11e>
 800befe:	9207      	str	r2, [sp, #28]
 800bf00:	e004      	b.n	800bf0c <_vfiprintf_r+0x128>
 800bf02:	4252      	negs	r2, r2
 800bf04:	f043 0302 	orr.w	r3, r3, #2
 800bf08:	9207      	str	r2, [sp, #28]
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	f898 3000 	ldrb.w	r3, [r8]
 800bf10:	2b2e      	cmp	r3, #46	; 0x2e
 800bf12:	d10e      	bne.n	800bf32 <_vfiprintf_r+0x14e>
 800bf14:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bf18:	2b2a      	cmp	r3, #42	; 0x2a
 800bf1a:	d138      	bne.n	800bf8e <_vfiprintf_r+0x1aa>
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	1d1a      	adds	r2, r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	9203      	str	r2, [sp, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfb8      	it	lt
 800bf28:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf2c:	f108 0802 	add.w	r8, r8, #2
 800bf30:	9305      	str	r3, [sp, #20]
 800bf32:	4d33      	ldr	r5, [pc, #204]	; (800c000 <_vfiprintf_r+0x21c>)
 800bf34:	f898 1000 	ldrb.w	r1, [r8]
 800bf38:	2203      	movs	r2, #3
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f7f4 f980 	bl	8000240 <memchr>
 800bf40:	b140      	cbz	r0, 800bf54 <_vfiprintf_r+0x170>
 800bf42:	2340      	movs	r3, #64	; 0x40
 800bf44:	1b40      	subs	r0, r0, r5
 800bf46:	fa03 f000 	lsl.w	r0, r3, r0
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	4303      	orrs	r3, r0
 800bf4e:	f108 0801 	add.w	r8, r8, #1
 800bf52:	9304      	str	r3, [sp, #16]
 800bf54:	f898 1000 	ldrb.w	r1, [r8]
 800bf58:	482a      	ldr	r0, [pc, #168]	; (800c004 <_vfiprintf_r+0x220>)
 800bf5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf5e:	2206      	movs	r2, #6
 800bf60:	f108 0701 	add.w	r7, r8, #1
 800bf64:	f7f4 f96c 	bl	8000240 <memchr>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d037      	beq.n	800bfdc <_vfiprintf_r+0x1f8>
 800bf6c:	4b26      	ldr	r3, [pc, #152]	; (800c008 <_vfiprintf_r+0x224>)
 800bf6e:	bb1b      	cbnz	r3, 800bfb8 <_vfiprintf_r+0x1d4>
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	3307      	adds	r3, #7
 800bf74:	f023 0307 	bic.w	r3, r3, #7
 800bf78:	3308      	adds	r3, #8
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7e:	444b      	add	r3, r9
 800bf80:	9309      	str	r3, [sp, #36]	; 0x24
 800bf82:	e750      	b.n	800be26 <_vfiprintf_r+0x42>
 800bf84:	fb05 3202 	mla	r2, r5, r2, r3
 800bf88:	2001      	movs	r0, #1
 800bf8a:	4688      	mov	r8, r1
 800bf8c:	e78a      	b.n	800bea4 <_vfiprintf_r+0xc0>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f108 0801 	add.w	r8, r8, #1
 800bf94:	9305      	str	r3, [sp, #20]
 800bf96:	4619      	mov	r1, r3
 800bf98:	250a      	movs	r5, #10
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa0:	3a30      	subs	r2, #48	; 0x30
 800bfa2:	2a09      	cmp	r2, #9
 800bfa4:	d903      	bls.n	800bfae <_vfiprintf_r+0x1ca>
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d0c3      	beq.n	800bf32 <_vfiprintf_r+0x14e>
 800bfaa:	9105      	str	r1, [sp, #20]
 800bfac:	e7c1      	b.n	800bf32 <_vfiprintf_r+0x14e>
 800bfae:	fb05 2101 	mla	r1, r5, r1, r2
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	4680      	mov	r8, r0
 800bfb6:	e7f0      	b.n	800bf9a <_vfiprintf_r+0x1b6>
 800bfb8:	ab03      	add	r3, sp, #12
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4b13      	ldr	r3, [pc, #76]	; (800c00c <_vfiprintf_r+0x228>)
 800bfc0:	a904      	add	r1, sp, #16
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bfcc:	4681      	mov	r9, r0
 800bfce:	d1d5      	bne.n	800bf7c <_vfiprintf_r+0x198>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	065b      	lsls	r3, r3, #25
 800bfd4:	f53f af7e 	bmi.w	800bed4 <_vfiprintf_r+0xf0>
 800bfd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfda:	e77d      	b.n	800bed8 <_vfiprintf_r+0xf4>
 800bfdc:	ab03      	add	r3, sp, #12
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	4b0a      	ldr	r3, [pc, #40]	; (800c00c <_vfiprintf_r+0x228>)
 800bfe4:	a904      	add	r1, sp, #16
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f000 f888 	bl	800c0fc <_printf_i>
 800bfec:	e7ec      	b.n	800bfc8 <_vfiprintf_r+0x1e4>
 800bfee:	bf00      	nop
 800bff0:	0800c750 	.word	0x0800c750
 800bff4:	0800c790 	.word	0x0800c790
 800bff8:	0800c770 	.word	0x0800c770
 800bffc:	0800c730 	.word	0x0800c730
 800c000:	0800c796 	.word	0x0800c796
 800c004:	0800c79a 	.word	0x0800c79a
 800c008:	00000000 	.word	0x00000000
 800c00c:	0800bdbf 	.word	0x0800bdbf

0800c010 <_printf_common>:
 800c010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c014:	4691      	mov	r9, r2
 800c016:	461f      	mov	r7, r3
 800c018:	688a      	ldr	r2, [r1, #8]
 800c01a:	690b      	ldr	r3, [r1, #16]
 800c01c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c020:	4293      	cmp	r3, r2
 800c022:	bfb8      	it	lt
 800c024:	4613      	movlt	r3, r2
 800c026:	f8c9 3000 	str.w	r3, [r9]
 800c02a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c02e:	4606      	mov	r6, r0
 800c030:	460c      	mov	r4, r1
 800c032:	b112      	cbz	r2, 800c03a <_printf_common+0x2a>
 800c034:	3301      	adds	r3, #1
 800c036:	f8c9 3000 	str.w	r3, [r9]
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	0699      	lsls	r1, r3, #26
 800c03e:	bf42      	ittt	mi
 800c040:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c044:	3302      	addmi	r3, #2
 800c046:	f8c9 3000 	strmi.w	r3, [r9]
 800c04a:	6825      	ldr	r5, [r4, #0]
 800c04c:	f015 0506 	ands.w	r5, r5, #6
 800c050:	d107      	bne.n	800c062 <_printf_common+0x52>
 800c052:	f104 0a19 	add.w	sl, r4, #25
 800c056:	68e3      	ldr	r3, [r4, #12]
 800c058:	f8d9 2000 	ldr.w	r2, [r9]
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	42ab      	cmp	r3, r5
 800c060:	dc28      	bgt.n	800c0b4 <_printf_common+0xa4>
 800c062:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c066:	6822      	ldr	r2, [r4, #0]
 800c068:	3300      	adds	r3, #0
 800c06a:	bf18      	it	ne
 800c06c:	2301      	movne	r3, #1
 800c06e:	0692      	lsls	r2, r2, #26
 800c070:	d42d      	bmi.n	800c0ce <_printf_common+0xbe>
 800c072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c076:	4639      	mov	r1, r7
 800c078:	4630      	mov	r0, r6
 800c07a:	47c0      	blx	r8
 800c07c:	3001      	adds	r0, #1
 800c07e:	d020      	beq.n	800c0c2 <_printf_common+0xb2>
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	68e5      	ldr	r5, [r4, #12]
 800c084:	f8d9 2000 	ldr.w	r2, [r9]
 800c088:	f003 0306 	and.w	r3, r3, #6
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	bf08      	it	eq
 800c090:	1aad      	subeq	r5, r5, r2
 800c092:	68a3      	ldr	r3, [r4, #8]
 800c094:	6922      	ldr	r2, [r4, #16]
 800c096:	bf0c      	ite	eq
 800c098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c09c:	2500      	movne	r5, #0
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	bfc4      	itt	gt
 800c0a2:	1a9b      	subgt	r3, r3, r2
 800c0a4:	18ed      	addgt	r5, r5, r3
 800c0a6:	f04f 0900 	mov.w	r9, #0
 800c0aa:	341a      	adds	r4, #26
 800c0ac:	454d      	cmp	r5, r9
 800c0ae:	d11a      	bne.n	800c0e6 <_printf_common+0xd6>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e008      	b.n	800c0c6 <_printf_common+0xb6>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	4652      	mov	r2, sl
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	47c0      	blx	r8
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d103      	bne.n	800c0ca <_printf_common+0xba>
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ca:	3501      	adds	r5, #1
 800c0cc:	e7c3      	b.n	800c056 <_printf_common+0x46>
 800c0ce:	18e1      	adds	r1, r4, r3
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	2030      	movs	r0, #48	; 0x30
 800c0d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0d8:	4422      	add	r2, r4
 800c0da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0e2:	3302      	adds	r3, #2
 800c0e4:	e7c5      	b.n	800c072 <_printf_common+0x62>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	47c0      	blx	r8
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d0e6      	beq.n	800c0c2 <_printf_common+0xb2>
 800c0f4:	f109 0901 	add.w	r9, r9, #1
 800c0f8:	e7d8      	b.n	800c0ac <_printf_common+0x9c>
	...

0800c0fc <_printf_i>:
 800c0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c100:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c104:	460c      	mov	r4, r1
 800c106:	7e09      	ldrb	r1, [r1, #24]
 800c108:	b085      	sub	sp, #20
 800c10a:	296e      	cmp	r1, #110	; 0x6e
 800c10c:	4617      	mov	r7, r2
 800c10e:	4606      	mov	r6, r0
 800c110:	4698      	mov	r8, r3
 800c112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c114:	f000 80b3 	beq.w	800c27e <_printf_i+0x182>
 800c118:	d822      	bhi.n	800c160 <_printf_i+0x64>
 800c11a:	2963      	cmp	r1, #99	; 0x63
 800c11c:	d036      	beq.n	800c18c <_printf_i+0x90>
 800c11e:	d80a      	bhi.n	800c136 <_printf_i+0x3a>
 800c120:	2900      	cmp	r1, #0
 800c122:	f000 80b9 	beq.w	800c298 <_printf_i+0x19c>
 800c126:	2958      	cmp	r1, #88	; 0x58
 800c128:	f000 8083 	beq.w	800c232 <_printf_i+0x136>
 800c12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c130:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c134:	e032      	b.n	800c19c <_printf_i+0xa0>
 800c136:	2964      	cmp	r1, #100	; 0x64
 800c138:	d001      	beq.n	800c13e <_printf_i+0x42>
 800c13a:	2969      	cmp	r1, #105	; 0x69
 800c13c:	d1f6      	bne.n	800c12c <_printf_i+0x30>
 800c13e:	6820      	ldr	r0, [r4, #0]
 800c140:	6813      	ldr	r3, [r2, #0]
 800c142:	0605      	lsls	r5, r0, #24
 800c144:	f103 0104 	add.w	r1, r3, #4
 800c148:	d52a      	bpl.n	800c1a0 <_printf_i+0xa4>
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6011      	str	r1, [r2, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da03      	bge.n	800c15a <_printf_i+0x5e>
 800c152:	222d      	movs	r2, #45	; 0x2d
 800c154:	425b      	negs	r3, r3
 800c156:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c15a:	486f      	ldr	r0, [pc, #444]	; (800c318 <_printf_i+0x21c>)
 800c15c:	220a      	movs	r2, #10
 800c15e:	e039      	b.n	800c1d4 <_printf_i+0xd8>
 800c160:	2973      	cmp	r1, #115	; 0x73
 800c162:	f000 809d 	beq.w	800c2a0 <_printf_i+0x1a4>
 800c166:	d808      	bhi.n	800c17a <_printf_i+0x7e>
 800c168:	296f      	cmp	r1, #111	; 0x6f
 800c16a:	d020      	beq.n	800c1ae <_printf_i+0xb2>
 800c16c:	2970      	cmp	r1, #112	; 0x70
 800c16e:	d1dd      	bne.n	800c12c <_printf_i+0x30>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	f043 0320 	orr.w	r3, r3, #32
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	e003      	b.n	800c182 <_printf_i+0x86>
 800c17a:	2975      	cmp	r1, #117	; 0x75
 800c17c:	d017      	beq.n	800c1ae <_printf_i+0xb2>
 800c17e:	2978      	cmp	r1, #120	; 0x78
 800c180:	d1d4      	bne.n	800c12c <_printf_i+0x30>
 800c182:	2378      	movs	r3, #120	; 0x78
 800c184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c188:	4864      	ldr	r0, [pc, #400]	; (800c31c <_printf_i+0x220>)
 800c18a:	e055      	b.n	800c238 <_printf_i+0x13c>
 800c18c:	6813      	ldr	r3, [r2, #0]
 800c18e:	1d19      	adds	r1, r3, #4
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6011      	str	r1, [r2, #0]
 800c194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c19c:	2301      	movs	r3, #1
 800c19e:	e08c      	b.n	800c2ba <_printf_i+0x1be>
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6011      	str	r1, [r2, #0]
 800c1a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1a8:	bf18      	it	ne
 800c1aa:	b21b      	sxthne	r3, r3
 800c1ac:	e7cf      	b.n	800c14e <_printf_i+0x52>
 800c1ae:	6813      	ldr	r3, [r2, #0]
 800c1b0:	6825      	ldr	r5, [r4, #0]
 800c1b2:	1d18      	adds	r0, r3, #4
 800c1b4:	6010      	str	r0, [r2, #0]
 800c1b6:	0628      	lsls	r0, r5, #24
 800c1b8:	d501      	bpl.n	800c1be <_printf_i+0xc2>
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	e002      	b.n	800c1c4 <_printf_i+0xc8>
 800c1be:	0668      	lsls	r0, r5, #25
 800c1c0:	d5fb      	bpl.n	800c1ba <_printf_i+0xbe>
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	4854      	ldr	r0, [pc, #336]	; (800c318 <_printf_i+0x21c>)
 800c1c6:	296f      	cmp	r1, #111	; 0x6f
 800c1c8:	bf14      	ite	ne
 800c1ca:	220a      	movne	r2, #10
 800c1cc:	2208      	moveq	r2, #8
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1d4:	6865      	ldr	r5, [r4, #4]
 800c1d6:	60a5      	str	r5, [r4, #8]
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	f2c0 8095 	blt.w	800c308 <_printf_i+0x20c>
 800c1de:	6821      	ldr	r1, [r4, #0]
 800c1e0:	f021 0104 	bic.w	r1, r1, #4
 800c1e4:	6021      	str	r1, [r4, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d13d      	bne.n	800c266 <_printf_i+0x16a>
 800c1ea:	2d00      	cmp	r5, #0
 800c1ec:	f040 808e 	bne.w	800c30c <_printf_i+0x210>
 800c1f0:	4665      	mov	r5, ip
 800c1f2:	2a08      	cmp	r2, #8
 800c1f4:	d10b      	bne.n	800c20e <_printf_i+0x112>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	07db      	lsls	r3, r3, #31
 800c1fa:	d508      	bpl.n	800c20e <_printf_i+0x112>
 800c1fc:	6923      	ldr	r3, [r4, #16]
 800c1fe:	6862      	ldr	r2, [r4, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	bfde      	ittt	le
 800c204:	2330      	movle	r3, #48	; 0x30
 800c206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c20a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c20e:	ebac 0305 	sub.w	r3, ip, r5
 800c212:	6123      	str	r3, [r4, #16]
 800c214:	f8cd 8000 	str.w	r8, [sp]
 800c218:	463b      	mov	r3, r7
 800c21a:	aa03      	add	r2, sp, #12
 800c21c:	4621      	mov	r1, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff fef6 	bl	800c010 <_printf_common>
 800c224:	3001      	adds	r0, #1
 800c226:	d14d      	bne.n	800c2c4 <_printf_i+0x1c8>
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	b005      	add	sp, #20
 800c22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c232:	4839      	ldr	r0, [pc, #228]	; (800c318 <_printf_i+0x21c>)
 800c234:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c238:	6813      	ldr	r3, [r2, #0]
 800c23a:	6821      	ldr	r1, [r4, #0]
 800c23c:	1d1d      	adds	r5, r3, #4
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6015      	str	r5, [r2, #0]
 800c242:	060a      	lsls	r2, r1, #24
 800c244:	d50b      	bpl.n	800c25e <_printf_i+0x162>
 800c246:	07ca      	lsls	r2, r1, #31
 800c248:	bf44      	itt	mi
 800c24a:	f041 0120 	orrmi.w	r1, r1, #32
 800c24e:	6021      	strmi	r1, [r4, #0]
 800c250:	b91b      	cbnz	r3, 800c25a <_printf_i+0x15e>
 800c252:	6822      	ldr	r2, [r4, #0]
 800c254:	f022 0220 	bic.w	r2, r2, #32
 800c258:	6022      	str	r2, [r4, #0]
 800c25a:	2210      	movs	r2, #16
 800c25c:	e7b7      	b.n	800c1ce <_printf_i+0xd2>
 800c25e:	064d      	lsls	r5, r1, #25
 800c260:	bf48      	it	mi
 800c262:	b29b      	uxthmi	r3, r3
 800c264:	e7ef      	b.n	800c246 <_printf_i+0x14a>
 800c266:	4665      	mov	r5, ip
 800c268:	fbb3 f1f2 	udiv	r1, r3, r2
 800c26c:	fb02 3311 	mls	r3, r2, r1, r3
 800c270:	5cc3      	ldrb	r3, [r0, r3]
 800c272:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c276:	460b      	mov	r3, r1
 800c278:	2900      	cmp	r1, #0
 800c27a:	d1f5      	bne.n	800c268 <_printf_i+0x16c>
 800c27c:	e7b9      	b.n	800c1f2 <_printf_i+0xf6>
 800c27e:	6813      	ldr	r3, [r2, #0]
 800c280:	6825      	ldr	r5, [r4, #0]
 800c282:	6961      	ldr	r1, [r4, #20]
 800c284:	1d18      	adds	r0, r3, #4
 800c286:	6010      	str	r0, [r2, #0]
 800c288:	0628      	lsls	r0, r5, #24
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	d501      	bpl.n	800c292 <_printf_i+0x196>
 800c28e:	6019      	str	r1, [r3, #0]
 800c290:	e002      	b.n	800c298 <_printf_i+0x19c>
 800c292:	066a      	lsls	r2, r5, #25
 800c294:	d5fb      	bpl.n	800c28e <_printf_i+0x192>
 800c296:	8019      	strh	r1, [r3, #0]
 800c298:	2300      	movs	r3, #0
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	4665      	mov	r5, ip
 800c29e:	e7b9      	b.n	800c214 <_printf_i+0x118>
 800c2a0:	6813      	ldr	r3, [r2, #0]
 800c2a2:	1d19      	adds	r1, r3, #4
 800c2a4:	6011      	str	r1, [r2, #0]
 800c2a6:	681d      	ldr	r5, [r3, #0]
 800c2a8:	6862      	ldr	r2, [r4, #4]
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7f3 ffc7 	bl	8000240 <memchr>
 800c2b2:	b108      	cbz	r0, 800c2b8 <_printf_i+0x1bc>
 800c2b4:	1b40      	subs	r0, r0, r5
 800c2b6:	6060      	str	r0, [r4, #4]
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2c2:	e7a7      	b.n	800c214 <_printf_i+0x118>
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	462a      	mov	r2, r5
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	47c0      	blx	r8
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	d0aa      	beq.n	800c228 <_printf_i+0x12c>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	079b      	lsls	r3, r3, #30
 800c2d6:	d413      	bmi.n	800c300 <_printf_i+0x204>
 800c2d8:	68e0      	ldr	r0, [r4, #12]
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	4298      	cmp	r0, r3
 800c2de:	bfb8      	it	lt
 800c2e0:	4618      	movlt	r0, r3
 800c2e2:	e7a3      	b.n	800c22c <_printf_i+0x130>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	464a      	mov	r2, r9
 800c2e8:	4639      	mov	r1, r7
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	47c0      	blx	r8
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	d09a      	beq.n	800c228 <_printf_i+0x12c>
 800c2f2:	3501      	adds	r5, #1
 800c2f4:	68e3      	ldr	r3, [r4, #12]
 800c2f6:	9a03      	ldr	r2, [sp, #12]
 800c2f8:	1a9b      	subs	r3, r3, r2
 800c2fa:	42ab      	cmp	r3, r5
 800c2fc:	dcf2      	bgt.n	800c2e4 <_printf_i+0x1e8>
 800c2fe:	e7eb      	b.n	800c2d8 <_printf_i+0x1dc>
 800c300:	2500      	movs	r5, #0
 800c302:	f104 0919 	add.w	r9, r4, #25
 800c306:	e7f5      	b.n	800c2f4 <_printf_i+0x1f8>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1ac      	bne.n	800c266 <_printf_i+0x16a>
 800c30c:	7803      	ldrb	r3, [r0, #0]
 800c30e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c312:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c316:	e76c      	b.n	800c1f2 <_printf_i+0xf6>
 800c318:	0800c7a1 	.word	0x0800c7a1
 800c31c:	0800c7b2 	.word	0x0800c7b2

0800c320 <__sread>:
 800c320:	b510      	push	{r4, lr}
 800c322:	460c      	mov	r4, r1
 800c324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c328:	f000 f894 	bl	800c454 <_read_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	bfab      	itete	ge
 800c330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c332:	89a3      	ldrhlt	r3, [r4, #12]
 800c334:	181b      	addge	r3, r3, r0
 800c336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c33a:	bfac      	ite	ge
 800c33c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c33e:	81a3      	strhlt	r3, [r4, #12]
 800c340:	bd10      	pop	{r4, pc}

0800c342 <__swrite>:
 800c342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c346:	461f      	mov	r7, r3
 800c348:	898b      	ldrh	r3, [r1, #12]
 800c34a:	05db      	lsls	r3, r3, #23
 800c34c:	4605      	mov	r5, r0
 800c34e:	460c      	mov	r4, r1
 800c350:	4616      	mov	r6, r2
 800c352:	d505      	bpl.n	800c360 <__swrite+0x1e>
 800c354:	2302      	movs	r3, #2
 800c356:	2200      	movs	r2, #0
 800c358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35c:	f000 f868 	bl	800c430 <_lseek_r>
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c36a:	81a3      	strh	r3, [r4, #12]
 800c36c:	4632      	mov	r2, r6
 800c36e:	463b      	mov	r3, r7
 800c370:	4628      	mov	r0, r5
 800c372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c376:	f000 b817 	b.w	800c3a8 <_write_r>

0800c37a <__sseek>:
 800c37a:	b510      	push	{r4, lr}
 800c37c:	460c      	mov	r4, r1
 800c37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c382:	f000 f855 	bl	800c430 <_lseek_r>
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	bf15      	itete	ne
 800c38c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c38e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c396:	81a3      	strheq	r3, [r4, #12]
 800c398:	bf18      	it	ne
 800c39a:	81a3      	strhne	r3, [r4, #12]
 800c39c:	bd10      	pop	{r4, pc}

0800c39e <__sclose>:
 800c39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a2:	f000 b813 	b.w	800c3cc <_close_r>
	...

0800c3a8 <_write_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4c07      	ldr	r4, [pc, #28]	; (800c3c8 <_write_r+0x20>)
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	6022      	str	r2, [r4, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f7f4 fc97 	bl	8000cea <_write>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_write_r+0x1e>
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_write_r+0x1e>
 800c3c4:	602b      	str	r3, [r5, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	20011388 	.word	0x20011388

0800c3cc <_close_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4c06      	ldr	r4, [pc, #24]	; (800c3e8 <_close_r+0x1c>)
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	f7f4 fca3 	bl	8000d22 <_close>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_close_r+0x1a>
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_close_r+0x1a>
 800c3e4:	602b      	str	r3, [r5, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20011388 	.word	0x20011388

0800c3ec <_fstat_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4c07      	ldr	r4, [pc, #28]	; (800c40c <_fstat_r+0x20>)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	f7f4 fc9e 	bl	8000d3a <_fstat>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	d102      	bne.n	800c408 <_fstat_r+0x1c>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	b103      	cbz	r3, 800c408 <_fstat_r+0x1c>
 800c406:	602b      	str	r3, [r5, #0]
 800c408:	bd38      	pop	{r3, r4, r5, pc}
 800c40a:	bf00      	nop
 800c40c:	20011388 	.word	0x20011388

0800c410 <_isatty_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4c06      	ldr	r4, [pc, #24]	; (800c42c <_isatty_r+0x1c>)
 800c414:	2300      	movs	r3, #0
 800c416:	4605      	mov	r5, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	f7f4 fc9d 	bl	8000d5a <_isatty>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_isatty_r+0x1a>
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	b103      	cbz	r3, 800c42a <_isatty_r+0x1a>
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	20011388 	.word	0x20011388

0800c430 <_lseek_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4c07      	ldr	r4, [pc, #28]	; (800c450 <_lseek_r+0x20>)
 800c434:	4605      	mov	r5, r0
 800c436:	4608      	mov	r0, r1
 800c438:	4611      	mov	r1, r2
 800c43a:	2200      	movs	r2, #0
 800c43c:	6022      	str	r2, [r4, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	f7f4 fc96 	bl	8000d70 <_lseek>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_lseek_r+0x1e>
 800c448:	6823      	ldr	r3, [r4, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_lseek_r+0x1e>
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	20011388 	.word	0x20011388

0800c454 <_read_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4c07      	ldr	r4, [pc, #28]	; (800c474 <_read_r+0x20>)
 800c458:	4605      	mov	r5, r0
 800c45a:	4608      	mov	r0, r1
 800c45c:	4611      	mov	r1, r2
 800c45e:	2200      	movs	r2, #0
 800c460:	6022      	str	r2, [r4, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	f7f4 fc24 	bl	8000cb0 <_read>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_read_r+0x1e>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_read_r+0x1e>
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	20011388 	.word	0x20011388

0800c478 <_init>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	bf00      	nop
 800c47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c47e:	bc08      	pop	{r3}
 800c480:	469e      	mov	lr, r3
 800c482:	4770      	bx	lr

0800c484 <_fini>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	bf00      	nop
 800c488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c48a:	bc08      	pop	{r3}
 800c48c:	469e      	mov	lr, r3
 800c48e:	4770      	bx	lr
