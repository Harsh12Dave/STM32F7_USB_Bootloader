
USB_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c640  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbdc  0800cbdc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbe4  0800cbe4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbe4  0800cbe4  0001cbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbe8  0800cbe8  0001cbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800cbec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000937c  20000090  0800cc7c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000940c  0800cc7c  0002940c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e1c  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005061  00000000  00000000  00046eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0004bf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  0004d290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e899  00000000  00000000  0004e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000171b4  00000000  00000000  0007cc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001017fa  00000000  00000000  00093e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001955ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e4  00000000  00000000  0019567c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c828 	.word	0x0800c828

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	0800c828 	.word	0x0800c828

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <BootAppImage>:
#include "bootloader.h"
#include "stm32f7xx_hal.h"
#include "log.h"

void BootAppImage(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
	BOOT_LOG("EXECUTING APPLICATION IMAGE\r\n");
 80005e6:	481b      	ldr	r0, [pc, #108]	; (8000654 <BootAppImage+0x74>)
 80005e8:	f00b fa7e 	bl	800bae8 <iprintf>
	uint8_t i = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	75fb      	strb	r3, [r7, #23]
	uint32_t msp_value = *(volatile uint32_t *)0x8100000;
 80005f0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	613b      	str	r3, [r7, #16]
	uint32_t resest_address = *(volatile uint32_t *)0x8100004;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <BootAppImage+0x78>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f383 8808 	msr	MSP, r3
	__set_MSP(msp_value);
	AppEntry Jump = (void *)resest_address;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
	/* Disable all interrupts */
	__disable_irq();
	/* Disable Systick timer */
	SysTick->CTRL = 0;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <BootAppImage+0x7c>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]

	/* Set the clock to the default state */
	HAL_RCC_DeInit();
 8000614:	f003 fa74 	bl	8003b00 <HAL_RCC_DeInit>
	/* Clear Interrupt Enable Register & Interrupt Pending Register */
	for (i=0;i<5;i++)
 8000618:	2300      	movs	r3, #0
 800061a:	75fb      	strb	r3, [r7, #23]
 800061c:	e010      	b.n	8000640 <BootAppImage+0x60>
	{
		NVIC->ICER[i]=0xFFFFFFFF;
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <BootAppImage+0x80>)
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	3320      	adds	r3, #32
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i]=0xFFFFFFFF;
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <BootAppImage+0x80>)
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	3360      	adds	r3, #96	; 0x60
 8000632:	f04f 31ff 	mov.w	r1, #4294967295
 8000636:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<5;i++)
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	3301      	adds	r3, #1
 800063e:	75fb      	strb	r3, [r7, #23]
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d9eb      	bls.n	800061e <BootAppImage+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000646:	b662      	cpsie	i
	}

	/* Re-enable all interrupts */
	__enable_irq();

	Jump();
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4798      	blx	r3
}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800c840 	.word	0x0800c840
 8000658:	08100004 	.word	0x08100004
 800065c:	e000e010 	.word	0xe000e010
 8000660:	e000e100 	.word	0xe000e100

08000664 <COMMAND_DOWNLOAD>:
extern FIL fileR;
extern DIR dir;
extern FILINFO fno;

void COMMAND_DOWNLOAD(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
	FILINFO file_info;
	/* Open the binary file to be downloaded */
	if (f_open(&fileR, DOWNLOAD_FILENAME, FA_READ) == FR_OK)
 800066a:	2201      	movs	r2, #1
 800066c:	4918      	ldr	r1, [pc, #96]	; (80006d0 <COMMAND_DOWNLOAD+0x6c>)
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <COMMAND_DOWNLOAD+0x70>)
 8000670:	f00a f9d2 	bl	800aa18 <f_open>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d125      	bne.n	80006c6 <COMMAND_DOWNLOAD+0x62>
	{
		memset(&file_info, 0 , sizeof(file_info));
 800067a:	463b      	mov	r3, r7
 800067c:	2218      	movs	r2, #24
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f00b f980 	bl	800b986 <memset>
		if(f_stat(DOWNLOAD_FILENAME, &file_info) == FR_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <COMMAND_DOWNLOAD+0x6c>)
 800068c:	f00a fd69 	bl	800b162 <f_stat>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d117      	bne.n	80006c6 <COMMAND_DOWNLOAD+0x62>
		{
			if (file_info.fsize > (0x81FFFFF - 0x8100000))
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800069c:	d213      	bcs.n	80006c6 <COMMAND_DOWNLOAD+0x62>
			{
				//Fail_Handler();
			}
			else
			{
				Erase_Flash();
 800069e:	f000 f86b 	bl	8000778 <Erase_Flash>
				COMMAND_ProgramFlashMemory();
 80006a2:	f000 f81d 	bl	80006e0 <COMMAND_ProgramFlashMemory>
				dummy();
 80006a6:	f000 f849 	bl	800073c <dummy>
				printf("Booting image\r\n");
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <COMMAND_DOWNLOAD+0x74>)
 80006ac:	f00b fa90 	bl	800bbd0 <puts>
			//	SetupBootAddress(0);
				BootAppImage();
 80006b0:	f7ff ff96 	bl	80005e0 <BootAppImage>
				f_close (&fileR);
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <COMMAND_DOWNLOAD+0x70>)
 80006b6:	f00a fd2a 	bl	800b10e <f_close>
				f_mount(NULL, (TCHAR const*)USBH_Path, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <COMMAND_DOWNLOAD+0x78>)
 80006be:	2000      	movs	r0, #0
 80006c0:	f00a f964 	bl	800a98c <f_mount>

			//Fail_Handler();
		}
	}

	return;
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop

}
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0800c868 	.word	0x0800c868
 80006d4:	20008118 	.word	0x20008118
 80006d8:	0800c874 	.word	0x0800c874
 80006dc:	20008d64 	.word	0x20008d64

080006e0 <COMMAND_ProgramFlashMemory>:
  * @brief  Programs the internal Flash memory
  * @param  None
  * @retval None
  */
void COMMAND_ProgramFlashMemory(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
	uint16_t BytesRead;

	struct flash_write_config wconfig;
    f_read (&fileR, RAM_Buf, BUFFER_SIZE, (void *)&BytesRead);
 80006e6:	f107 030e 	add.w	r3, r7, #14
 80006ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ee:	4910      	ldr	r1, [pc, #64]	; (8000730 <COMMAND_ProgramFlashMemory+0x50>)
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <COMMAND_ProgramFlashMemory+0x54>)
 80006f2:	f00a fb4f 	bl	800ad94 <f_read>
    /* The read data < "BUFFER_SIZE" Kbyte */
    if (BytesRead < BUFFER_SIZE)
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db13      	blt.n	8000726 <COMMAND_ProgramFlashMemory+0x46>
    {
    		BOOT_LOG("TRANSFERING APPLICATION IMAGE\r\n");
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <COMMAND_ProgramFlashMemory+0x58>)
 8000700:	f00b f9f2 	bl	800bae8 <iprintf>
			memset(&wconfig, 0, sizeof(wconfig));
 8000704:	463b      	mov	r3, r7
 8000706:	220c      	movs	r2, #12
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00b f93b 	bl	800b986 <memset>
			wconfig.address = 0x08100000;
 8000710:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8000714:	603b      	str	r3, [r7, #0]
			wconfig.data = RAM_Buf;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <COMMAND_ProgramFlashMemory+0x50>)
 8000718:	607b      	str	r3, [r7, #4]
			wconfig.data_length = BytesRead;
 800071a:	89fb      	ldrh	r3, [r7, #14]
 800071c:	60bb      	str	r3, [r7, #8]
			Write_To_Flash(&wconfig);
 800071e:	463b      	mov	r3, r7
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f85d 	bl	80007e0 <Write_To_Flash>
    }
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000ac 	.word	0x200000ac
 8000734:	20008118 	.word	0x20008118
 8000738:	0800c884 	.word	0x0800c884

0800073c <dummy>:

void dummy(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
		struct flash_write_config wconfig;
		uint32_t magic_number = 0x12341234;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <dummy+0x34>)
 8000744:	603b      	str	r3, [r7, #0]
				memset(&wconfig, 0, sizeof(wconfig));
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	220c      	movs	r2, #12
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f00b f91a 	bl	800b986 <memset>
				wconfig.address = 0x081C0000;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <dummy+0x38>)
 8000754:	607b      	str	r3, [r7, #4]
				wconfig.data = (uint8_t *)&magic_number;
 8000756:	463b      	mov	r3, r7
 8000758:	60bb      	str	r3, [r7, #8]
				wconfig.data_length = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	60fb      	str	r3, [r7, #12]
				Write_To_Flash(&wconfig);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f83d 	bl	80007e0 <Write_To_Flash>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	12341234 	.word	0x12341234
 8000774:	081c0000 	.word	0x081c0000

08000778 <Erase_Flash>:
#include "flash_if.h"

static FLASH_OBProgramInitTypeDef    OBInit;

HAL_StatusTypeDef Erase_Flash(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
	uint32_t FirstSector = 0, NbOfSectors = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
uint32_t Address = 0, SECTORError = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
 800078a:	2300      	movs	r3, #0
 800078c:	643b      	str	r3, [r7, #64]	; 0x40
__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000792:	2300      	movs	r3, #0
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
FLASH_OBProgramInitTypeDef    OBInit;
	/*Variable used for Erase procedure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000796:	f000 fdf5 	bl	8001384 <HAL_FLASH_Unlock>
	   /* Allow Access to option bytes sector */
	   HAL_FLASH_OB_Unlock();
 800079a:	f000 fe25 	bl	80013e8 <HAL_FLASH_OB_Unlock>
	   /* Get the Dual bank configuration status */
	   HAL_FLASHEx_OBGetConfig(&OBInit);
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f892 	bl	80018cc <HAL_FLASHEx_OBGetConfig>

	   /* Erase the user Flash area
	     (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   /* Get the 1st sector to erase */
	   FirstSector = 8;//GetSector(FLASH_USER_START_ADDR);
 80007a8:	2308      	movs	r3, #8
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	   /* Get the number of sector to erase from 1st sector*/
	   NbOfSectors = 3;//GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 80007ac:	2303      	movs	r3, #3
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
	   EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
	   EraseInitStruct.Sector        = FirstSector;
 80007b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007ba:	60fb      	str	r3, [r7, #12]
	   EraseInitStruct.NbSectors     = NbOfSectors;
 80007bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007be:	613b      	str	r3, [r7, #16]

	   /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	      you have to make sure that these data are rewritten before they are accessed during code
	      execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	      DCRST and ICRST bits in the FLASH_CR register. */
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80007c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 ff73 	bl	80016b4 <HAL_FLASHEx_Erase>
	   {
		   ;
	   }
	   /* Allow Access to option bytes sector */
	   HAL_FLASH_OB_Lock();
 80007ce:	f000 fe27 	bl	8001420 <HAL_FLASH_OB_Lock>
	   HAL_FLASH_Lock();
 80007d2:	f000 fdf9 	bl	80013c8 <HAL_FLASH_Lock>
	return HAL_OK;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Write_To_Flash>:


HAL_StatusTypeDef Write_To_Flash(struct flash_write_config * configuration)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef flashRetStatus = HAL_OK;
 80007e8:	2300      	movs	r3, #0
 80007ea:	75fb      	strb	r3, [r7, #23]
	uint32_t len = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
	uint32_t data = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
	uint8_t data_filler = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
	if(configuration)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d034      	beq.n	8000868 <Write_To_Flash+0x88>
	{

		if(Erase_Flash() == HAL_OK)
 80007fe:	f7ff ffbb 	bl	8000778 <Erase_Flash>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d12c      	bne.n	8000862 <Write_To_Flash+0x82>
		{
			HAL_FLASH_Unlock();
 8000808:	f000 fdbc 	bl	8001384 <HAL_FLASH_Unlock>
			while(len < configuration->data_length)
 800080c:	e023      	b.n	8000856 <Write_To_Flash+0x76>
			{
				memcpy(&data, configuration->data, 4);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60bb      	str	r3, [r7, #8]

				len += sizeof(uint32_t); //len raised by 4 // 16
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	3304      	adds	r3, #4
 800081a:	613b      	str	r3, [r7, #16]
				configuration->data = configuration->data + 4;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	1d1a      	adds	r2, r3, #4
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	605a      	str	r2, [r3, #4]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, configuration->address, data) == HAL_OK)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6819      	ldr	r1, [r3, #0]
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f04f 0400 	mov.w	r4, #0
 8000830:	461a      	mov	r2, r3
 8000832:	4623      	mov	r3, r4
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fd49 	bl	80012cc <HAL_FLASH_Program>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d105      	bne.n	800084c <Write_To_Flash+0x6c>
				{
					configuration->address += 4;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1d1a      	adds	r2, r3, #4
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e004      	b.n	8000856 <Write_To_Flash+0x76>
				}
				else
				{
					printf("flash write error\r\n");
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <Write_To_Flash+0x9c>)
 800084e:	f00b f9bf 	bl	800bbd0 <puts>
					flashRetStatus = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	75fb      	strb	r3, [r7, #23]
			while(len < configuration->data_length)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d3d6      	bcc.n	800080e <Write_To_Flash+0x2e>
 8000860:	e004      	b.n	800086c <Write_To_Flash+0x8c>
				}
			}
		}
		else
		{
			flashRetStatus = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	75fb      	strb	r3, [r7, #23]
 8000866:	e001      	b.n	800086c <Write_To_Flash+0x8c>
		}
	}
	else
	{
		flashRetStatus = HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	75fb      	strb	r3, [r7, #23]
	}

	HAL_FLASH_Lock();
 800086c:	f000 fdac 	bl	80013c8 <HAL_FLASH_Lock>

	return flashRetStatus;
 8000870:	7dfb      	ldrb	r3, [r7, #23]
}
 8000872:	4618      	mov	r0, r3
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	0800c8b0 	.word	0x0800c8b0

08000880 <SetupBootAddress>:


void SetupBootAddress(int addr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000888:	f000 fd7c 	bl	8001384 <HAL_FLASH_Unlock>

    /* Allow Access to option bytes sector */
    HAL_FLASH_OB_Unlock();
 800088c:	f000 fdac 	bl	80013e8 <HAL_FLASH_OB_Unlock>

    /* Switch Boot bank: the BootAddrx value "0x2040" corresponds to bank2 address: "0x08100000" */

    if(addr == 0)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10b      	bne.n	80008ae <SetupBootAddress+0x2e>
    {
    	OBInit.OptionType = OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <SetupBootAddress+0x60>)
 8000898:	2230      	movs	r2, #48	; 0x30
 800089a:	601a      	str	r2, [r3, #0]
 	    OBInit.BootAddr0  = __HAL_FLASH_CALC_BOOT_BASE_ADR(0x08000000);
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <SetupBootAddress+0x60>)
 800089e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a2:	619a      	str	r2, [r3, #24]
    	OBInit.BootAddr1  = __HAL_FLASH_CALC_BOOT_BASE_ADR(0x08000000);
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <SetupBootAddress+0x60>)
 80008a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008aa:	61da      	str	r2, [r3, #28]
 80008ac:	e00a      	b.n	80008c4 <SetupBootAddress+0x44>
    }
    else
    {
       	OBInit.OptionType = OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <SetupBootAddress+0x60>)
 80008b0:	2230      	movs	r2, #48	; 0x30
 80008b2:	601a      	str	r2, [r3, #0]
     	OBInit.BootAddr0  = __HAL_FLASH_CALC_BOOT_BASE_ADR(0x08100000);
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <SetupBootAddress+0x60>)
 80008b6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 80008ba:	619a      	str	r2, [r3, #24]
        OBInit.BootAddr1  = __HAL_FLASH_CALC_BOOT_BASE_ADR(0x08100000);
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <SetupBootAddress+0x60>)
 80008be:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 80008c2:	61da      	str	r2, [r3, #28]
    }

    if(HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK)
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <SetupBootAddress+0x60>)
 80008c6:	f000 ff65 	bl	8001794 <HAL_FLASHEx_OBProgram>
    {
    	;
    }

    /* Start the Option Bytes programming process */
    if (HAL_FLASH_OB_Launch() != HAL_OK)
 80008ca:	f000 fdb9 	bl	8001440 <HAL_FLASH_OB_Launch>
    {
    	;
    }

    /* Prevent Access to option bytes sector */
    HAL_FLASH_OB_Lock();
 80008ce:	f000 fda7 	bl	8001420 <HAL_FLASH_OB_Lock>

    /* Disable the Flash option control register access (recommended to protect
    the option Bytes against possible unwanted operations) */
    HAL_FLASH_Lock();
 80008d2:	f000 fd79 	bl	80013c8 <HAL_FLASH_Lock>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200080ac 	.word	0x200080ac

080008e4 <ImageThereorNot>:

int ImageThereorNot(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
	int ret = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
	if(*(uint32_t *)0x081C0000 == 0x12341234)
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <ImageThereorNot+0x28>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <ImageThereorNot+0x2c>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d101      	bne.n	80008fc <ImageThereorNot+0x18>
	{
		ret = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
	}

	return ret;
 80008fc:	687b      	ldr	r3, [r7, #4]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	081c0000 	.word	0x081c0000
 8000910:	12341234 	.word	0x12341234

08000914 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800091c:	1d39      	adds	r1, r7, #4
 800091e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000922:	2201      	movs	r2, #1
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <__io_putchar+0x20>)
 8000926:	f003 febf 	bl	80046a8 <HAL_UART_Transmit>

  return ch;
 800092a:	687b      	ldr	r3, [r7, #4]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20008578 	.word	0x20008578

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800093c:	f000 fb35 	bl	8000faa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000940:	f000 f82e 	bl	80009a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000944:	f000 f89e 	bl	8000a84 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000948:	f000 f86c 	bl	8000a24 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 800094c:	f005 fa80 	bl	8005e50 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 8000950:	f00a fc9c 	bl	800b28c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */
	if(ImageThereorNot())
 8000954:	f7ff ffc6 	bl	80008e4 <ImageThereorNot>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d006      	beq.n	800096c <main+0x34>
	{
		BOOT_LOG("Image is already present jumping to it\r\n");
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <main+0x58>)
 8000960:	f00b f8c2 	bl	800bae8 <iprintf>
		SetupBootAddress(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff ff8b 	bl	8000880 <SetupBootAddress>
 800096a:	e005      	b.n	8000978 <main+0x40>
	}
	else
	{
		SetupBootAddress(0);
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ff87 	bl	8000880 <SetupBootAddress>
		BOOT_LOG("Image not there\r\n");
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <main+0x5c>)
 8000974:	f00b f8b8 	bl	800bae8 <iprintf>
	}
	BOOT_LOG("HW PERIPHERALS ARE INITIALIZED..\r\n");
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <main+0x60>)
 800097a:	f00b f8b5 	bl	800bae8 <iprintf>
	BOOT_LOG("ENTERING USB EVENT LOOP..\r\n");
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <main+0x64>)
 8000980:	f00b f8b2 	bl	800bae8 <iprintf>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000984:	f00a fca8 	bl	800b2d8 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		USBEventHandler();
 8000988:	f000 f926 	bl	8000bd8 <USBEventHandler>
		MX_USB_HOST_Process();
 800098c:	e7fa      	b.n	8000984 <main+0x4c>
 800098e:	bf00      	nop
 8000990:	0800c8c4 	.word	0x0800c8c4
 8000994:	0800c8f8 	.word	0x0800c8f8
 8000998:	0800c914 	.word	0x0800c914
 800099c:	0800c944 	.word	0x0800c944

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b092      	sub	sp, #72	; 0x48
 80009a4:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	603b      	str	r3, [r7, #0]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ae:	607b      	str	r3, [r7, #4]
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009bc:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80009be:	2308      	movs	r3, #8
 80009c0:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.PLL.PLLN = 432;
 80009c2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009cc:	2309      	movs	r3, #9
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLR = 7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 f972 	bl	8003cc0 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d000      	beq.n	80009e4 <SystemClock_Config+0x44>
	  {
	    while (1)
 80009e2:	e7fe      	b.n	80009e2 <SystemClock_Config+0x42>
	    {
	    };
	  }

	  /* Activate the OverDrive to reach the 216 Mhz Frequency */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e4:	f003 f83c 	bl	8003a60 <HAL_PWREx_EnableOverDrive>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d000      	beq.n	80009f0 <SystemClock_Config+0x50>
	  {
	    while (1)
 80009ee:	e7fe      	b.n	80009ee <SystemClock_Config+0x4e>
	    };
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	   * clocks dividers */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80009f0:	230f      	movs	r3, #15
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
	                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2302      	movs	r3, #2
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fc04 	bl	800421c <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <SystemClock_Config+0x7c>
	  {
	    while (1)
 8000a1a:	e7fe      	b.n	8000a1a <SystemClock_Config+0x7a>
	    {
	    };
	  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3748      	adds	r7, #72	; 0x48
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <MX_USART3_UART_Init+0x5c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a68:	f003 fdd0 	bl	800460c <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f8f1 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20008578 	.word	0x20008578
 8000a80:	40004800 	.word	0x40004800

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a49      	ldr	r2, [pc, #292]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a43      	ldr	r2, [pc, #268]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a3d      	ldr	r2, [pc, #244]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a37      	ldr	r2, [pc, #220]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b30:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <MX_GPIO_Init+0x144>)
 8000b32:	f001 fa67 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4824      	ldr	r0, [pc, #144]	; (8000bcc <MX_GPIO_Init+0x148>)
 8000b3c:	f001 fa62 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0x14c>)
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <MX_GPIO_Init+0x150>)
 8000b56:	f001 f8ab 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b5a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0x144>)
 8000b74:	f001 f89c 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480f      	ldr	r0, [pc, #60]	; (8000bcc <MX_GPIO_Init+0x148>)
 8000b90:	f001 f88e 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <MX_GPIO_Init+0x148>)
 8000ba8:	f001 f882 	bl	8001cb0 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2028      	movs	r0, #40	; 0x28
 8000bb2:	f000 fb54 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb6:	2028      	movs	r0, #40	; 0x28
 8000bb8:	f000 fb6d 	bl	8001296 <HAL_NVIC_EnableIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	10110000 	.word	0x10110000
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <USBEventHandler>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void USBEventHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	switch(Appli_state)
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <USBEventHandler+0x68>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d82b      	bhi.n	8000c3c <USBEventHandler+0x64>
 8000be4:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <USBEventHandler+0x14>)
 8000be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bea:	bf00      	nop
 8000bec:	08000c37 	.word	0x08000c37
 8000bf0:	08000bfd 	.word	0x08000bfd
 8000bf4:	08000c19 	.word	0x08000c19
 8000bf8:	08000c25 	.word	0x08000c25
	{
		case APPLICATION_IDLE:
			break;

		case APPLICATION_START:
			if(f_mount(&myUsbFatFS, (TCHAR const*)USBH_Path, 0) == FR_OK)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4911      	ldr	r1, [pc, #68]	; (8000c44 <USBEventHandler+0x6c>)
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <USBEventHandler+0x70>)
 8000c02:	f009 fec3 	bl	800a98c <f_mount>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d116      	bne.n	8000c3a <USBEventHandler+0x62>
			{
				//Turn Green LED ON
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2101      	movs	r1, #1
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <USBEventHandler+0x74>)
 8000c12:	f001 f9f7 	bl	8002004 <HAL_GPIO_WritePin>
			}
			break;
 8000c16:	e010      	b.n	8000c3a <USBEventHandler+0x62>

		case APPLICATION_READY:
			BOOT_LOG("PREPARING TO DOWNLOAD APPLICATION IMAGE\r\n");
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <USBEventHandler+0x78>)
 8000c1a:	f00a ff65 	bl	800bae8 <iprintf>
			COMMAND_DOWNLOAD();
 8000c1e:	f7ff fd21 	bl	8000664 <COMMAND_DOWNLOAD>
			break;
 8000c22:	e00b      	b.n	8000c3c <USBEventHandler+0x64>

		case APPLICATION_DISCONNECT:
			BOOT_LOG("APPLICATION DISCONNECT\r\n");
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <USBEventHandler+0x7c>)
 8000c26:	f00a ff5f 	bl	800bae8 <iprintf>
			//Turn Green LED OFF
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <USBEventHandler+0x74>)
 8000c30:	f001 f9e8 	bl	8002004 <HAL_GPIO_WritePin>
			break;
 8000c34:	e002      	b.n	8000c3c <USBEventHandler+0x64>
			break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <USBEventHandler+0x64>
			break;
 8000c3a:	bf00      	nop
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000810c 	.word	0x2000810c
 8000c44:	20008d64 	.word	0x20008d64
 8000c48:	20008664 	.word	0x20008664
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	0800c96c 	.word	0x0800c96c
 8000c54:	0800c9a0 	.word	0x0800c9a0

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x44>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x44>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x44>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x7c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d128      	bne.n	8000d24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d14:	2307      	movs	r3, #7
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_UART_MspInit+0x84>)
 8000d20:	f000 ffc6 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40004800 	.word	0x40004800
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f94a 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static uint16_t i = 0;
  i++;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <SysTick_Handler+0x30>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <SysTick_Handler+0x30>)
 8000d9a:	801a      	strh	r2, [r3, #0]
  if(i == 500)
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SysTick_Handler+0x30>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da4:	d105      	bne.n	8000db2 <SysTick_Handler+0x2a>
  {
	  APP_LOG("This dummy App-1 is not blinking any LED\r\n");
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <SysTick_Handler+0x34>)
 8000da8:	f00a ff12 	bl	800bbd0 <puts>
	  i = 0;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <SysTick_Handler+0x30>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200080cc 	.word	0x200080cc
 8000dbc:	0800ca24 	.word	0x0800ca24

08000dc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <OTG_FS_IRQHandler+0x10>)
 8000dc6:	f001 fbe9 	bl	800259c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20009144 	.word	0x20009144

08000dd4 <EXTI15_10_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ddc:	f001 f92c 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00a      	b.n	8000e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df6:	f3af 8000 	nop.w
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	b2ca      	uxtb	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf0      	blt.n	8000df6 <_read+0x12>
	}

return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e009      	b.n	8000e44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fd6b 	bl	8000914 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbf1      	blt.n	8000e30 <_write+0x12>
	}
	return len;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_close>:

int _close(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_isatty>:

int _isatty(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f00a fd04 	bl	800b8fc <__errno>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20080000 	.word	0x20080000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	200080d0 	.word	0x200080d0
 8000f28:	20009410 	.word	0x20009410

08000f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <SystemInit+0x28>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <SystemInit+0x28>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SystemInit+0x28>)
 8000f42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f46:	609a      	str	r2, [r3, #8]
#endif
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
  ldr  r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd3 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f00a fcbf 	bl	800b908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fcd5 	bl	8000938 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f94:	0800cbec 	.word	0x0800cbec
  ldr  r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f9c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000fa0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000fa4:	2000940c 	.word	0x2000940c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>

08000faa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f94a 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f805 	bl	8000fc4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fba:	f7ff fe55 	bl	8000c68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f965 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f92d 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	200088e0 	.word	0x200088e0

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200088e0 	.word	0x200088e0

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_Delay+0x40>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x40>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	05fa0000 	.word	0x05fa0000

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_FLASH_Program+0xb0>)
 80012e0:	7d1b      	ldrb	r3, [r3, #20]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_FLASH_Program+0x1e>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e043      	b.n	8001372 <HAL_FLASH_Program+0xa6>
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_FLASH_Program+0xb0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012f4:	f000 f8b6 	bl	8001464 <FLASH_WaitForLastOperation>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d133      	bne.n	800136a <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d823      	bhi.n	8001350 <HAL_FLASH_Program+0x84>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <HAL_FLASH_Program+0x44>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001339 	.word	0x08001339
 800131c:	08001345 	.word	0x08001345
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001320:	783b      	ldrb	r3, [r7, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	68b8      	ldr	r0, [r7, #8]
 8001326:	f000 f957 	bl	80015d8 <FLASH_Program_Byte>
        break;
 800132a:	e012      	b.n	8001352 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800132c:	883b      	ldrh	r3, [r7, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f000 f92b 	bl	800158c <FLASH_Program_HalfWord>
        break;
 8001336:	e00c      	b.n	8001352 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f000 f901 	bl	8001544 <FLASH_Program_Word>
        break;
 8001342:	e006      	b.n	8001352 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f000 f8cb 	bl	80014e4 <FLASH_Program_DoubleWord>
        break;
 800134e:	e000      	b.n	8001352 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001350:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001352:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001356:	f000 f885 	bl	8001464 <FLASH_WaitForLastOperation>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_FLASH_Program+0xb4>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_FLASH_Program+0xb4>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_FLASH_Program+0xb0>)
 800136c:	2200      	movs	r2, #0
 800136e:	751a      	strb	r2, [r3, #20]

  return status;
 8001370:	7dfb      	ldrb	r3, [r7, #23]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200088e4 	.word	0x200088e4
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_FLASH_Unlock+0x38>)
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da0b      	bge.n	80013ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_FLASH_Unlock+0x38>)
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_FLASH_Unlock+0x3c>)
 800139a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_FLASH_Unlock+0x38>)
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_FLASH_Unlock+0x40>)
 80013a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_FLASH_Unlock+0x38>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	da01      	bge.n	80013ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80013ae:	79fb      	ldrb	r3, [r7, #7]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40023c00 	.word	0x40023c00
 80013c0:	45670123 	.word	0x45670123
 80013c4:	cdef89ab 	.word	0xcdef89ab

080013c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_FLASH_Lock+0x1c>)
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_FLASH_Lock+0x1c>)
 80013d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_FLASH_OB_Unlock+0x2c>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_FLASH_OB_Unlock+0x2c>)
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_FLASH_OB_Unlock+0x30>)
 80013fc:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_FLASH_OB_Unlock+0x2c>)
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_FLASH_OB_Unlock+0x34>)
 8001402:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001404:	2300      	movs	r3, #0
 8001406:	e000      	b.n	800140a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40023c00 	.word	0x40023c00
 8001418:	08192a3b 	.word	0x08192a3b
 800141c:	4c5d6e7f 	.word	0x4c5d6e7f

08001420 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_FLASH_OB_Lock+0x1c>)
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_FLASH_OB_Lock+0x1c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_FLASH_OB_Launch+0x20>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_FLASH_OB_Launch+0x20>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001450:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001454:	f000 f806 	bl	8001464 <FLASH_WaitForLastOperation>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <FLASH_WaitForLastOperation+0x78>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001476:	f7ff fde9 	bl	800104c <HAL_GetTick>
 800147a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800147c:	e010      	b.n	80014a0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d00c      	beq.n	80014a0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <FLASH_WaitForLastOperation+0x38>
 800148c:	f7ff fdde 	bl	800104c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	d201      	bcs.n	80014a0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e019      	b.n	80014d4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <FLASH_WaitForLastOperation+0x7c>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e8      	bne.n	800147e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <FLASH_WaitForLastOperation+0x7c>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014b8:	f000 f8b2 	bl	8001620 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e009      	b.n	80014d4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <FLASH_WaitForLastOperation+0x7c>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <FLASH_WaitForLastOperation+0x7c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
  
}  
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200088e4 	.word	0x200088e4
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014e4:	b490      	push	{r4, r7}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <FLASH_Program_DoubleWord+0x5c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <FLASH_Program_DoubleWord+0x5c>)
 80014f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <FLASH_Program_DoubleWord+0x5c>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <FLASH_Program_DoubleWord+0x5c>)
 8001502:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <FLASH_Program_DoubleWord+0x5c>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <FLASH_Program_DoubleWord+0x5c>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800151a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	f04f 0400 	mov.w	r4, #0
 8001526:	0013      	movs	r3, r2
 8001528:	2400      	movs	r4, #0
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	3204      	adds	r2, #4
 800152e:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001530:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bc90      	pop	{r4, r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00

08001544 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <FLASH_Program_Word+0x44>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <FLASH_Program_Word+0x44>)
 8001554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001558:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <FLASH_Program_Word+0x44>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <FLASH_Program_Word+0x44>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <FLASH_Program_Word+0x44>)
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <FLASH_Program_Word+0x44>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40023c00 	.word	0x40023c00

0800158c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <FLASH_Program_HalfWord+0x48>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <FLASH_Program_HalfWord+0x48>)
 800159e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <FLASH_Program_HalfWord+0x48>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <FLASH_Program_HalfWord+0x48>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <FLASH_Program_HalfWord+0x48>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <FLASH_Program_HalfWord+0x48>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <FLASH_Program_Byte+0x44>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <FLASH_Program_Byte+0x44>)
 80015ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <FLASH_Program_Byte+0x44>)
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <FLASH_Program_Byte+0x44>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <FLASH_Program_Byte+0x44>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <FLASH_Program_Byte+0x44>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <FLASH_SetErrorCode+0x8c>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 800163a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <FLASH_SetErrorCode+0x8c>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 8001652:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <FLASH_SetErrorCode+0x8c>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 800166a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <FLASH_SetErrorCode+0x8c>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 8001682:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <FLASH_SetErrorCode+0x8c>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <FLASH_SetErrorCode+0x90>)
 800169a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <FLASH_SetErrorCode+0x8c>)
 800169e:	22f2      	movs	r2, #242	; 0xf2
 80016a0:	60da      	str	r2, [r3, #12]
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40023c00 	.word	0x40023c00
 80016b0:	200088e4 	.word	0x200088e4

080016b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_FLASHEx_Erase+0xd4>)
 80016c8:	7d1b      	ldrb	r3, [r3, #20]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_FLASHEx_Erase+0x1e>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e056      	b.n	8001780 <HAL_FLASHEx_Erase+0xcc>
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_FLASHEx_Erase+0xd4>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016dc:	f7ff fec2 	bl	8001464 <FLASH_WaitForLastOperation>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d146      	bne.n	8001778 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d115      	bne.n	8001726 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f000 f90c 	bl	8001924 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800170c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001710:	f7ff fea8 	bl	8001464 <FLASH_WaitForLastOperation>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_FLASHEx_Erase+0xd8>)
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	491b      	ldr	r1, [pc, #108]	; (800178c <HAL_FLASHEx_Erase+0xd8>)
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_FLASHEx_Erase+0xdc>)
 8001720:	4013      	ands	r3, r2
 8001722:	610b      	str	r3, [r1, #16]
 8001724:	e028      	b.n	8001778 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	e01c      	b.n	8001768 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4619      	mov	r1, r3
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f000 f92e 	bl	8001998 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800173c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001740:	f7ff fe90 	bl	8001464 <FLASH_WaitForLastOperation>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_FLASHEx_Erase+0xd8>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_FLASHEx_Erase+0xd8>)
 800174e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001752:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	601a      	str	r2, [r3, #0]
          break;
 8001760:	e00a      	b.n	8001778 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3301      	adds	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4413      	add	r3, r2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	429a      	cmp	r2, r3
 8001776:	d3da      	bcc.n	800172e <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_FLASHEx_Erase+0xd4>)
 800177a:	2200      	movs	r2, #0
 800177c:	751a      	strb	r2, [r3, #20]

  return status;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200088e4 	.word	0x200088e4
 800178c:	40023c00 	.word	0x40023c00
 8001790:	ffff7ffb 	.word	0xffff7ffb

08001794 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017a0:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_FLASHEx_OBProgram+0x134>)
 80017a2:	7d1b      	ldrb	r3, [r3, #20]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_FLASHEx_OBProgram+0x18>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e089      	b.n	80018c0 <HAL_FLASHEx_OBProgram+0x12c>
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_FLASHEx_OBProgram+0x134>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d012      	beq.n	80017e4 <HAL_FLASHEx_OBProgram+0x50>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_FLASHEx_OBProgram+0x42>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f98e 	bl	8001aec <FLASH_OB_EnableWRP>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e006      	b.n	80017e4 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f9a4 	bl	8001b28 <FLASH_OB_DisableWRP>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_FLASHEx_OBProgram+0x6c>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f9b2 	bl	8001b60 <FLASH_OB_RDP_LevelConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
  }

  /* USER  configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d02b      	beq.n	8001864 <HAL_FLASHEx_OBProgram+0xd0>
  {
#if defined (FLASH_OPTCR_nDBANK)
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f003 0410 	and.w	r4, r3, #16
                                 pOBInit->USERConfig & OB_IWDG_SW,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001818:	f003 0520 	and.w	r5, r3, #32
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001820:	f003 0640 	and.w	r6, r3, #64	; 0x40
                                 pOBInit->USERConfig & OB_STDBY_NO_RST, 
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001828:	f003 0c80 	and.w	ip, r3, #128	; 0x80
                                 pOBInit->USERConfig & OB_IWDG_STOP_ACTIVE,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                                 pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE,
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6952      	ldr	r2, [r2, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001838:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
                                 pOBInit->USERConfig & OB_NDBANK_SINGLE_BANK,
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	6949      	ldr	r1, [r1, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001840:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
                                 pOBInit->USERConfig & OB_DUAL_BOOT_DISABLE);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	6940      	ldr	r0, [r0, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 8001848:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 800184c:	9003      	str	r0, [sp, #12]
 800184e:	9102      	str	r1, [sp, #8]
 8001850:	9201      	str	r2, [sp, #4]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4663      	mov	r3, ip
 8001856:	4632      	mov	r2, r6
 8001858:	4629      	mov	r1, r5
 800185a:	4620      	mov	r0, r4
 800185c:	f000 f8fc 	bl	8001a58 <FLASH_OB_UserConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]
                                 pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE);    
#endif /* FLASH_OPTCR_nDBANK */
  }
  
  /* BOR Level  configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_FLASHEx_OBProgram+0xec>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f98c 	bl	8001b94 <FLASH_OB_BOR_LevelConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Boot 0 Address configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_FLASHEx_OBProgram+0x108>
  {
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4619      	mov	r1, r3
 8001892:	2010      	movs	r0, #16
 8001894:	f000 f994 	bl	8001bc0 <FLASH_OB_BootAddressConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Boot 1 Address configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <HAL_FLASHEx_OBProgram+0x124>
  {
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	4619      	mov	r1, r3
 80018ae:	2020      	movs	r0, #32
 80018b0:	f000 f986 	bl	8001bc0 <FLASH_OB_BootAddressConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
    status = FLASH_OB_PCROP_RDP_Config(pOBInit->PCROPRdp);
  }
#endif /* FLASH_OPTCR2_PCROP */

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_FLASHEx_OBProgram+0x134>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	751a      	strb	r2, [r3, #20]

  return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	200088e4 	.word	0x200088e4

080018cc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	223f      	movs	r2, #63	; 0x3f
 80018d8:	601a      	str	r2, [r3, #0]
	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;

  /*Get WRP*/
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 80018da:	f000 f8ad 	bl	8001a38 <FLASH_OB_GetWRP>
 80018de:	4602      	mov	r2, r0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80018e4:	f000 f99a 	bl	8001c1c <FLASH_OB_GetRDP>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	60da      	str	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80018f0:	f000 f8ec 	bl	8001acc <FLASH_OB_GetUser>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	615a      	str	r2, [r3, #20]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 80018fa:	f000 f9af 	bl	8001c5c <FLASH_OB_GetBOR>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
  
  /*Get Boot Address when Boot pin = 0 */
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8001904:	2010      	movs	r0, #16
 8001906:	f000 f9b7 	bl	8001c78 <FLASH_OB_GetBootAddress>
 800190a:	4602      	mov	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  
  /*Get Boot Address when Boot pin = 1 */
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 8001910:	2020      	movs	r0, #32
 8001912:	f000 f9b1 	bl	8001c78 <FLASH_OB_GetBootAddress>
 8001916:	4602      	mov	r2, r0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	61da      	str	r2, [r3, #28]
  pOBInit->PCROPSector = FLASH_OB_GetPCROP();
  
  /*Get PCROP_RDP Value */
  pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
#endif /* FLASH_OPTCR2_PCROP */
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <FLASH_MassErase+0x70>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <FLASH_MassErase+0x70>)
 8001936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d107      	bne.n	8001952 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <FLASH_MassErase+0x70>)
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	4913      	ldr	r1, [pc, #76]	; (8001994 <FLASH_MassErase+0x70>)
 8001948:	f248 0304 	movw	r3, #32772	; 0x8004
 800194c:	4313      	orrs	r3, r2
 800194e:	610b      	str	r3, [r1, #16]
 8001950:	e00f      	b.n	8001972 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d106      	bne.n	8001966 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <FLASH_MassErase+0x70>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <FLASH_MassErase+0x70>)
 800195e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001962:	6113      	str	r3, [r2, #16]
 8001964:	e005      	b.n	8001972 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <FLASH_MassErase+0x70>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <FLASH_MassErase+0x70>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <FLASH_MassErase+0x70>)
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	4313      	orrs	r3, r2
 800197c:	4a05      	ldr	r2, [pc, #20]	; (8001994 <FLASH_MassErase+0x70>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6113      	str	r3, [r2, #16]
 8001984:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40023c00 	.word	0x40023c00

08001998 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e010      	b.n	80019d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d103      	bne.n	80019c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e009      	b.n	80019d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d103      	bne.n	80019d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80019c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e002      	b.n	80019d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80019d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0b      	cmp	r3, #11
 80019da:	d902      	bls.n	80019e2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 80019e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	4910      	ldr	r1, [pc, #64]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 8001a00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <FLASH_Erase_Sector+0x9c>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	6113      	str	r3, [r2, #16]
 8001a24:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <FLASH_OB_GetWRP+0x18>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <FLASH_OB_GetWRP+0x1c>)
 8001a42:	4013      	ands	r3, r2
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	0fff0000 	.word	0x0fff0000

08001a58 <FLASH_OB_UserConfig>:

  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t Stdby, uint32_t Iwdgstop, \
                                             uint32_t Iwdgstdby, uint32_t NDBank, uint32_t NDBoot)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  uint32_t useroptionmask = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  uint32_t useroptionvalue = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]

  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_OB_IWDG_STDBY_FREEZE(Iwdgstdby));
  assert_param(IS_OB_NDBANK(NDBank));
  assert_param(IS_OB_NDBOOT(NDBoot));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a76:	f7ff fcf5 	bl	8001464 <FLASH_WaitForLastOperation>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11a      	bne.n	8001aba <FLASH_OB_UserConfig+0x62>
  {
    useroptionmask = (FLASH_OPTCR_WWDG_SW | FLASH_OPTCR_IWDG_SW | FLASH_OPTCR_nRST_STOP | \
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <FLASH_OB_UserConfig+0x6c>)
 8001a86:	61fb      	str	r3, [r7, #28]
                      FLASH_OPTCR_nRST_STDBY | FLASH_OPTCR_IWDG_STOP | FLASH_OPTCR_IWDG_STDBY | \
                      FLASH_OPTCR_nDBOOT | FLASH_OPTCR_nDBANK);
                      
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        
    /* Update User Option Byte */               
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <FLASH_OB_UserConfig+0x70>)
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	4905      	ldr	r1, [pc, #20]	; (8001ac8 <FLASH_OB_UserConfig+0x70>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	614b      	str	r3, [r1, #20]
  }
  
  return status; 
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	f00000f0 	.word	0xf00000f0
 8001ac8:	40023c00 	.word	0x40023c00

08001acc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6), 
  *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <FLASH_OB_GetUser+0x18>)
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <FLASH_OB_GetUser+0x1c>)
 8001ad6:	4013      	ands	r3, r2
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00
 8001ae8:	f00000f0 	.word	0xf00000f0

08001aec <FLASH_OB_EnableWRP>:
  *            @arg OB_WRP_SECTOR_All
  *
  * @retval HAL FLASH State   
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001af8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001afc:	f7ff fcb2 	bl	8001464 <FLASH_WaitForLastOperation>
 8001b00:	4603      	mov	r3, r0
 8001b02:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <FLASH_OB_EnableWRP+0x2c>
  {
    /*Write protection enabled on sectors */
    FLASH->OPTCR &= (~WRPSector);  
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <FLASH_OB_EnableWRP+0x38>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4904      	ldr	r1, [pc, #16]	; (8001b24 <FLASH_OB_EnableWRP+0x38>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	614b      	str	r3, [r1, #20]
  }
  
  return status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <FLASH_OB_DisableWRP>:
  *
  *
  * @retval HAL Status   
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b38:	f7ff fc94 	bl	8001464 <FLASH_WaitForLastOperation>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <FLASH_OB_DisableWRP+0x2a>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <FLASH_OB_DisableWRP+0x34>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	4904      	ldr	r1, [pc, #16]	; (8001b5c <FLASH_OB_DisableWRP+0x34>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	614b      	str	r3, [r1, #20]
  }

  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b72:	f7ff fc77 	bl	8001464 <FLASH_WaitForLastOperation>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <FLASH_OB_RDP_LevelConfig+0x30>)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023c15 	.word	0x40023c15

08001b94 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <FLASH_OB_BOR_LevelConfig+0x28>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f023 020c 	bic.w	r2, r3, #12
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4904      	ldr	r1, [pc, #16]	; (8001bbc <FLASH_OB_BOR_LevelConfig+0x28>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	614b      	str	r3, [r1, #20]
  
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
  
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <FLASH_OB_BootAddressConfig>:
  *            @arg OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000)              
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bd2:	f7ff fc47 	bl	8001464 <FLASH_WaitForLastOperation>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d113      	bne.n	8001c08 <FLASH_OB_BootAddressConfig+0x48>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d108      	bne.n	8001bf8 <FLASH_OB_BootAddressConfig+0x38>
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <FLASH_OB_BootAddressConfig+0x54>)
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <FLASH_OB_BootAddressConfig+0x58>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	4909      	ldr	r1, [pc, #36]	; (8001c14 <FLASH_OB_BootAddressConfig+0x54>)
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	618b      	str	r3, [r1, #24]
 8001bf6:	e007      	b.n	8001c08 <FLASH_OB_BootAddressConfig+0x48>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <FLASH_OB_BootAddressConfig+0x54>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	4904      	ldr	r1, [pc, #16]	; (8001c14 <FLASH_OB_BootAddressConfig+0x54>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	618b      	str	r3, [r1, #24]
    }
  }
  
  return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00
 8001c18:	ffff0000 	.word	0xffff0000

08001c1c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001c22:	23aa      	movs	r3, #170	; 0xaa
 8001c24:	71fb      	strb	r3, [r7, #7]
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <FLASH_OB_GetRDP+0x3c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2baa      	cmp	r3, #170	; 0xaa
 8001c2e:	d102      	bne.n	8001c36 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001c30:	23aa      	movs	r3, #170	; 0xaa
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	e009      	b.n	8001c4a <FLASH_OB_GetRDP+0x2e>
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <FLASH_OB_GetRDP+0x3c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2bcc      	cmp	r3, #204	; 0xcc
 8001c3e:	d102      	bne.n	8001c46 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001c40:	23cc      	movs	r3, #204	; 0xcc
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	e001      	b.n	8001c4a <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8001c46:	2355      	movs	r3, #85	; 0x55
 8001c48:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40023c15 	.word	0x40023c15

08001c5c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <FLASH_OB_GetBOR+0x18>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f003 030c 	and.w	r3, r3, #12
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <FLASH_OB_GetBootAddress>:
  *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
  *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
  *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
  */
static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
{  
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t Address = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d104      	bne.n	8001c94 <FLASH_OB_GetBootAddress+0x1c>
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <FLASH_OB_GetBootAddress+0x34>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e004      	b.n	8001c9e <FLASH_OB_GetBootAddress+0x26>
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <FLASH_OB_GetBootAddress+0x34>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	60fb      	str	r3, [r7, #12]
	}

  return Address;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e175      	b.n	8001fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8164 	bne.w	8001fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d00b      	beq.n	8001d0e <HAL_GPIO_Init+0x5e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d02:	2b11      	cmp	r3, #17
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d130      	bne.n	8001d70 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 0201 	and.w	r2, r3, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x100>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b12      	cmp	r3, #18
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80be 	beq.w	8001fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a64      	ldr	r2, [pc, #400]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <HAL_GPIO_Init+0x328>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d037      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d031      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d025      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x21a>
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	e012      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eca:	230a      	movs	r3, #10
 8001ecc:	e010      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e00e      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f00:	4934      	ldr	r1, [pc, #208]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f38:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5c:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f ae86 	bls.w	8001cd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f806 	bl	8002068 <HAL_GPIO_EXTI_Callback>
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800207e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002080:	b08f      	sub	sp, #60	; 0x3c
 8002082:	af0a      	add	r7, sp, #40	; 0x28
 8002084:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e054      	b.n	800213a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f009 f94c 	bl	800b348 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fff1 	bl	80050b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	687e      	ldr	r6, [r7, #4]
 80020dc:	466d      	mov	r5, sp
 80020de:	f106 0410 	add.w	r4, r6, #16
 80020e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f2:	1d33      	adds	r3, r6, #4
 80020f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f6:	6838      	ldr	r0, [r7, #0]
 80020f8:	f002 ff74 	bl	8004fe4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f002 ffe8 	bl	80050d8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	687e      	ldr	r6, [r7, #4]
 8002110:	466d      	mov	r5, sp
 8002112:	f106 0410 	add.w	r4, r6, #16
 8002116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002122:	e885 0003 	stmia.w	r5, {r0, r1}
 8002126:	1d33      	adds	r3, r6, #4
 8002128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212a:	6838      	ldr	r0, [r7, #0]
 800212c:	f003 f8fa 	bl	8005324 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002142 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002142:	b590      	push	{r4, r7, lr}
 8002144:	b089      	sub	sp, #36	; 0x24
 8002146:	af04      	add	r7, sp, #16
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	4608      	mov	r0, r1
 800214c:	4611      	mov	r1, r2
 800214e:	461a      	mov	r2, r3
 8002150:	4603      	mov	r3, r0
 8002152:	70fb      	strb	r3, [r7, #3]
 8002154:	460b      	mov	r3, r1
 8002156:	70bb      	strb	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_HCD_HC_Init+0x28>
 8002166:	2302      	movs	r3, #2
 8002168:	e07f      	b.n	800226a <HAL_HCD_HC_Init+0x128>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	333d      	adds	r3, #61	; 0x3d
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3338      	adds	r3, #56	; 0x38
 8002196:	787a      	ldrb	r2, [r7, #1]
 8002198:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3340      	adds	r3, #64	; 0x40
 80021aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021ac:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3339      	adds	r3, #57	; 0x39
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	333f      	adds	r3, #63	; 0x3f
 80021d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e0:	b2d8      	uxtb	r0, r3
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	333a      	adds	r3, #58	; 0x3a
 80021f0:	4602      	mov	r2, r0
 80021f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da0a      	bge.n	8002212 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	333b      	adds	r3, #59	; 0x3b
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e009      	b.n	8002226 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	333b      	adds	r3, #59	; 0x3b
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	333c      	adds	r3, #60	; 0x3c
 8002236:	f897 2020 	ldrb.w	r2, [r7, #32]
 800223a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	787c      	ldrb	r4, [r7, #1]
 8002242:	78ba      	ldrb	r2, [r7, #2]
 8002244:	78f9      	ldrb	r1, [r7, #3]
 8002246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4623      	mov	r3, r4
 8002258:	f003 f9da 	bl	8005610 <USB_HC_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}

08002272 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_HCD_HC_Halt+0x1e>
 800228c:	2302      	movs	r3, #2
 800228e:	e00f      	b.n	80022b0 <HAL_HCD_HC_Halt+0x3e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fc14 	bl	8005ace <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	70fb      	strb	r3, [r7, #3]
 80022ca:	460b      	mov	r3, r1
 80022cc:	70bb      	strb	r3, [r7, #2]
 80022ce:	4613      	mov	r3, r2
 80022d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	333b      	adds	r3, #59	; 0x3b
 80022e2:	78ba      	ldrb	r2, [r7, #2]
 80022e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	333f      	adds	r3, #63	; 0x3f
 80022f6:	787a      	ldrb	r2, [r7, #1]
 80022f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022fa:	7c3b      	ldrb	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d114      	bne.n	800232a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3342      	adds	r3, #66	; 0x42
 8002310:	2203      	movs	r2, #3
 8002312:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	333d      	adds	r3, #61	; 0x3d
 8002324:	7f3a      	ldrb	r2, [r7, #28]
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e009      	b.n	800233e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3342      	adds	r3, #66	; 0x42
 800233a:	2202      	movs	r2, #2
 800233c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800233e:	787b      	ldrb	r3, [r7, #1]
 8002340:	2b03      	cmp	r3, #3
 8002342:	f200 80d6 	bhi.w	80024f2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	0800235d 	.word	0x0800235d
 8002350:	080024dd 	.word	0x080024dd
 8002354:	080023c9 	.word	0x080023c9
 8002358:	08002453 	.word	0x08002453
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800235c:	7c3b      	ldrb	r3, [r7, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 80c9 	bne.w	80024f6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002364:	78bb      	ldrb	r3, [r7, #2]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 80c5 	bne.w	80024f6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800236c:	8b3b      	ldrh	r3, [r7, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3351      	adds	r3, #81	; 0x51
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	3351      	adds	r3, #81	; 0x51
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3342      	adds	r3, #66	; 0x42
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023b0:	e0a1      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	3342      	adds	r3, #66	; 0x42
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
      break;
 80023c6:	e096      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023c8:	78bb      	ldrb	r3, [r7, #2]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d120      	bne.n	8002410 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3351      	adds	r3, #81	; 0x51
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3342      	adds	r3, #66	; 0x42
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023f8:	e07e      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3342      	adds	r3, #66	; 0x42
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e073      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3350      	adds	r3, #80	; 0x50
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	3342      	adds	r3, #66	; 0x42
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
      break;
 800243a:	e05d      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3342      	adds	r3, #66	; 0x42
 800244c:	2202      	movs	r2, #2
 800244e:	701a      	strb	r2, [r3, #0]
      break;
 8002450:	e052      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002452:	78bb      	ldrb	r3, [r7, #2]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d120      	bne.n	800249a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3351      	adds	r3, #81	; 0x51
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3342      	adds	r3, #66	; 0x42
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002482:	e039      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3342      	adds	r3, #66	; 0x42
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
      break;
 8002498:	e02e      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	3350      	adds	r3, #80	; 0x50
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3342      	adds	r3, #66	; 0x42
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
      break;
 80024c4:	e018      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	3342      	adds	r3, #66	; 0x42
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
      break;
 80024da:	e00d      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3342      	adds	r3, #66	; 0x42
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
      break;
 80024f0:	e002      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80024f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3344      	adds	r3, #68	; 0x44
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	8b39      	ldrh	r1, [r7, #24]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4403      	add	r3, r0
 800251c:	3348      	adds	r3, #72	; 0x48
 800251e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	335c      	adds	r3, #92	; 0x5c
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	334c      	adds	r3, #76	; 0x4c
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	3339      	adds	r3, #57	; 0x39
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	335d      	adds	r3, #93	; 0x5d
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	3338      	adds	r3, #56	; 0x38
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	18d1      	adds	r1, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	f003 f94a 	bl	8005824 <USB_HC_StartXfer>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop

0800259c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fe73 	bl	800529e <USB_GetMode>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	f040 80ef 	bne.w	800279e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fe57 	bl	8005278 <USB_ReadInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80e5 	beq.w	800279c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 fe4e 	bl	8005278 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e6:	d104      	bne.n	80025f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fe3e 	bl	8005278 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002606:	d104      	bne.n	8002612 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002610:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fe2e 	bl	8005278 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002626:	d104      	bne.n	8002632 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fe1e 	bl	8005278 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d103      	bne.n	800264e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2202      	movs	r2, #2
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fe10 	bl	8005278 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002662:	d115      	bne.n	8002690 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800266c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f008 fee2 	bl	800b448 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fefa 	bl	8005484 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fdef 	bl	8005278 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d102      	bne.n	80026ac <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f001 f966 	bl	8003978 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fde1 	bl	8005278 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d106      	bne.n	80026ce <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f008 fea5 	bl	800b410 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2208      	movs	r2, #8
 80026cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 fdd0 	bl	8005278 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026e2:	d138      	bne.n	8002756 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 f9df 	bl	8005aac <USB_HC_ReadInterrupt>
 80026ee:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e025      	b.n	8002742 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d018      	beq.n	800273c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800271c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002720:	d106      	bne.n	8002730 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8cf 	bl	80028cc <HCD_HC_IN_IRQHandler>
 800272e:	e005      	b.n	800273c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fcfd 	bl	8003136 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	d3d4      	bcc.n	80026f6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fd8c 	bl	8005278 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b10      	cmp	r3, #16
 8002768:	d101      	bne.n	800276e <HAL_HCD_IRQHandler+0x1d2>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_HCD_IRQHandler+0x1d4>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d014      	beq.n	800279e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0210 	bic.w	r2, r2, #16
 8002782:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f001 f84b 	bl	8003820 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0210 	orr.w	r2, r2, #16
 8002798:	619a      	str	r2, [r3, #24]
 800279a:	e000      	b.n	800279e <HAL_HCD_IRQHandler+0x202>
      return;
 800279c:	bf00      	nop
    }
  }
}
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_HCD_Start+0x16>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e013      	b.n	80027e2 <HAL_HCD_Start+0x3e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fc64 	bl	8005094 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 feba 	bl	800554c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_HCD_Stop+0x16>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e00d      	b.n	800281c <HAL_HCD_Stop+0x32>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fa99 	bl	8005d44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fe61 	bl	80054f8 <USB_ResetPort>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	335c      	adds	r3, #92	; 0x5c
 800285c:	781b      	ldrb	r3, [r3, #0]
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	334c      	adds	r3, #76	; 0x4c
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fea3 	bl	80055ec <USB_GetCurrentFrame>
 80028a6:	4603      	mov	r3, r0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 fe7e 	bl	80055be <USB_GetHostSpeed>
 80028c2:	4603      	mov	r3, r0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d119      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2304      	movs	r3, #4
 800290c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	440a      	add	r2, r1
 8002924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	60d3      	str	r3, [r2, #12]
 800292e:	e0ce      	b.n	8002ace <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002946:	d12c      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	335d      	adds	r3, #93	; 0x5d
 800296c:	2207      	movs	r2, #7
 800296e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f003 f897 	bl	8005ace <USB_HC_Halt>
 80029a0:	e095      	b.n	8002ace <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d109      	bne.n	80029cc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	2320      	movs	r3, #32
 80029c8:	6093      	str	r3, [r2, #8]
 80029ca:	e080      	b.n	8002ace <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d134      	bne.n	8002a4c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	335d      	adds	r3, #93	; 0x5d
 8002a12:	2205      	movs	r2, #5
 8002a14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2310      	movs	r3, #16
 8002a26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2308      	movs	r3, #8
 8002a38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 f842 	bl	8005ace <USB_HC_Halt>
 8002a4a:	e040      	b.n	8002ace <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d134      	bne.n	8002ace <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 f81d 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	335d      	adds	r3, #93	; 0x5d
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002acc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae4:	d122      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	0151      	lsls	r1, r2, #5
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	440a      	add	r2, r1
 8002afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 ffdc 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b28:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b2a:	e300      	b.n	800312e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	f040 80fd 	bne.w	8002d3e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	3348      	adds	r3, #72	; 0x48
 8002b5c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	0159      	lsls	r1, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	440b      	add	r3, r1
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b70:	1ad1      	subs	r1, r2, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4403      	add	r3, r0
 8002b80:	334c      	adds	r3, #76	; 0x4c
 8002b82:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	335d      	adds	r3, #93	; 0x5d
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3358      	adds	r3, #88	; 0x58
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2301      	movs	r3, #1
 8002bbc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	333f      	adds	r3, #63	; 0x3f
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	333f      	adds	r3, #63	; 0x3f
 8002be4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d121      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	0151      	lsls	r1, r2, #5
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	440a      	add	r2, r1
 8002c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 ff5a 	bl	8005ace <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	2310      	movs	r3, #16
 8002c2a:	6093      	str	r3, [r2, #8]
 8002c2c:	e070      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	333f      	adds	r3, #63	; 0x3f
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d12a      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c62:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	335c      	adds	r3, #92	; 0x5c
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	335c      	adds	r3, #92	; 0x5c
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4601      	mov	r1, r0
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f008 fbe6 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c98:	e03a      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	333f      	adds	r3, #63	; 0x3f
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d12f      	bne.n	8002d10 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3350      	adds	r3, #80	; 0x50
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	f083 0301 	eor.w	r3, r3, #1
 8002cda:	b2d8      	uxtb	r0, r3
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	3350      	adds	r3, #80	; 0x50
 8002cec:	4602      	mov	r2, r0
 8002cee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	b2d8      	uxtb	r0, r3
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4601      	mov	r1, r0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f008 fbaa 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3350      	adds	r3, #80	; 0x50
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2d8      	uxtb	r0, r3
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3350      	adds	r3, #80	; 0x50
 8002d38:	4602      	mov	r2, r0
 8002d3a:	701a      	strb	r2, [r3, #0]
}
 8002d3c:	e1f7      	b.n	800312e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	f040 811a 	bne.w	8002f8a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	0151      	lsls	r1, r2, #5
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	440a      	add	r2, r1
 8002d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d70:	f023 0302 	bic.w	r3, r3, #2
 8002d74:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	335d      	adds	r3, #93	; 0x5d
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10a      	bne.n	8002da2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e0d9      	b.n	8002f56 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	335d      	adds	r3, #93	; 0x5d
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d10a      	bne.n	8002dce <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	335c      	adds	r3, #92	; 0x5c
 8002dc8:	2205      	movs	r2, #5
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e0c3      	b.n	8002f56 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	335d      	adds	r3, #93	; 0x5d
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d00a      	beq.n	8002dfa <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	335d      	adds	r3, #93	; 0x5d
 8002df4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d156      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	3358      	adds	r3, #88	; 0x58
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c59      	adds	r1, r3, #1
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4403      	add	r3, r0
 8002e1c:	3358      	adds	r3, #88	; 0x58
 8002e1e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3358      	adds	r3, #88	; 0x58
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d914      	bls.n	8002e60 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	3358      	adds	r3, #88	; 0x58
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	335c      	adds	r3, #92	; 0x5c
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e009      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	2202      	movs	r2, #2
 8002e72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e056      	b.n	8002f56 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335d      	adds	r3, #93	; 0x5d
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d123      	bne.n	8002f06 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	2202      	movs	r2, #2
 8002ed0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ef0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e027      	b.n	8002f56 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	335d      	adds	r3, #93	; 0x5d
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b07      	cmp	r3, #7
 8002f1a:	d11c      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	3358      	adds	r3, #88	; 0x58
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4403      	add	r3, r0
 8002f3e:	3358      	adds	r3, #88	; 0x58
 8002f40:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	335c      	adds	r3, #92	; 0x5c
 8002f52:	2204      	movs	r2, #4
 8002f54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2302      	movs	r3, #2
 8002f66:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	b2d8      	uxtb	r0, r3
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4601      	mov	r1, r0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f008 fa6e 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f88:	e0d1      	b.n	800312e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d13e      	bne.n	800301e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	0151      	lsls	r1, r2, #5
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3358      	adds	r3, #88	; 0x58
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4403      	add	r3, r0
 8002fe2:	3358      	adds	r3, #88	; 0x58
 8002fe4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	335d      	adds	r3, #93	; 0x5d
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fd62 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	6093      	str	r3, [r2, #8]
}
 800301c:	e087      	b.n	800312e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b10      	cmp	r3, #16
 8003032:	d17c      	bne.n	800312e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	333f      	adds	r3, #63	; 0x3f
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d122      	bne.n	8003090 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	3358      	adds	r3, #88	; 0x58
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	0151      	lsls	r1, r2, #5
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	440a      	add	r2, r1
 8003074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fd20 	bl	8005ace <USB_HC_Halt>
 800308e:	e045      	b.n	800311c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	333f      	adds	r3, #63	; 0x3f
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	333f      	adds	r3, #63	; 0x3f
 80030b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d12f      	bne.n	800311c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	3358      	adds	r3, #88	; 0x58
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d121      	bne.n	800311c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	335d      	adds	r3, #93	; 0x5d
 80030e8:	2203      	movs	r2, #3
 80030ea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	0151      	lsls	r1, r2, #5
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	440a      	add	r2, r1
 8003102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fcd9 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2310      	movs	r3, #16
 800312c:	6093      	str	r3, [r2, #8]
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d119      	bne.n	800319a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	2304      	movs	r3, #4
 8003176:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	440a      	add	r2, r1
 800318e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003198:	e33e      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d141      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2320      	movs	r3, #32
 80031c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	333d      	adds	r3, #61	; 0x3d
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 831f 	bne.w	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	333d      	adds	r3, #61	; 0x3d
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	335c      	adds	r3, #92	; 0x5c
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	0151      	lsls	r1, r2, #5
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	440a      	add	r2, r1
 8003218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800321c:	f043 0302 	orr.w	r3, r3, #2
 8003220:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fc4e 	bl	8005ace <USB_HC_Halt>
}
 8003232:	e2f1      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d13f      	bne.n	80032ca <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	335d      	adds	r3, #93	; 0x5d
 800325a:	2204      	movs	r2, #4
 800325c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	333d      	adds	r3, #61	; 0x3d
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3358      	adds	r3, #88	; 0x58
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	0151      	lsls	r1, r2, #5
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	440a      	add	r2, r1
 800329c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fc0c 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2340      	movs	r3, #64	; 0x40
 80032c6:	6093      	str	r3, [r2, #8]
}
 80032c8:	e2a6      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d122      	bne.n	8003328 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	0151      	lsls	r1, r2, #5
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	440a      	add	r2, r1
 80032f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fbde 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003324:	6093      	str	r3, [r2, #8]
}
 8003326:	e277      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d135      	bne.n	80033aa <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	3358      	adds	r3, #88	; 0x58
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	0151      	lsls	r1, r2, #5
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	440a      	add	r2, r1
 8003368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f002 fba6 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2301      	movs	r3, #1
 8003392:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	335d      	adds	r3, #93	; 0x5d
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
}
 80033a8:	e236      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d12b      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2308      	movs	r3, #8
 80033d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	0151      	lsls	r1, r2, #5
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	440a      	add	r2, r1
 80033e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 fb66 	bl	8005ace <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	335d      	adds	r3, #93	; 0x5d
 8003412:	2205      	movs	r2, #5
 8003414:	701a      	strb	r2, [r3, #0]
}
 8003416:	e1ff      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b10      	cmp	r3, #16
 800342c:	d155      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	3358      	adds	r3, #88	; 0x58
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	335d      	adds	r3, #93	; 0x5d
 8003452:	2203      	movs	r2, #3
 8003454:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	333d      	adds	r3, #61	; 0x3d
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d114      	bne.n	8003496 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	333c      	adds	r3, #60	; 0x3c
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	333d      	adds	r3, #61	; 0x3d
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 fb04 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	461a      	mov	r2, r3
 80034d4:	2310      	movs	r3, #16
 80034d6:	6093      	str	r3, [r2, #8]
}
 80034d8:	e19e      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d12b      	bne.n	8003548 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	440a      	add	r2, r1
 8003506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fad7 	bl	8005ace <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	335d      	adds	r3, #93	; 0x5d
 8003530:	2206      	movs	r2, #6
 8003532:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	6093      	str	r3, [r2, #8]
}
 8003546:	e167      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d135      	bne.n	80035cc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	440a      	add	r2, r1
 8003576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fa9f 	bl	8005ace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	2310      	movs	r3, #16
 80035a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	335d      	adds	r3, #93	; 0x5d
 80035c6:	2208      	movs	r2, #8
 80035c8:	701a      	strb	r2, [r3, #0]
}
 80035ca:	e125      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	f040 811a 	bne.w	8003818 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f023 0302 	bic.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335d      	adds	r3, #93	; 0x5d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d137      	bne.n	800368a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	335c      	adds	r3, #92	; 0x5c
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	440b      	add	r3, r1
 800363c:	333f      	adds	r3, #63	; 0x3f
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d00b      	beq.n	800365c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	333f      	adds	r3, #63	; 0x3f
 8003654:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003656:	2b03      	cmp	r3, #3
 8003658:	f040 80c5 	bne.w	80037e6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	3351      	adds	r3, #81	; 0x51
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2d8      	uxtb	r0, r3
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	3351      	adds	r3, #81	; 0x51
 8003684:	4602      	mov	r2, r0
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	e0ad      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	335d      	adds	r3, #93	; 0x5d
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d10a      	bne.n	80036b6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	335c      	adds	r3, #92	; 0x5c
 80036b0:	2202      	movs	r2, #2
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e097      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	335d      	adds	r3, #93	; 0x5d
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d10a      	bne.n	80036e2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	440b      	add	r3, r1
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	2202      	movs	r2, #2
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e081      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	440b      	add	r3, r1
 80036f0:	335d      	adds	r3, #93	; 0x5d
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10a      	bne.n	800370e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	440b      	add	r3, r1
 8003706:	335c      	adds	r3, #92	; 0x5c
 8003708:	2205      	movs	r2, #5
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e06b      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	440b      	add	r3, r1
 800371c:	335d      	adds	r3, #93	; 0x5d
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b06      	cmp	r3, #6
 8003722:	d00a      	beq.n	800373a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	335d      	adds	r3, #93	; 0x5d
 8003734:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003736:	2b08      	cmp	r3, #8
 8003738:	d155      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	3358      	adds	r3, #88	; 0x58
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	1c59      	adds	r1, r3, #1
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4403      	add	r3, r0
 800375c:	3358      	adds	r3, #88	; 0x58
 800375e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	3358      	adds	r3, #88	; 0x58
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d914      	bls.n	80037a0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	3358      	adds	r3, #88	; 0x58
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	335c      	adds	r3, #92	; 0x5c
 800379a:	2204      	movs	r2, #4
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e009      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	335c      	adds	r3, #92	; 0x5c
 80037b0:	2202      	movs	r2, #2
 80037b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	461a      	mov	r2, r3
 80037f4:	2302      	movs	r3, #2
 80037f6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	b2d8      	uxtb	r0, r3
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	335c      	adds	r3, #92	; 0x5c
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4601      	mov	r1, r0
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f007 fe26 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003818:	bf00      	nop
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	0c5b      	lsrs	r3, r3, #17
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003854:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d003      	beq.n	8003864 <HCD_RXQLVL_IRQHandler+0x44>
 800385c:	2b05      	cmp	r3, #5
 800385e:	f000 8082 	beq.w	8003966 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003862:	e083      	b.n	800396c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07f      	beq.n	800396a <HCD_RXQLVL_IRQHandler+0x14a>
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	3344      	adds	r3, #68	; 0x44
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d074      	beq.n	800396a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	440b      	add	r3, r1
 8003892:	3344      	adds	r3, #68	; 0x44
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	b292      	uxth	r2, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f001 fcc3 	bl	8005226 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	3344      	adds	r3, #68	; 0x44
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	18d1      	adds	r1, r2, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4403      	add	r3, r0
 80038c4:	3344      	adds	r3, #68	; 0x44
 80038c6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	440b      	add	r3, r1
 80038d6:	334c      	adds	r3, #76	; 0x4c
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	18d1      	adds	r1, r2, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4403      	add	r3, r0
 80038ec:	334c      	adds	r3, #76	; 0x4c
 80038ee:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HCD_RXQLVL_IRQHandler+0x154>)
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d031      	beq.n	800396a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800391c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003924:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	3350      	adds	r3, #80	; 0x50
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2d8      	uxtb	r0, r3
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	3350      	adds	r3, #80	; 0x50
 8003960:	4602      	mov	r2, r0
 8003962:	701a      	strb	r2, [r3, #0]
      break;
 8003964:	e001      	b.n	800396a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800396a:	bf00      	nop
  }
}
 800396c:	bf00      	nop
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	1ff80000 	.word	0x1ff80000

08003978 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d10b      	bne.n	80039c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d102      	bne.n	80039c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f007 fd36 	bl	800b42c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d132      	bne.n	8003a38 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d126      	bne.n	8003a32 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d113      	bne.n	8003a14 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f6:	d106      	bne.n	8003a06 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fd40 	bl	8005484 <USB_InitFSLSPClkSel>
 8003a04:	e011      	b.n	8003a2a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fd39 	bl	8005484 <USB_InitFSLSPClkSel>
 8003a12:	e00a      	b.n	8003a2a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a22:	461a      	mov	r2, r3
 8003a24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a28:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f007 fd28 	bl	800b480 <HAL_HCD_PortEnabled_Callback>
 8003a30:	e002      	b.n	8003a38 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f007 fd32 	bl	800b49c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d103      	bne.n	8003a4a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f043 0320 	orr.w	r3, r3, #32
 8003a48:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6013      	str	r3, [r2, #0]
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8e:	f7fd fadd 	bl	800104c <HAL_GetTick>
 8003a92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a94:	e009      	b.n	8003aaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a96:	f7fd fad9 	bl	800104c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa4:	d901      	bls.n	8003aaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e022      	b.n	8003af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac4:	f7fd fac2 	bl	800104c <HAL_GetTick>
 8003ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aca:	e009      	b.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003acc:	f7fd fabe 	bl	800104c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ada:	d901      	bls.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e007      	b.n	8003af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aec:	d1ee      	bne.n	8003acc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40007000 	.word	0x40007000

08003b00 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b06:	f7fd faa1 	bl	800104c <HAL_GetTick>
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fd fa97 	bl	800104c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e0b8      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5a      	ldr	r2, [pc, #360]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b42:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b44:	f7fd fa82 	bl	800104c <HAL_GetTick>
 8003b48:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b4a:	4b57      	ldr	r3, [pc, #348]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b52:	f7fd fa7b 	bl	800104c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e09a      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b68:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b74:	f7fd fa6a 	bl	800104c <HAL_GetTick>
 8003b78:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003b7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b80:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003b84:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fa60 	bl	800104c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e081      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b9a:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ba6:	f7fd fa51 	bl	800104c <HAL_GetTick>
 8003baa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003bac:	4b3e      	ldr	r3, [pc, #248]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fa47 	bl	800104c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e068      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bd8:	f7fd fa38 	bl	800104c <HAL_GetTick>
 8003bdc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003be4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fd fa2e 	bl	800104c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e04f      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003c0a:	f7fd fa1f 	bl	800104c <HAL_GetTick>
 8003c0e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a24      	ldr	r2, [pc, #144]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c1e:	f7fd fa15 	bl	800104c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e036      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c3e:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_RCC_DeInit+0x1ac>)
 8003c40:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c44:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_RCC_DeInit+0x1b0>)
 8003c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_RCC_DeInit+0x1b0>)
 8003c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5c:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c68:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_RCC_DeInit+0x1a8>)
 8003c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c80:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_DeInit+0x1b4>)
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <HAL_RCC_DeInit+0x1b8>)
 8003c86:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCC_DeInit+0x1bc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd f999 	bl	8000fc4 <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	24003010 	.word	0x24003010
 8003cb0:	24003000 	.word	0x24003000
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e29b      	b.n	800420e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	4b96      	ldr	r3, [pc, #600]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf0:	4b93      	ldr	r3, [pc, #588]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d112      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
 8003cfc:	4b90      	ldr	r3, [pc, #576]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b8d      	ldr	r3, [pc, #564]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06c      	beq.n	8003df0 <HAL_RCC_OscConfig+0x130>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d168      	bne.n	8003df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e275      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x7a>
 8003d2c:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a83      	ldr	r2, [pc, #524]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x9c>
 8003d42:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7e      	ldr	r2, [pc, #504]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7b      	ldr	r2, [pc, #492]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a72      	ldr	r2, [pc, #456]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd f954 	bl	800104c <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fd f950 	bl	800104c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e229      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd f940 	bl	800104c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fd f93c 	bl	800104c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e215      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x110>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d069      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1e9      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	493d      	ldr	r1, [pc, #244]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd f8f2 	bl	800104c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6c:	f7fd f8ee 	bl	800104c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1c7      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4929      	ldr	r1, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd f8ce 	bl	800104c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fd f8ca 	bl	800104c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e1a3      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d038      	beq.n	8003f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd f8ab 	bl	800104c <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efa:	f7fd f8a7 	bl	800104c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e180      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x23a>
 8003f18:	e01a      	b.n	8003f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fd f891 	bl	800104c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fd f88d 	bl	800104c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e166      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
 8003f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ee      	bne.n	8003f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a4 	beq.w	80040a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a88      	ldr	r2, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b86      	ldr	r3, [pc, #536]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f86:	4b83      	ldr	r3, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f92:	4b80      	ldr	r3, [pc, #512]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7f      	ldr	r2, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fd f855 	bl	800104c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fd f851 	bl	800104c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	; 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e12a      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x31a>
 8003fcc:	4b70      	ldr	r3, [pc, #448]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a6f      	ldr	r2, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e02d      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x33c>
 8003fe2:	4b6b      	ldr	r3, [pc, #428]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a67      	ldr	r2, [pc, #412]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x35e>
 8004004:	4b62      	ldr	r3, [pc, #392]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a61      	ldr	r2, [pc, #388]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5b      	ldr	r2, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fd f805 	bl	800104c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fd f801 	bl	800104c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0d8      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x386>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fc ffef 	bl	800104c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fc ffeb 	bl	800104c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0c2      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a3c      	ldr	r2, [pc, #240]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80ae 	beq.w	800420c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b0:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d06d      	beq.n	8004198 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d14b      	bne.n	800415c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a31      	ldr	r2, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fc ffbc 	bl	800104c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fc ffb8 	bl	800104c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e091      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	071b      	lsls	r3, r3, #28
 8004122:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a18      	ldr	r2, [pc, #96]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fc ff8a 	bl	800104c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fc ff86 	bl	800104c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e05f      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x47c>
 800415a:	e057      	b.n	800420c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0b      	ldr	r2, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fc ff70 	bl	800104c <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fc ff6c 	bl	800104c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e045      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x4b0>
 800418e:	e03d      	b.n	800420c <HAL_RCC_OscConfig+0x54c>
 8004190:	40023800 	.word	0x40023800
 8004194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <HAL_RCC_OscConfig+0x558>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d030      	beq.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d129      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d122      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d119      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d10f      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d0      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b67      	ldr	r3, [pc, #412]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	4965      	ldr	r1, [pc, #404]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0b8      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004286:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	494d      	ldr	r1, [pc, #308]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d040      	beq.n	8004340 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d115      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e073      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e06b      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4936      	ldr	r1, [pc, #216]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fc fe9c 	bl	800104c <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	e00a      	b.n	800432e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004318:	f7fc fe98 	bl	800104c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e053      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 020c 	and.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d1eb      	bne.n	8004318 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d210      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4922      	ldr	r1, [pc, #136]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e032      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4916      	ldr	r1, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ae:	f000 f821 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043b2:	4601      	mov	r1, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x1cc>)
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
 80043c2:	fa21 f303 	lsr.w	r3, r1, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1d0>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc fdf8 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0800ca98 	.word	0x0800ca98
 80043ec:	20000000 	.word	0x20000000
 80043f0:	20000004 	.word	0x20000004

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	2300      	movs	r3, #0
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440a:	4b63      	ldr	r3, [pc, #396]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b04      	cmp	r3, #4
 8004414:	d007      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x32>
 8004416:	2b08      	cmp	r3, #8
 8004418:	d008      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x38>
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 80b4 	bne.w	8004588 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b5e      	ldr	r3, [pc, #376]	; (800459c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004422:	60bb      	str	r3, [r7, #8]
      break;
 8004424:	e0b3      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004426:	4b5e      	ldr	r3, [pc, #376]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004428:	60bb      	str	r3, [r7, #8]
      break;
 800442a:	e0b0      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800442c:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004434:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d04a      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004442:	4b55      	ldr	r3, [pc, #340]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	f04f 0400 	mov.w	r4, #0
 800444c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	ea03 0501 	and.w	r5, r3, r1
 8004458:	ea04 0602 	and.w	r6, r4, r2
 800445c:	4629      	mov	r1, r5
 800445e:	4632      	mov	r2, r6
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	f04f 0400 	mov.w	r4, #0
 8004468:	0154      	lsls	r4, r2, #5
 800446a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800446e:	014b      	lsls	r3, r1, #5
 8004470:	4619      	mov	r1, r3
 8004472:	4622      	mov	r2, r4
 8004474:	1b49      	subs	r1, r1, r5
 8004476:	eb62 0206 	sbc.w	r2, r2, r6
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	0194      	lsls	r4, r2, #6
 8004484:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004488:	018b      	lsls	r3, r1, #6
 800448a:	1a5b      	subs	r3, r3, r1
 800448c:	eb64 0402 	sbc.w	r4, r4, r2
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	00e2      	lsls	r2, r4, #3
 800449a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800449e:	00d9      	lsls	r1, r3, #3
 80044a0:	460b      	mov	r3, r1
 80044a2:	4614      	mov	r4, r2
 80044a4:	195b      	adds	r3, r3, r5
 80044a6:	eb44 0406 	adc.w	r4, r4, r6
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	0262      	lsls	r2, r4, #9
 80044b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80044b8:	0259      	lsls	r1, r3, #9
 80044ba:	460b      	mov	r3, r1
 80044bc:	4614      	mov	r4, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	4621      	mov	r1, r4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	f7fb ff08 	bl	80002e0 <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e049      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d8:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	f04f 0400 	mov.w	r4, #0
 80044e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	ea03 0501 	and.w	r5, r3, r1
 80044ee:	ea04 0602 	and.w	r6, r4, r2
 80044f2:	4629      	mov	r1, r5
 80044f4:	4632      	mov	r2, r6
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	0154      	lsls	r4, r2, #5
 8004500:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004504:	014b      	lsls	r3, r1, #5
 8004506:	4619      	mov	r1, r3
 8004508:	4622      	mov	r2, r4
 800450a:	1b49      	subs	r1, r1, r5
 800450c:	eb62 0206 	sbc.w	r2, r2, r6
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	0194      	lsls	r4, r2, #6
 800451a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	1a5b      	subs	r3, r3, r1
 8004522:	eb64 0402 	sbc.w	r4, r4, r2
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004534:	00d9      	lsls	r1, r3, #3
 8004536:	460b      	mov	r3, r1
 8004538:	4614      	mov	r4, r2
 800453a:	195b      	adds	r3, r3, r5
 800453c:	eb44 0406 	adc.w	r4, r4, r6
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	02a2      	lsls	r2, r4, #10
 800454a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800454e:	0299      	lsls	r1, r3, #10
 8004550:	460b      	mov	r3, r1
 8004552:	4614      	mov	r4, r2
 8004554:	4618      	mov	r0, r3
 8004556:	4621      	mov	r1, r4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f04f 0400 	mov.w	r4, #0
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f7fb febd 	bl	80002e0 <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	3301      	adds	r3, #1
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	60bb      	str	r3, [r7, #8]
      break;
 8004586:	e002      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800458a:	60bb      	str	r3, [r7, #8]
      break;
 800458c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458e:	68bb      	ldr	r3, [r7, #8]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4601      	mov	r1, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a9b      	lsrs	r3, r3, #10
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4a03      	ldr	r2, [pc, #12]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	0800caa8 	.word	0x0800caa8

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e8:	f7ff ffdc 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045ec:	4601      	mov	r1, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0b5b      	lsrs	r3, r3, #13
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4a03      	ldr	r2, [pc, #12]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	0800caa8 	.word	0x0800caa8

0800460c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e040      	b.n	80046a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fb3e 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8be 	bl	80047cc <UART_SetConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e022      	b.n	80046a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fb5c 	bl	8004d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fbe3 	bl	8004e64 <UART_CheckIdleState>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d17f      	bne.n	80047c0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Transmit+0x24>
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e078      	b.n	80047c2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UART_Transmit+0x36>
 80046da:	2302      	movs	r3, #2
 80046dc:	e071      	b.n	80047c2 <HAL_UART_Transmit+0x11a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2221      	movs	r2, #33	; 0x21
 80046f0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc fcab 	bl	800104c <HAL_GetTick>
 80046f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d108      	bne.n	8004724 <HAL_UART_Transmit+0x7c>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e003      	b.n	800472c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004734:	e02c      	b.n	8004790 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fbd4 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e038      	b.n	80047c2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e007      	b.n	800477e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1cc      	bne.n	8004736 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	2140      	movs	r1, #64	; 0x40
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fba1 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e005      	b.n	80047c2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4bb1      	ldr	r3, [pc, #708]	; (8004ac0 <UART_SetConfig+0x2f4>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	430b      	orrs	r3, r1
 8004806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a9f      	ldr	r2, [pc, #636]	; (8004ac4 <UART_SetConfig+0x2f8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d121      	bne.n	8004890 <UART_SetConfig+0xc4>
 800484c:	4b9e      	ldr	r3, [pc, #632]	; (8004ac8 <UART_SetConfig+0x2fc>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b03      	cmp	r3, #3
 8004858:	d816      	bhi.n	8004888 <UART_SetConfig+0xbc>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x94>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004871 	.word	0x08004871
 8004864:	0800487d 	.word	0x0800487d
 8004868:	08004877 	.word	0x08004877
 800486c:	08004883 	.word	0x08004883
 8004870:	2301      	movs	r3, #1
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e151      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004876:	2302      	movs	r3, #2
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e14e      	b.n	8004b1a <UART_SetConfig+0x34e>
 800487c:	2304      	movs	r3, #4
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e14b      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004882:	2308      	movs	r3, #8
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e148      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004888:	2310      	movs	r3, #16
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	bf00      	nop
 800488e:	e144      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a8d      	ldr	r2, [pc, #564]	; (8004acc <UART_SetConfig+0x300>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d134      	bne.n	8004904 <UART_SetConfig+0x138>
 800489a:	4b8b      	ldr	r3, [pc, #556]	; (8004ac8 <UART_SetConfig+0x2fc>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d829      	bhi.n	80048fc <UART_SetConfig+0x130>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0xe4>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048fd 	.word	0x080048fd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048f1 	.word	0x080048f1
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048eb 	.word	0x080048eb
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	080048f7 	.word	0x080048f7
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e117      	b.n	8004b1a <UART_SetConfig+0x34e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e114      	b.n	8004b1a <UART_SetConfig+0x34e>
 80048f0:	2304      	movs	r3, #4
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e111      	b.n	8004b1a <UART_SetConfig+0x34e>
 80048f6:	2308      	movs	r3, #8
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e10e      	b.n	8004b1a <UART_SetConfig+0x34e>
 80048fc:	2310      	movs	r3, #16
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	bf00      	nop
 8004902:	e10a      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a71      	ldr	r2, [pc, #452]	; (8004ad0 <UART_SetConfig+0x304>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d120      	bne.n	8004950 <UART_SetConfig+0x184>
 800490e:	4b6e      	ldr	r3, [pc, #440]	; (8004ac8 <UART_SetConfig+0x2fc>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004918:	2b10      	cmp	r3, #16
 800491a:	d00f      	beq.n	800493c <UART_SetConfig+0x170>
 800491c:	2b10      	cmp	r3, #16
 800491e:	d802      	bhi.n	8004926 <UART_SetConfig+0x15a>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <UART_SetConfig+0x164>
 8004924:	e010      	b.n	8004948 <UART_SetConfig+0x17c>
 8004926:	2b20      	cmp	r3, #32
 8004928:	d005      	beq.n	8004936 <UART_SetConfig+0x16a>
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d009      	beq.n	8004942 <UART_SetConfig+0x176>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x17c>
 8004930:	2300      	movs	r3, #0
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e0f1      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004936:	2302      	movs	r3, #2
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e0ee      	b.n	8004b1a <UART_SetConfig+0x34e>
 800493c:	2304      	movs	r3, #4
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0eb      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004942:	2308      	movs	r3, #8
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0e8      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	bf00      	nop
 800494e:	e0e4      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5f      	ldr	r2, [pc, #380]	; (8004ad4 <UART_SetConfig+0x308>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d120      	bne.n	800499c <UART_SetConfig+0x1d0>
 800495a:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <UART_SetConfig+0x2fc>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d00f      	beq.n	8004988 <UART_SetConfig+0x1bc>
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d802      	bhi.n	8004972 <UART_SetConfig+0x1a6>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <UART_SetConfig+0x1b0>
 8004970:	e010      	b.n	8004994 <UART_SetConfig+0x1c8>
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d005      	beq.n	8004982 <UART_SetConfig+0x1b6>
 8004976:	2bc0      	cmp	r3, #192	; 0xc0
 8004978:	d009      	beq.n	800498e <UART_SetConfig+0x1c2>
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x1c8>
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e0cb      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004982:	2302      	movs	r3, #2
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e0c8      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004988:	2304      	movs	r3, #4
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e0c5      	b.n	8004b1a <UART_SetConfig+0x34e>
 800498e:	2308      	movs	r3, #8
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e0c2      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	bf00      	nop
 800499a:	e0be      	b.n	8004b1a <UART_SetConfig+0x34e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4d      	ldr	r2, [pc, #308]	; (8004ad8 <UART_SetConfig+0x30c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d124      	bne.n	80049f0 <UART_SetConfig+0x224>
 80049a6:	4b48      	ldr	r3, [pc, #288]	; (8004ac8 <UART_SetConfig+0x2fc>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d012      	beq.n	80049dc <UART_SetConfig+0x210>
 80049b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ba:	d802      	bhi.n	80049c2 <UART_SetConfig+0x1f6>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <UART_SetConfig+0x204>
 80049c0:	e012      	b.n	80049e8 <UART_SetConfig+0x21c>
 80049c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c6:	d006      	beq.n	80049d6 <UART_SetConfig+0x20a>
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049cc:	d009      	beq.n	80049e2 <UART_SetConfig+0x216>
 80049ce:	e00b      	b.n	80049e8 <UART_SetConfig+0x21c>
 80049d0:	2300      	movs	r3, #0
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e0a1      	b.n	8004b1a <UART_SetConfig+0x34e>
 80049d6:	2302      	movs	r3, #2
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e09e      	b.n	8004b1a <UART_SetConfig+0x34e>
 80049dc:	2304      	movs	r3, #4
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e09b      	b.n	8004b1a <UART_SetConfig+0x34e>
 80049e2:	2308      	movs	r3, #8
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e098      	b.n	8004b1a <UART_SetConfig+0x34e>
 80049e8:	2310      	movs	r3, #16
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	bf00      	nop
 80049ee:	e094      	b.n	8004b1a <UART_SetConfig+0x34e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a39      	ldr	r2, [pc, #228]	; (8004adc <UART_SetConfig+0x310>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d124      	bne.n	8004a44 <UART_SetConfig+0x278>
 80049fa:	4b33      	ldr	r3, [pc, #204]	; (8004ac8 <UART_SetConfig+0x2fc>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d012      	beq.n	8004a30 <UART_SetConfig+0x264>
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a0e:	d802      	bhi.n	8004a16 <UART_SetConfig+0x24a>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <UART_SetConfig+0x258>
 8004a14:	e012      	b.n	8004a3c <UART_SetConfig+0x270>
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d006      	beq.n	8004a2a <UART_SetConfig+0x25e>
 8004a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a20:	d009      	beq.n	8004a36 <UART_SetConfig+0x26a>
 8004a22:	e00b      	b.n	8004a3c <UART_SetConfig+0x270>
 8004a24:	2301      	movs	r3, #1
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e077      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e074      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a30:	2304      	movs	r3, #4
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e071      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a36:	2308      	movs	r3, #8
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e06e      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	bf00      	nop
 8004a42:	e06a      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <UART_SetConfig+0x314>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d124      	bne.n	8004a98 <UART_SetConfig+0x2cc>
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <UART_SetConfig+0x2fc>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d012      	beq.n	8004a84 <UART_SetConfig+0x2b8>
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d802      	bhi.n	8004a6a <UART_SetConfig+0x29e>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <UART_SetConfig+0x2ac>
 8004a68:	e012      	b.n	8004a90 <UART_SetConfig+0x2c4>
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6e:	d006      	beq.n	8004a7e <UART_SetConfig+0x2b2>
 8004a70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a74:	d009      	beq.n	8004a8a <UART_SetConfig+0x2be>
 8004a76:	e00b      	b.n	8004a90 <UART_SetConfig+0x2c4>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e04d      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e04a      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a84:	2304      	movs	r3, #4
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e047      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e044      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a90:	2310      	movs	r3, #16
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	bf00      	nop
 8004a96:	e040      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <UART_SetConfig+0x318>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d139      	bne.n	8004b16 <UART_SetConfig+0x34a>
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <UART_SetConfig+0x2fc>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab0:	d027      	beq.n	8004b02 <UART_SetConfig+0x336>
 8004ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab6:	d817      	bhi.n	8004ae8 <UART_SetConfig+0x31c>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01c      	beq.n	8004af6 <UART_SetConfig+0x32a>
 8004abc:	e027      	b.n	8004b0e <UART_SetConfig+0x342>
 8004abe:	bf00      	nop
 8004ac0:	efff69f3 	.word	0xefff69f3
 8004ac4:	40011000 	.word	0x40011000
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40004400 	.word	0x40004400
 8004ad0:	40004800 	.word	0x40004800
 8004ad4:	40004c00 	.word	0x40004c00
 8004ad8:	40005000 	.word	0x40005000
 8004adc:	40011400 	.word	0x40011400
 8004ae0:	40007800 	.word	0x40007800
 8004ae4:	40007c00 	.word	0x40007c00
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0x330>
 8004aee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004af2:	d009      	beq.n	8004b08 <UART_SetConfig+0x33c>
 8004af4:	e00b      	b.n	8004b0e <UART_SetConfig+0x342>
 8004af6:	2300      	movs	r3, #0
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e00e      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004afc:	2302      	movs	r3, #2
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e00b      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004b02:	2304      	movs	r3, #4
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e008      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e005      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	bf00      	nop
 8004b14:	e001      	b.n	8004b1a <UART_SetConfig+0x34e>
 8004b16:	2310      	movs	r3, #16
 8004b18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b22:	d17f      	bne.n	8004c24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d85c      	bhi.n	8004be4 <UART_SetConfig+0x418>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x364>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b95 	.word	0x08004b95
 8004b3c:	08004be5 	.word	0x08004be5
 8004b40:	08004bad 	.word	0x08004bad
 8004b44:	08004be5 	.word	0x08004be5
 8004b48:	08004be5 	.word	0x08004be5
 8004b4c:	08004be5 	.word	0x08004be5
 8004b50:	08004bcd 	.word	0x08004bcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7ff fd32 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8004b58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	005a      	lsls	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	61bb      	str	r3, [r7, #24]
        break;
 8004b72:	e03a      	b.n	8004bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7ff fd36 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8004b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	61bb      	str	r3, [r7, #24]
        break;
 8004b92:	e02a      	b.n	8004bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	085a      	lsrs	r2, r3, #1
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <UART_SetConfig+0x54c>)
 8004b9c:	4413      	add	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6852      	ldr	r2, [r2, #4]
 8004ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	61bb      	str	r3, [r7, #24]
        break;
 8004baa:	e01e      	b.n	8004bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bac:	f7ff fc22 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 8004bb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	005a      	lsls	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	61bb      	str	r3, [r7, #24]
        break;
 8004bca:	e00e      	b.n	8004bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	61bb      	str	r3, [r7, #24]
        break;
 8004be2:	e002      	b.n	8004bea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
        break;
 8004be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d916      	bls.n	8004c1e <UART_SetConfig+0x452>
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf6:	d212      	bcs.n	8004c1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f023 030f 	bic.w	r3, r3, #15
 8004c00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	897a      	ldrh	r2, [r7, #10]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e070      	b.n	8004d00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
 8004c22:	e06d      	b.n	8004d00 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d859      	bhi.n	8004cde <UART_SetConfig+0x512>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x464>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c91 	.word	0x08004c91
 8004c3c:	08004cdf 	.word	0x08004cdf
 8004c40:	08004ca9 	.word	0x08004ca9
 8004c44:	08004cdf 	.word	0x08004cdf
 8004c48:	08004cdf 	.word	0x08004cdf
 8004c4c:	08004cdf 	.word	0x08004cdf
 8004c50:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7ff fcb2 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8004c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085a      	lsrs	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	61bb      	str	r3, [r7, #24]
        break;
 8004c70:	e038      	b.n	8004ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c72:	f7ff fcb7 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8004c76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	085a      	lsrs	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	61bb      	str	r3, [r7, #24]
        break;
 8004c8e:	e029      	b.n	8004ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	085a      	lsrs	r2, r3, #1
 8004c96:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <UART_SetConfig+0x550>)
 8004c98:	4413      	add	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6852      	ldr	r2, [r2, #4]
 8004c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	61bb      	str	r3, [r7, #24]
        break;
 8004ca6:	e01d      	b.n	8004ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca8:	f7ff fba4 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 8004cac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	085a      	lsrs	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	61bb      	str	r3, [r7, #24]
        break;
 8004cc4:	e00e      	b.n	8004ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	61bb      	str	r3, [r7, #24]
        break;
 8004cdc:	e002      	b.n	8004ce4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ce2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d908      	bls.n	8004cfc <UART_SetConfig+0x530>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d204      	bcs.n	8004cfc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e001      	b.n	8004d00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	01e84800 	.word	0x01e84800
 8004d1c:	00f42400 	.word	0x00f42400

08004d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1e:	d10a      	bne.n	8004e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e72:	f7fc f8eb 	bl	800104c <HAL_GetTick>
 8004e76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d10e      	bne.n	8004ea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f82a 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e020      	b.n	8004ee6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d10e      	bne.n	8004ed0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f814 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e00a      	b.n	8004ee6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	e05d      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d059      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f08:	f7fc f8a0 	bl	800104c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11b      	bne.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e042      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02b      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f72:	d123      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f7c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e00f      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d092      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	f107 001c 	add.w	r0, r7, #28
 8004ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d120      	bne.n	800503e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <USB_CoreInit+0xac>)
 800500e:	4013      	ands	r3, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f942 	bl	80052bc <USB_CoreReset>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e010      	b.n	8005060 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f936 	bl	80052bc <USB_CoreReset>
 8005050:	4603      	mov	r3, r0
 8005052:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	2b01      	cmp	r3, #1
 8005064:	d10b      	bne.n	800507e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f043 0206 	orr.w	r2, r3, #6
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800508a:	b004      	add	sp, #16
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	ffbdffbf 	.word	0xffbdffbf

08005094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f043 0201 	orr.w	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d106      	bne.n	8005104 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e00b      	b.n	800511c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	e001      	b.n	800511c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e003      	b.n	8005124 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800511c:	2032      	movs	r0, #50	; 0x32
 800511e:	f7fb ffa1 	bl	8001064 <HAL_Delay>

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3301      	adds	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a09      	ldr	r2, [pc, #36]	; (8005174 <USB_FlushTxFifo+0x48>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e006      	b.n	8005166 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b20      	cmp	r3, #32
 8005162:	d0f0      	beq.n	8005146 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	00030d40 	.word	0x00030d40

08005178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2210      	movs	r2, #16
 8005188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <USB_FlushRxFifo+0x40>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d0f0      	beq.n	800518a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	00030d40 	.word	0x00030d40

080051bc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	; 0x24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	460b      	mov	r3, r1
 80051cc:	71fb      	strb	r3, [r7, #7]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80051da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11a      	bne.n	8005218 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051e2:	88bb      	ldrh	r3, [r7, #4]
 80051e4:	3303      	adds	r3, #3
 80051e6:	089b      	lsrs	r3, r3, #2
 80051e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e00f      	b.n	8005210 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	031a      	lsls	r2, r3, #12
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fc:	461a      	mov	r2, r3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3304      	adds	r3, #4
 8005208:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	3301      	adds	r3, #1
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3eb      	bcc.n	80051f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	; 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005226:	b480      	push	{r7}
 8005228:	b089      	sub	sp, #36	; 0x24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	3303      	adds	r3, #3
 8005240:	089b      	lsrs	r3, r3, #2
 8005242:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	e00b      	b.n	8005262 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	601a      	str	r2, [r3, #0]
    pDest++;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3304      	adds	r3, #4
 800525a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	3301      	adds	r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3ef      	bcc.n	800524a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800526a:	69fb      	ldr	r3, [r7, #28]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3724      	adds	r7, #36	; 0x24
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005290:	68fb      	ldr	r3, [r7, #12]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0301 	and.w	r3, r3, #1
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a13      	ldr	r2, [pc, #76]	; (8005320 <USB_CoreReset+0x64>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e01b      	b.n	8005312 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	daf2      	bge.n	80052c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <USB_CoreReset+0x64>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b01      	cmp	r3, #1
 800530e:	d0f0      	beq.n	80052f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	00030d40 	.word	0x00030d40

08005324 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005324:	b084      	sub	sp, #16
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	f107 001c 	add.w	r0, r7, #28
 8005332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005340:	461a      	mov	r2, r3
 8005342:	2300      	movs	r3, #0
 8005344:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d018      	beq.n	8005390 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2b01      	cmp	r3, #1
 8005362:	d10a      	bne.n	800537a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	e014      	b.n	80053a4 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e009      	b.n	80053a4 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800539e:	f023 0304 	bic.w	r3, r3, #4
 80053a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80053a4:	2110      	movs	r1, #16
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fec0 	bl	800512c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff fee3 	bl	8005178 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e015      	b.n	80053e4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	461a      	mov	r2, r3
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3e5      	bcc.n	80053b8 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80053ec:	2101      	movs	r1, #1
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8ac 	bl	800554c <USB_DriveVbus>

  HAL_Delay(200U);
 80053f4:	20c8      	movs	r0, #200	; 0xc8
 80053f6:	f7fb fe35 	bl	8001064 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f04f 32ff 	mov.w	r2, #4294967295
 8005406:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <USB_HostInit+0x14c>)
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a13      	ldr	r2, [pc, #76]	; (8005474 <USB_HostInit+0x150>)
 8005426:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800542a:	e009      	b.n	8005440 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2280      	movs	r2, #128	; 0x80
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a10      	ldr	r2, [pc, #64]	; (8005478 <USB_HostInit+0x154>)
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a10      	ldr	r2, [pc, #64]	; (800547c <USB_HostInit+0x158>)
 800543c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d105      	bne.n	8005452 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f043 0210 	orr.w	r2, r3, #16
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <USB_HostInit+0x15c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800546a:	b004      	add	sp, #16
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	01000200 	.word	0x01000200
 8005474:	00e00300 	.word	0x00e00300
 8005478:	00600080 	.word	0x00600080
 800547c:	004000e0 	.word	0x004000e0
 8005480:	a3200008 	.word	0xa3200008

08005484 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054cc:	461a      	mov	r2, r3
 80054ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	e009      	b.n	80054ea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80054d6:	78fb      	ldrb	r3, [r7, #3]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d106      	bne.n	80054ea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e2:	461a      	mov	r2, r3
 80054e4:	f241 7370 	movw	r3, #6000	; 0x1770
 80054e8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005518:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005526:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005528:	2064      	movs	r0, #100	; 0x64
 800552a:	f7fb fd9b 	bl	8001064 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800553c:	200a      	movs	r0, #10
 800553e:	f7fb fd91 	bl	8001064 <HAL_Delay>

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005570:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <USB_DriveVbus+0x44>
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d106      	bne.n	8005590 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800558a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800558e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559a:	d109      	bne.n	80055b0 <USB_DriveVbus+0x64>
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	0c5b      	lsrs	r3, r3, #17
 80055dc:	f003 0303 	and.w	r3, r3, #3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	b29b      	uxth	r3, r3
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	4603      	mov	r3, r0
 8005620:	70fb      	strb	r3, [r7, #3]
 8005622:	460b      	mov	r3, r1
 8005624:	70bb      	strb	r3, [r7, #2]
 8005626:	4613      	mov	r3, r2
 8005628:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563e:	461a      	mov	r2, r3
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
 8005644:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800564a:	2b03      	cmp	r3, #3
 800564c:	d87e      	bhi.n	800574c <USB_HC_Init+0x13c>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <USB_HC_Init+0x44>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005665 	.word	0x08005665
 8005658:	0800570f 	.word	0x0800570f
 800565c:	08005665 	.word	0x08005665
 8005660:	080056d1 	.word	0x080056d1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	461a      	mov	r2, r3
 8005672:	f240 439d 	movw	r3, #1181	; 0x49d
 8005676:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800567c:	2b00      	cmp	r3, #0
 800567e:	da10      	bge.n	80056a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80056a0:	e057      	b.n	8005752 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d051      	beq.n	8005752 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056cc:	60d3      	str	r3, [r2, #12]
      break;
 80056ce:	e040      	b.n	8005752 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	461a      	mov	r2, r3
 80056de:	f240 639d 	movw	r3, #1693	; 0x69d
 80056e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da34      	bge.n	8005756 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800570c:	e023      	b.n	8005756 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	461a      	mov	r2, r3
 800571c:	f240 2325 	movw	r3, #549	; 0x225
 8005720:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005722:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da17      	bge.n	800575a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	440a      	add	r2, r1
 8005740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005744:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005748:	60d3      	str	r3, [r2, #12]
      }
      break;
 800574a:	e006      	b.n	800575a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]
      break;
 8005750:	e004      	b.n	800575c <USB_HC_Init+0x14c>
      break;
 8005752:	bf00      	nop
 8005754:	e002      	b.n	800575c <USB_HC_Init+0x14c>
      break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <USB_HC_Init+0x14c>
      break;
 800575a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005776:	4313      	orrs	r3, r2
 8005778:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005786:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da03      	bge.n	8005796 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e001      	b.n	800579a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800579a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d103      	bne.n	80057aa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e001      	b.n	80057ae <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ae:	787b      	ldrb	r3, [r7, #1]
 80057b0:	059b      	lsls	r3, r3, #22
 80057b2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057b6:	78bb      	ldrb	r3, [r7, #2]
 80057b8:	02db      	lsls	r3, r3, #11
 80057ba:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057c4:	049b      	lsls	r3, r3, #18
 80057c6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	0159      	lsls	r1, r3, #5
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	440b      	add	r3, r1
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ea:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80057ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d10f      	bne.n	8005814 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	440a      	add	r2, r1
 800580a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800580e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005812:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
}
 8005816:	4618      	mov	r0, r3
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop

08005824 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	; 0x30
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800583c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005840:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d028      	beq.n	80058a0 <USB_HC_StartXfer+0x7c>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d124      	bne.n	80058a0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <USB_HC_StartXfer+0x50>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	795b      	ldrb	r3, [r3, #5]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d107      	bne.n	8005874 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	4619      	mov	r1, r3
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fa2e 	bl	8005ccc <USB_DoPing>
      return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e112      	b.n	8005a9a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d112      	bne.n	80058a0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	6a3a      	ldr	r2, [r7, #32]
 800588e:	440a      	add	r2, r1
 8005890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005894:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005898:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d018      	beq.n	80058da <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	8912      	ldrh	r2, [r2, #8]
 80058b0:	4413      	add	r3, r2
 80058b2:	3b01      	subs	r3, #1
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	8912      	ldrh	r2, [r2, #8]
 80058b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058bc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058c0:	8b7b      	ldrh	r3, [r7, #26]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d90b      	bls.n	80058de <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80058c6:	8b7b      	ldrh	r3, [r7, #26]
 80058c8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80058ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	8912      	ldrh	r2, [r2, #8]
 80058d0:	fb02 f203 	mul.w	r2, r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	e001      	b.n	80058de <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80058da:	2301      	movs	r3, #1
 80058dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	78db      	ldrb	r3, [r3, #3]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80058e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	8912      	ldrh	r2, [r2, #8]
 80058ec:	fb02 f203 	mul.w	r2, r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fe:	04d9      	lsls	r1, r3, #19
 8005900:	4b68      	ldr	r3, [pc, #416]	; (8005aa4 <USB_HC_StartXfer+0x280>)
 8005902:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005904:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	7a9b      	ldrb	r3, [r3, #10]
 800590a:	075b      	lsls	r3, r3, #29
 800590c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	0148      	lsls	r0, r1, #5
 8005914:	6a39      	ldr	r1, [r7, #32]
 8005916:	4401      	add	r1, r0
 8005918:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800591c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800591e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	460a      	mov	r2, r1
 8005938:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf0c      	ite	eq
 800594a:	2301      	moveq	r3, #1
 800594c:	2300      	movne	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005970:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	7e7b      	ldrb	r3, [r7, #25]
 8005982:	075b      	lsls	r3, r3, #29
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	0148      	lsls	r0, r1, #5
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	4401      	add	r1, r0
 800598c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a41      	ldr	r2, [pc, #260]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059a4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059a6:	4b40      	ldr	r3, [pc, #256]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059ae:	4a3e      	ldr	r2, [pc, #248]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	78db      	ldrb	r3, [r3, #3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059ba:	4b3b      	ldr	r3, [pc, #236]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	4a39      	ldr	r2, [pc, #228]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e005      	b.n	80059d4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059c8:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059d0:	4a35      	ldr	r2, [pc, #212]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059d2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059d4:	4b34      	ldr	r3, [pc, #208]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	4a32      	ldr	r2, [pc, #200]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059de:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	461a      	mov	r2, r3
 80059ee:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <USB_HC_StartXfer+0x284>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d14e      	bne.n	8005a98 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d14a      	bne.n	8005a98 <USB_HC_StartXfer+0x274>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d046      	beq.n	8005a98 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	79db      	ldrb	r3, [r3, #7]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d830      	bhi.n	8005a74 <USB_HC_StartXfer+0x250>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USB_HC_StartXfer+0x1f4>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a29 	.word	0x08005a29
 8005a24:	08005a4d 	.word	0x08005a4d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a32:	8afa      	ldrh	r2, [r7, #22]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d91c      	bls.n	8005a78 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	619a      	str	r2, [r3, #24]
          }
          break;
 8005a4a:	e015      	b.n	8005a78 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	3303      	adds	r3, #3
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a56:	8afa      	ldrh	r2, [r7, #22]
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d90a      	bls.n	8005a7c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	619a      	str	r2, [r3, #24]
          }
          break;
 8005a72:	e003      	b.n	8005a7c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005a74:	bf00      	nop
 8005a76:	e002      	b.n	8005a7e <USB_HC_StartXfer+0x25a>
          break;
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <USB_HC_StartXfer+0x25a>
          break;
 8005a7c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	68d9      	ldr	r1, [r3, #12]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	785a      	ldrb	r2, [r3, #1]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	b298      	uxth	r0, r3
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4603      	mov	r3, r0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fb92 	bl	80051bc <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3728      	adds	r7, #40	; 0x28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	1ff80000 	.word	0x1ff80000
 8005aa8:	200080d4 	.word	0x200080d4

08005aac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	b29b      	uxth	r3, r3
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b087      	sub	sp, #28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	0c9b      	lsrs	r3, r3, #18
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <USB_HC_Halt+0x3a>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d16c      	bne.n	8005be2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d143      	bne.n	8005bbc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b92:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba0:	d81d      	bhi.n	8005bde <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb8:	d0ec      	beq.n	8005b94 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bba:	e080      	b.n	8005cbe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bda:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bdc:	e06f      	b.n	8005cbe <USB_HC_Halt+0x1f0>
          break;
 8005bde:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005be0:	e06d      	b.n	8005cbe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c00:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d143      	bne.n	8005c9a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c70:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	3301      	adds	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c7e:	d81d      	bhi.n	8005cbc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c96:	d0ec      	beq.n	8005c72 <USB_HC_Halt+0x1a4>
 8005c98:	e011      	b.n	8005cbe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e000      	b.n	8005cbe <USB_HC_Halt+0x1f0>
          break;
 8005cbc:	bf00      	nop
    }
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	04da      	lsls	r2, r3, #19
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <USB_DoPing+0x74>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d14:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	1ff80000 	.word	0x1ff80000

08005d44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff f9ae 	bl	80050b6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005d5a:	2110      	movs	r1, #16
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff f9e5 	bl	800512c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fa08 	bl	8005178 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	e01f      	b.n	8005dae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d94:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	461a      	mov	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3301      	adds	r3, #1
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b0f      	cmp	r3, #15
 8005db2:	d9dc      	bls.n	8005d6e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	e034      	b.n	8005e24 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005de0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	461a      	mov	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3301      	adds	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e00:	d80c      	bhi.n	8005e1c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e18:	d0ec      	beq.n	8005df4 <USB_StopHost+0xb0>
 8005e1a:	e000      	b.n	8005e1e <USB_StopHost+0xda>
        break;
 8005e1c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3301      	adds	r3, #1
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d9c7      	bls.n	8005dba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e30:	461a      	mov	r2, r3
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295
 8005e36:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff f927 	bl	8005094 <USB_EnableGlobalInt>

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
char USBH_Path[4];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005e54:	4904      	ldr	r1, [pc, #16]	; (8005e68 <MX_FATFS_Init+0x18>)
 8005e56:	4805      	ldr	r0, [pc, #20]	; (8005e6c <MX_FATFS_Init+0x1c>)
 8005e58:	f005 fa08 	bl	800b26c <FATFS_LinkDriver>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <MX_FATFS_Init+0x20>)
 8005e62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e64:	bf00      	nop
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20008900 	.word	0x20008900
 8005e6c:	0800cab0 	.word	0x0800cab0
 8005e70:	20008d68 	.word	0x20008d68

08005e74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	4619      	mov	r1, r3
 8005eae:	4808      	ldr	r0, [pc, #32]	; (8005ed0 <USBH_status+0x34>)
 8005eb0:	f000 fe11 	bl	8006ad6 <USBH_MSC_UnitIsReady>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <USBH_status+0x24>
  {
    res = RES_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e001      	b.n	8005ec4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20008d6c 	.word	0x20008d6c

08005ed4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b094      	sub	sp, #80	; 0x50
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005eea:	7bf9      	ldrb	r1, [r7, #15]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4812      	ldr	r0, [pc, #72]	; (8005f40 <USBH_read+0x6c>)
 8005ef6:	f000 fe38 	bl	8006b6a <USBH_MSC_Read>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d103      	bne.n	8005f08 <USBH_read+0x34>
  {
    res = RES_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f06:	e015      	b.n	8005f34 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005f08:	f107 0210 	add.w	r2, r7, #16
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	480b      	ldr	r0, [pc, #44]	; (8005f40 <USBH_read+0x6c>)
 8005f12:	f000 fe06 	bl	8006b22 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005f16:	7f7b      	ldrb	r3, [r7, #29]
 8005f18:	2b28      	cmp	r3, #40	; 0x28
 8005f1a:	d003      	beq.n	8005f24 <USBH_read+0x50>
 8005f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8005f1e:	d001      	beq.n	8005f24 <USBH_read+0x50>
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d103      	bne.n	8005f2c <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005f24:	2303      	movs	r3, #3
 8005f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005f2a:	e003      	b.n	8005f34 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005f32:	bf00      	nop
    }
  }

  return res;
 8005f34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3748      	adds	r7, #72	; 0x48
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20008d6c 	.word	0x20008d6c

08005f44 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b094      	sub	sp, #80	; 0x50
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005f5a:	7bf9      	ldrb	r1, [r7, #15]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4817      	ldr	r0, [pc, #92]	; (8005fc4 <USBH_write+0x80>)
 8005f66:	f000 fe69 	bl	8006c3c <USBH_MSC_Write>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <USBH_write+0x34>
  {
    res = RES_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f76:	e01f      	b.n	8005fb8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005f78:	f107 0210 	add.w	r2, r7, #16
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4810      	ldr	r0, [pc, #64]	; (8005fc4 <USBH_write+0x80>)
 8005f82:	f000 fdce 	bl	8006b22 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005f86:	7f7b      	ldrb	r3, [r7, #29]
 8005f88:	2b27      	cmp	r3, #39	; 0x27
 8005f8a:	d009      	beq.n	8005fa0 <USBH_write+0x5c>
 8005f8c:	2b27      	cmp	r3, #39	; 0x27
 8005f8e:	dc02      	bgt.n	8005f96 <USBH_write+0x52>
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d009      	beq.n	8005fa8 <USBH_write+0x64>
 8005f94:	e00c      	b.n	8005fb0 <USBH_write+0x6c>
 8005f96:	2b28      	cmp	r3, #40	; 0x28
 8005f98:	d006      	beq.n	8005fa8 <USBH_write+0x64>
 8005f9a:	2b3a      	cmp	r3, #58	; 0x3a
 8005f9c:	d004      	beq.n	8005fa8 <USBH_write+0x64>
 8005f9e:	e007      	b.n	8005fb0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005fa6:	e007      	b.n	8005fb8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005fae:	e003      	b.n	8005fb8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005fb6:	bf00      	nop
    }
  }

  return res;
 8005fb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3748      	adds	r7, #72	; 0x48
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20008d6c 	.word	0x20008d6c

08005fc8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b090      	sub	sp, #64	; 0x40
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	603a      	str	r2, [r7, #0]
 8005fd2:	71fb      	strb	r3, [r7, #7]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005fde:	79bb      	ldrb	r3, [r7, #6]
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d852      	bhi.n	800608a <USBH_ioctl+0xc2>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <USBH_ioctl+0x24>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	08006005 	.word	0x08006005
 8005ff4:	0800602f 	.word	0x0800602f
 8005ff8:	0800605b 	.word	0x0800605b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006002:	e045      	b.n	8006090 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006004:	f107 0208 	add.w	r2, r7, #8
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	4619      	mov	r1, r3
 800600c:	4823      	ldr	r0, [pc, #140]	; (800609c <USBH_ioctl+0xd4>)
 800600e:	f000 fd88 	bl	8006b22 <USBH_MSC_GetLUNInfo>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006024:	e034      	b.n	8006090 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800602c:	e030      	b.n	8006090 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800602e:	f107 0208 	add.w	r2, r7, #8
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	4619      	mov	r1, r3
 8006036:	4819      	ldr	r0, [pc, #100]	; (800609c <USBH_ioctl+0xd4>)
 8006038:	f000 fd73 	bl	8006b22 <USBH_MSC_GetLUNInfo>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d107      	bne.n	8006052 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006042:	8a3b      	ldrh	r3, [r7, #16]
 8006044:	461a      	mov	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006050:	e01e      	b.n	8006090 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006058:	e01a      	b.n	8006090 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800605a:	f107 0208 	add.w	r2, r7, #8
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	4619      	mov	r1, r3
 8006062:	480e      	ldr	r0, [pc, #56]	; (800609c <USBH_ioctl+0xd4>)
 8006064:	f000 fd5d 	bl	8006b22 <USBH_MSC_GetLUNInfo>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800606e:	8a3b      	ldrh	r3, [r7, #16]
 8006070:	0a5b      	lsrs	r3, r3, #9
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006080:	e006      	b.n	8006090 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006088:	e002      	b.n	8006090 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800608a:	2304      	movs	r3, #4
 800608c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006094:	4618      	mov	r0, r3
 8006096:	3740      	adds	r7, #64	; 0x40
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20008d6c 	.word	0x20008d6c

080060a0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b089      	sub	sp, #36	; 0x24
 80060a4:	af04      	add	r7, sp, #16
 80060a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ae:	7919      	ldrb	r1, [r3, #4]
 80060b0:	2350      	movs	r3, #80	; 0x50
 80060b2:	2206      	movs	r2, #6
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fc4f 	bl	8007958 <USBH_FindInterface>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2bff      	cmp	r3, #255	; 0xff
 80060c2:	d002      	beq.n	80060ca <USBH_MSC_InterfaceInit+0x2a>
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d901      	bls.n	80060ce <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0ef      	b.n	80062ae <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fc24 	bl	8007920 <USBH_SelectInterface>
 80060d8:	4603      	mov	r3, r0
 80060da:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	e0e3      	b.n	80062ae <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80060ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80060f0:	f005 fc2e 	bl	800b950 <malloc>
 80060f4:	4603      	mov	r3, r0
 80060f6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006108:	2302      	movs	r3, #2
 800610a:	e0d0      	b.n	80062ae <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800610c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006110:	2100      	movs	r1, #0
 8006112:	68b8      	ldr	r0, [r7, #8]
 8006114:	f005 fc37 	bl	800b986 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	211a      	movs	r1, #26
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	4413      	add	r3, r2
 8006124:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b25b      	sxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	da16      	bge.n	800615e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	211a      	movs	r1, #26
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	4413      	add	r3, r2
 800613c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	211a      	movs	r1, #26
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	815a      	strh	r2, [r3, #10]
 800615c:	e015      	b.n	800618a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	211a      	movs	r1, #26
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	4413      	add	r3, r2
 800616a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	211a      	movs	r1, #26
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	4413      	add	r3, r2
 8006180:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	211a      	movs	r1, #26
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	4413      	add	r3, r2
 8006196:	f203 3356 	addw	r3, r3, #854	; 0x356
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b25b      	sxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da16      	bge.n	80061d0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	211a      	movs	r1, #26
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	211a      	movs	r1, #26
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061c8:	881a      	ldrh	r2, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	815a      	strh	r2, [r3, #10]
 80061ce:	e015      	b.n	80061fc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	211a      	movs	r1, #26
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	211a      	movs	r1, #26
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2200      	movs	r2, #0
 8006206:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	799b      	ldrb	r3, [r3, #6]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f002 fdc2 	bl	8008d9e <USBH_AllocPipe>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	79db      	ldrb	r3, [r3, #7]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f002 fdb8 	bl	8008d9e <USBH_AllocPipe>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fda4 	bl	8006d84 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	7959      	ldrb	r1, [r3, #5]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	7998      	ldrb	r0, [r3, #6]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	8912      	ldrh	r2, [r2, #8]
 8006254:	9202      	str	r2, [sp, #8]
 8006256:	2202      	movs	r2, #2
 8006258:	9201      	str	r2, [sp, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	4623      	mov	r3, r4
 800625e:	4602      	mov	r2, r0
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f002 fd6d 	bl	8008d40 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	7919      	ldrb	r1, [r3, #4]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	79d8      	ldrb	r0, [r3, #7]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	8952      	ldrh	r2, [r2, #10]
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	2202      	movs	r2, #2
 8006282:	9201      	str	r2, [sp, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4623      	mov	r3, r4
 8006288:	4602      	mov	r2, r0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f002 fd58 	bl	8008d40 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	791b      	ldrb	r3, [r3, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f005 fa7b 	bl	800b794 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	795b      	ldrb	r3, [r3, #5]
 80062a2:	2200      	movs	r2, #0
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f005 fa74 	bl	800b794 <USBH_LL_SetToggle>

  return USBH_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd90      	pop	{r4, r7, pc}

080062b6 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	795b      	ldrb	r3, [r3, #5]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00e      	beq.n	80062ee <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	795b      	ldrb	r3, [r3, #5]
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f002 fd51 	bl	8008d7e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	795b      	ldrb	r3, [r3, #5]
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f002 fd7c 	bl	8008de0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00e      	beq.n	8006314 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	791b      	ldrb	r3, [r3, #4]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f002 fd3e 	bl	8008d7e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f002 fd69 	bl	8008de0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	4618      	mov	r0, r3
 800632a:	f005 fb19 	bl	800b960 <free>
    phost->pActiveClass->pData = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006334:	2200      	movs	r2, #0
 8006336:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	7b9b      	ldrb	r3, [r3, #14]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d004      	beq.n	800636a <USBH_MSC_ClassRequest+0x28>
 8006360:	2b03      	cmp	r3, #3
 8006362:	d03e      	beq.n	80063e2 <USBH_MSC_ClassRequest+0xa0>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d000      	beq.n	800636a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8006368:	e04a      	b.n	8006400 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fcea 	bl	8006d48 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b03      	cmp	r3, #3
 800637c:	d104      	bne.n	8006388 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d135      	bne.n	80063fa <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d804      	bhi.n	80063a0 <USBH_MSC_ClassRequest+0x5e>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	b2da      	uxtb	r2, r3
 800639e:	e000      	b.n	80063a2 <USBH_MSC_ClassRequest+0x60>
 80063a0:	2202      	movs	r2, #2
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	73bb      	strb	r3, [r7, #14]
 80063aa:	e014      	b.n	80063d6 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	2134      	movs	r1, #52	; 0x34
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	4413      	add	r3, r2
 80063b8:	3392      	adds	r3, #146	; 0x92
 80063ba:	2202      	movs	r2, #2
 80063bc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	2134      	movs	r1, #52	; 0x34
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	33c1      	adds	r3, #193	; 0xc1
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	3301      	adds	r3, #1
 80063d4:	73bb      	strb	r3, [r7, #14]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	7bba      	ldrb	r2, [r7, #14]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d3e5      	bcc.n	80063ac <USBH_MSC_ClassRequest+0x6a>
      break;
 80063e0:	e00b      	b.n	80063fa <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80063e2:	2100      	movs	r1, #0
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f002 f878 	bl	80084da <USBH_ClrFeature>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	7bda      	ldrb	r2, [r3, #15]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	739a      	strb	r2, [r3, #14]
      break;
 80063f8:	e001      	b.n	80063fe <USBH_MSC_ClassRequest+0xbc>
      break;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <USBH_MSC_ClassRequest+0xbe>
      break;
 80063fe:	bf00      	nop
  }

  return status;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006426:	2301      	movs	r3, #1
 8006428:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	7b1b      	ldrb	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <USBH_MSC_Process+0x2e>
 8006432:	2b01      	cmp	r3, #1
 8006434:	f000 8271 	beq.w	800691a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006438:	e272      	b.n	8006920 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	429a      	cmp	r2, r3
 8006448:	f080 824f 	bcs.w	80068ea <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006452:	4619      	mov	r1, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	2334      	movs	r3, #52	; 0x34
 8006458:	fb03 f301 	mul.w	r3, r3, r1
 800645c:	4413      	add	r3, r2
 800645e:	3391      	adds	r3, #145	; 0x91
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800646a:	4619      	mov	r1, r3
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	2334      	movs	r3, #52	; 0x34
 8006470:	fb03 f301 	mul.w	r3, r3, r1
 8006474:	4413      	add	r3, r2
 8006476:	3390      	adds	r3, #144	; 0x90
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b08      	cmp	r3, #8
 800647c:	f200 8243 	bhi.w	8006906 <USBH_MSC_Process+0x4fa>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <USBH_MSC_Process+0x7c>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064ad 	.word	0x080064ad
 800648c:	08006907 	.word	0x08006907
 8006490:	08006575 	.word	0x08006575
 8006494:	080066f9 	.word	0x080066f9
 8006498:	080064d3 	.word	0x080064d3
 800649c:	080067c5 	.word	0x080067c5
 80064a0:	08006907 	.word	0x08006907
 80064a4:	08006907 	.word	0x08006907
 80064a8:	080068d9 	.word	0x080068d9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064b2:	4619      	mov	r1, r3
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	2334      	movs	r3, #52	; 0x34
 80064b8:	fb03 f301 	mul.w	r3, r3, r1
 80064bc:	4413      	add	r3, r2
 80064be:	3390      	adds	r3, #144	; 0x90
 80064c0:	2204      	movs	r2, #4
 80064c2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80064d0:	e222      	b.n	8006918 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064d8:	b2d9      	uxtb	r1, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064e0:	461a      	mov	r2, r3
 80064e2:	2334      	movs	r3, #52	; 0x34
 80064e4:	fb03 f302 	mul.w	r3, r3, r2
 80064e8:	3398      	adds	r3, #152	; 0x98
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	3307      	adds	r3, #7
 80064f0:	461a      	mov	r2, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 ff68 	bl	80073c8 <USBH_MSC_SCSI_Inquiry>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006508:	4619      	mov	r1, r3
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	2334      	movs	r3, #52	; 0x34
 800650e:	fb03 f301 	mul.w	r3, r3, r1
 8006512:	4413      	add	r3, r2
 8006514:	3390      	adds	r3, #144	; 0x90
 8006516:	2202      	movs	r2, #2
 8006518:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d10c      	bne.n	800653a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006526:	4619      	mov	r1, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	2334      	movs	r3, #52	; 0x34
 800652c:	fb03 f301 	mul.w	r3, r3, r1
 8006530:	4413      	add	r3, r2
 8006532:	3390      	adds	r3, #144	; 0x90
 8006534:	2205      	movs	r2, #5
 8006536:	701a      	strb	r2, [r3, #0]
            break;
 8006538:	e1e7      	b.n	800690a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b04      	cmp	r3, #4
 800653e:	f040 81e4 	bne.w	800690a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006548:	4619      	mov	r1, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	2334      	movs	r3, #52	; 0x34
 800654e:	fb03 f301 	mul.w	r3, r3, r1
 8006552:	4413      	add	r3, r2
 8006554:	3390      	adds	r3, #144	; 0x90
 8006556:	2201      	movs	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006560:	4619      	mov	r1, r3
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	2334      	movs	r3, #52	; 0x34
 8006566:	fb03 f301 	mul.w	r3, r3, r1
 800656a:	4413      	add	r3, r2
 800656c:	3391      	adds	r3, #145	; 0x91
 800656e:	2202      	movs	r2, #2
 8006570:	701a      	strb	r2, [r3, #0]
            break;
 8006572:	e1ca      	b.n	800690a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fe64 	bl	800724c <USBH_MSC_SCSI_TestUnitReady>
 8006584:	4603      	mov	r3, r0
 8006586:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d149      	bne.n	8006622 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006594:	4619      	mov	r1, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	2334      	movs	r3, #52	; 0x34
 800659a:	fb03 f301 	mul.w	r3, r3, r1
 800659e:	4413      	add	r3, r2
 80065a0:	3392      	adds	r3, #146	; 0x92
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065ae:	4619      	mov	r1, r3
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	2334      	movs	r3, #52	; 0x34
 80065b4:	fb03 f301 	mul.w	r3, r3, r1
 80065b8:	4413      	add	r3, r2
 80065ba:	33c1      	adds	r3, #193	; 0xc1
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e00b      	b.n	80065da <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065c8:	4619      	mov	r1, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	2334      	movs	r3, #52	; 0x34
 80065ce:	fb03 f301 	mul.w	r3, r3, r1
 80065d2:	4413      	add	r3, r2
 80065d4:	33c1      	adds	r3, #193	; 0xc1
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065e0:	4619      	mov	r1, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	2334      	movs	r3, #52	; 0x34
 80065e6:	fb03 f301 	mul.w	r3, r3, r1
 80065ea:	4413      	add	r3, r2
 80065ec:	3390      	adds	r3, #144	; 0x90
 80065ee:	2203      	movs	r2, #3
 80065f0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065f8:	4619      	mov	r1, r3
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	2334      	movs	r3, #52	; 0x34
 80065fe:	fb03 f301 	mul.w	r3, r3, r1
 8006602:	4413      	add	r3, r2
 8006604:	3391      	adds	r3, #145	; 0x91
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006610:	4619      	mov	r1, r3
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	2334      	movs	r3, #52	; 0x34
 8006616:	fb03 f301 	mul.w	r3, r3, r1
 800661a:	4413      	add	r3, r2
 800661c:	3392      	adds	r3, #146	; 0x92
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d14a      	bne.n	80066be <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800662e:	4619      	mov	r1, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	2334      	movs	r3, #52	; 0x34
 8006634:	fb03 f301 	mul.w	r3, r3, r1
 8006638:	4413      	add	r3, r2
 800663a:	3392      	adds	r3, #146	; 0x92
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d00c      	beq.n	800665c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006648:	4619      	mov	r1, r3
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	2334      	movs	r3, #52	; 0x34
 800664e:	fb03 f301 	mul.w	r3, r3, r1
 8006652:	4413      	add	r3, r2
 8006654:	33c1      	adds	r3, #193	; 0xc1
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e00b      	b.n	8006674 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006662:	4619      	mov	r1, r3
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	2334      	movs	r3, #52	; 0x34
 8006668:	fb03 f301 	mul.w	r3, r3, r1
 800666c:	4413      	add	r3, r2
 800666e:	33c1      	adds	r3, #193	; 0xc1
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800667a:	4619      	mov	r1, r3
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	2334      	movs	r3, #52	; 0x34
 8006680:	fb03 f301 	mul.w	r3, r3, r1
 8006684:	4413      	add	r3, r2
 8006686:	3390      	adds	r3, #144	; 0x90
 8006688:	2205      	movs	r2, #5
 800668a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006692:	4619      	mov	r1, r3
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	2334      	movs	r3, #52	; 0x34
 8006698:	fb03 f301 	mul.w	r3, r3, r1
 800669c:	4413      	add	r3, r2
 800669e:	3391      	adds	r3, #145	; 0x91
 80066a0:	2201      	movs	r2, #1
 80066a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066aa:	4619      	mov	r1, r3
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	2334      	movs	r3, #52	; 0x34
 80066b0:	fb03 f301 	mul.w	r3, r3, r1
 80066b4:	4413      	add	r3, r2
 80066b6:	3392      	adds	r3, #146	; 0x92
 80066b8:	2202      	movs	r2, #2
 80066ba:	701a      	strb	r2, [r3, #0]
            break;
 80066bc:	e127      	b.n	800690e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	f040 8124 	bne.w	800690e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066cc:	4619      	mov	r1, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	2334      	movs	r3, #52	; 0x34
 80066d2:	fb03 f301 	mul.w	r3, r3, r1
 80066d6:	4413      	add	r3, r2
 80066d8:	3390      	adds	r3, #144	; 0x90
 80066da:	2201      	movs	r2, #1
 80066dc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066e4:	4619      	mov	r1, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	2334      	movs	r3, #52	; 0x34
 80066ea:	fb03 f301 	mul.w	r3, r3, r1
 80066ee:	4413      	add	r3, r2
 80066f0:	3391      	adds	r3, #145	; 0x91
 80066f2:	2202      	movs	r2, #2
 80066f4:	701a      	strb	r2, [r3, #0]
            break;
 80066f6:	e10a      	b.n	800690e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066fe:	b2d9      	uxtb	r1, r3
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006706:	461a      	mov	r2, r3
 8006708:	2334      	movs	r3, #52	; 0x34
 800670a:	fb03 f302 	mul.w	r3, r3, r2
 800670e:	3390      	adds	r3, #144	; 0x90
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	3304      	adds	r3, #4
 8006716:	461a      	mov	r2, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fdda 	bl	80072d2 <USBH_MSC_SCSI_ReadCapacity>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d120      	bne.n	800676a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800672e:	4619      	mov	r1, r3
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	2334      	movs	r3, #52	; 0x34
 8006734:	fb03 f301 	mul.w	r3, r3, r1
 8006738:	4413      	add	r3, r2
 800673a:	3390      	adds	r3, #144	; 0x90
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006746:	4619      	mov	r1, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	2334      	movs	r3, #52	; 0x34
 800674c:	fb03 f301 	mul.w	r3, r3, r1
 8006750:	4413      	add	r3, r2
 8006752:	3391      	adds	r3, #145	; 0x91
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800675e:	3301      	adds	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006768:	e0d3      	b.n	8006912 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d10c      	bne.n	800678a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006776:	4619      	mov	r1, r3
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	2334      	movs	r3, #52	; 0x34
 800677c:	fb03 f301 	mul.w	r3, r3, r1
 8006780:	4413      	add	r3, r2
 8006782:	3390      	adds	r3, #144	; 0x90
 8006784:	2205      	movs	r2, #5
 8006786:	701a      	strb	r2, [r3, #0]
            break;
 8006788:	e0c3      	b.n	8006912 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b04      	cmp	r3, #4
 800678e:	f040 80c0 	bne.w	8006912 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006798:	4619      	mov	r1, r3
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	2334      	movs	r3, #52	; 0x34
 800679e:	fb03 f301 	mul.w	r3, r3, r1
 80067a2:	4413      	add	r3, r2
 80067a4:	3390      	adds	r3, #144	; 0x90
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067b0:	4619      	mov	r1, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	2334      	movs	r3, #52	; 0x34
 80067b6:	fb03 f301 	mul.w	r3, r3, r1
 80067ba:	4413      	add	r3, r2
 80067bc:	3391      	adds	r3, #145	; 0x91
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
            break;
 80067c2:	e0a6      	b.n	8006912 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067ca:	b2d9      	uxtb	r1, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067d2:	461a      	mov	r2, r3
 80067d4:	2334      	movs	r3, #52	; 0x34
 80067d6:	fb03 f302 	mul.w	r3, r3, r2
 80067da:	3398      	adds	r3, #152	; 0x98
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	3304      	adds	r3, #4
 80067e2:	461a      	mov	r2, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fe94 	bl	8007512 <USBH_MSC_SCSI_RequestSense>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d145      	bne.n	8006880 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067fa:	4619      	mov	r1, r3
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	2334      	movs	r3, #52	; 0x34
 8006800:	fb03 f301 	mul.w	r3, r3, r1
 8006804:	4413      	add	r3, r2
 8006806:	339c      	adds	r3, #156	; 0x9c
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b06      	cmp	r3, #6
 800680c:	d00c      	beq.n	8006828 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006814:	4619      	mov	r1, r3
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	2334      	movs	r3, #52	; 0x34
 800681a:	fb03 f301 	mul.w	r3, r3, r1
 800681e:	4413      	add	r3, r2
 8006820:	339c      	adds	r3, #156	; 0x9c
 8006822:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006824:	2b02      	cmp	r3, #2
 8006826:	d117      	bne.n	8006858 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f242 720f 	movw	r2, #9999	; 0x270f
 800683a:	4293      	cmp	r3, r2
 800683c:	d80c      	bhi.n	8006858 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006844:	4619      	mov	r1, r3
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	2334      	movs	r3, #52	; 0x34
 800684a:	fb03 f301 	mul.w	r3, r3, r1
 800684e:	4413      	add	r3, r2
 8006850:	3390      	adds	r3, #144	; 0x90
 8006852:	2202      	movs	r2, #2
 8006854:	701a      	strb	r2, [r3, #0]
                  break;
 8006856:	e05f      	b.n	8006918 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800685e:	4619      	mov	r1, r3
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	2334      	movs	r3, #52	; 0x34
 8006864:	fb03 f301 	mul.w	r3, r3, r1
 8006868:	4413      	add	r3, r2
 800686a:	3390      	adds	r3, #144	; 0x90
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006876:	3301      	adds	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d10c      	bne.n	80068a0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800688c:	4619      	mov	r1, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	2334      	movs	r3, #52	; 0x34
 8006892:	fb03 f301 	mul.w	r3, r3, r1
 8006896:	4413      	add	r3, r2
 8006898:	3390      	adds	r3, #144	; 0x90
 800689a:	2208      	movs	r2, #8
 800689c:	701a      	strb	r2, [r3, #0]
            break;
 800689e:	e03a      	b.n	8006916 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d137      	bne.n	8006916 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068ac:	4619      	mov	r1, r3
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	2334      	movs	r3, #52	; 0x34
 80068b2:	fb03 f301 	mul.w	r3, r3, r1
 80068b6:	4413      	add	r3, r2
 80068b8:	3390      	adds	r3, #144	; 0x90
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068c4:	4619      	mov	r1, r3
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	2334      	movs	r3, #52	; 0x34
 80068ca:	fb03 f301 	mul.w	r3, r3, r1
 80068ce:	4413      	add	r3, r2
 80068d0:	3391      	adds	r3, #145	; 0x91
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
            break;
 80068d6:	e01e      	b.n	8006916 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068de:	3301      	adds	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80068e8:	e016      	b.n	8006918 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2201      	movs	r2, #1
 80068f6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068fe:	2102      	movs	r1, #2
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4798      	blx	r3
      break;
 8006904:	e00c      	b.n	8006920 <USBH_MSC_Process+0x514>
            break;
 8006906:	bf00      	nop
 8006908:	e00a      	b.n	8006920 <USBH_MSC_Process+0x514>
            break;
 800690a:	bf00      	nop
 800690c:	e008      	b.n	8006920 <USBH_MSC_Process+0x514>
            break;
 800690e:	bf00      	nop
 8006910:	e006      	b.n	8006920 <USBH_MSC_Process+0x514>
            break;
 8006912:	bf00      	nop
 8006914:	e004      	b.n	8006920 <USBH_MSC_Process+0x514>
            break;
 8006916:	bf00      	nop
      break;
 8006918:	e002      	b.n	8006920 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
      break;
 800691e:	bf00      	nop
  }
  return error;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop

0800692c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b088      	sub	sp, #32
 8006946:	af02      	add	r7, sp, #8
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006958:	2301      	movs	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	2134      	movs	r1, #52	; 0x34
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	4413      	add	r3, r2
 800696c:	3390      	adds	r3, #144	; 0x90
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b06      	cmp	r3, #6
 8006972:	d004      	beq.n	800697e <USBH_MSC_RdWrProcess+0x3c>
 8006974:	2b07      	cmp	r3, #7
 8006976:	d037      	beq.n	80069e8 <USBH_MSC_RdWrProcess+0xa6>
 8006978:	2b05      	cmp	r3, #5
 800697a:	d06a      	beq.n	8006a52 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800697c:	e0a6      	b.n	8006acc <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800697e:	78f9      	ldrb	r1, [r7, #3]
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2300      	movs	r3, #0
 8006986:	2200      	movs	r2, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fea6 	bl	80076da <USBH_MSC_SCSI_Read>
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10b      	bne.n	80069b0 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	2134      	movs	r1, #52	; 0x34
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	4413      	add	r3, r2
 80069a4:	3390      	adds	r3, #144	; 0x90
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	e088      	b.n	8006ac2 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d109      	bne.n	80069ca <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	2134      	movs	r1, #52	; 0x34
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	3390      	adds	r3, #144	; 0x90
 80069c4:	2205      	movs	r2, #5
 80069c6:	701a      	strb	r2, [r3, #0]
      break;
 80069c8:	e07b      	b.n	8006ac2 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d178      	bne.n	8006ac2 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	2134      	movs	r1, #52	; 0x34
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	3390      	adds	r3, #144	; 0x90
 80069de:	2208      	movs	r2, #8
 80069e0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80069e2:	2302      	movs	r3, #2
 80069e4:	75fb      	strb	r3, [r7, #23]
      break;
 80069e6:	e06c      	b.n	8006ac2 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80069e8:	78f9      	ldrb	r1, [r7, #3]
 80069ea:	2300      	movs	r3, #0
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	2300      	movs	r3, #0
 80069f0:	2200      	movs	r2, #0
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fe06 	bl	8007604 <USBH_MSC_SCSI_Write>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	2134      	movs	r1, #52	; 0x34
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3390      	adds	r3, #144	; 0x90
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]
      break;
 8006a18:	e055      	b.n	8006ac6 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d109      	bne.n	8006a34 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	2134      	movs	r1, #52	; 0x34
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3390      	adds	r3, #144	; 0x90
 8006a2e:	2205      	movs	r2, #5
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	e048      	b.n	8006ac6 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d145      	bne.n	8006ac6 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	2134      	movs	r1, #52	; 0x34
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	4413      	add	r3, r2
 8006a46:	3390      	adds	r3, #144	; 0x90
 8006a48:	2208      	movs	r2, #8
 8006a4a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a50:	e039      	b.n	8006ac6 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	2234      	movs	r2, #52	; 0x34
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	3398      	adds	r3, #152	; 0x98
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	1d1a      	adds	r2, r3, #4
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fd53 	bl	8007512 <USBH_MSC_SCSI_RequestSense>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d113      	bne.n	8006a9e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	2134      	movs	r1, #52	; 0x34
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	4413      	add	r3, r2
 8006a82:	3390      	adds	r3, #144	; 0x90
 8006a84:	2201      	movs	r2, #1
 8006a86:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	2134      	movs	r1, #52	; 0x34
 8006a8e:	fb01 f303 	mul.w	r3, r1, r3
 8006a92:	4413      	add	r3, r2
 8006a94:	3391      	adds	r3, #145	; 0x91
 8006a96:	2202      	movs	r2, #2
 8006a98:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d012      	beq.n	8006aca <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d10f      	bne.n	8006aca <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	2134      	movs	r1, #52	; 0x34
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3390      	adds	r3, #144	; 0x90
 8006ab8:	2208      	movs	r2, #8
 8006aba:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac0:	e003      	b.n	8006aca <USBH_MSC_RdWrProcess+0x188>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006aca:	bf00      	nop

  }
  return error;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b0b      	cmp	r3, #11
 8006af4:	d10c      	bne.n	8006b10 <USBH_MSC_UnitIsReady+0x3a>
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	2134      	movs	r1, #52	; 0x34
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	3391      	adds	r3, #145	; 0x91
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	e001      	b.n	8006b14 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b0b      	cmp	r3, #11
 8006b42:	d10d      	bne.n	8006b60 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	2234      	movs	r2, #52	; 0x34
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
 8006b4c:	3390      	adds	r3, #144	; 0x90
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4413      	add	r3, r2
 8006b52:	2234      	movs	r2, #52	; 0x34
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f004 ff0a 	bl	800b970 <memcpy>
    return USBH_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b088      	sub	sp, #32
 8006b6e:	af02      	add	r7, sp, #8
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	460b      	mov	r3, r1
 8006b78:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00e      	beq.n	8006bae <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006b96:	2b0b      	cmp	r3, #11
 8006b98:	d109      	bne.n	8006bae <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	2134      	movs	r1, #52	; 0x34
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3390      	adds	r3, #144	; 0x90
 8006ba8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d001      	beq.n	8006bb2 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e040      	b.n	8006c34 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2206      	movs	r2, #6
 8006bb6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	2134      	movs	r1, #52	; 0x34
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3390      	adds	r3, #144	; 0x90
 8006bc6:	2206      	movs	r2, #6
 8006bc8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006bd4:	7af9      	ldrb	r1, [r7, #11]
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fd7b 	bl	80076da <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bea:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006bec:	e016      	b.n	8006c1c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	f242 7110 	movw	r1, #10000	; 0x2710
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d805      	bhi.n	8006c12 <USBH_MSC_Read+0xa8>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2201      	movs	r2, #1
 8006c16:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e00b      	b.n	8006c34 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fe8e 	bl	8006942 <USBH_MSC_RdWrProcess>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d0e0      	beq.n	8006bee <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006c68:	2b0b      	cmp	r3, #11
 8006c6a:	d109      	bne.n	8006c80 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	2134      	movs	r1, #52	; 0x34
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	3390      	adds	r3, #144	; 0x90
 8006c7a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d001      	beq.n	8006c84 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006c80:	2302      	movs	r3, #2
 8006c82:	e040      	b.n	8006d06 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2207      	movs	r2, #7
 8006c88:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	2134      	movs	r1, #52	; 0x34
 8006c90:	fb01 f303 	mul.w	r3, r1, r3
 8006c94:	4413      	add	r3, r2
 8006c96:	3390      	adds	r3, #144	; 0x90
 8006c98:	2207      	movs	r2, #7
 8006c9a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006ca6:	7af9      	ldrb	r1, [r7, #11]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fca7 	bl	8007604 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006cbc:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006cbe:	e016      	b.n	8006cee <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad2      	subs	r2, r2, r3
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f242 7110 	movw	r1, #10000	; 0x2710
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d805      	bhi.n	8006ce4 <USBH_MSC_Write+0xa8>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006cea:	2302      	movs	r3, #2
 8006cec:	e00b      	b.n	8006d06 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff fe25 	bl	8006942 <USBH_MSC_RdWrProcess>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d0e0      	beq.n	8006cc0 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2201      	movs	r2, #1
 8006d02:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2221      	movs	r2, #33	; 0x21
 8006d1a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	22ff      	movs	r2, #255	; 0xff
 8006d20:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006d34:	2200      	movs	r2, #0
 8006d36:	2100      	movs	r1, #0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fdae 	bl	800889a <USBH_CtlReq>
 8006d3e:	4603      	mov	r3, r0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	22a1      	movs	r2, #161	; 0xa1
 8006d56:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	22fe      	movs	r2, #254	; 0xfe
 8006d5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006d70:	2201      	movs	r2, #1
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fd90 	bl	800889a <USBH_CtlReq>
 8006d7a:	4603      	mov	r3, r0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <USBH_MSC_BOT_Init+0x3c>)
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <USBH_MSC_BOT_Init+0x40>)
 8006da0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	43425355 	.word	0x43425355
 8006dc4:	20304050 	.word	0x20304050

08006dc8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	2b0a      	cmp	r3, #10
 8006dfc:	f200 81a1 	bhi.w	8007142 <USBH_MSC_BOT_Process+0x37a>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <USBH_MSC_BOT_Process+0x40>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e5f 	.word	0x08006e5f
 8006e10:	08006ec9 	.word	0x08006ec9
 8006e14:	08006ee7 	.word	0x08006ee7
 8006e18:	08006f6b 	.word	0x08006f6b
 8006e1c:	08006f8f 	.word	0x08006f8f
 8006e20:	08007029 	.word	0x08007029
 8006e24:	08007045 	.word	0x08007045
 8006e28:	08007097 	.word	0x08007097
 8006e2c:	080070c7 	.word	0x080070c7
 8006e30:	08007129 	.word	0x08007129
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	795a      	ldrb	r2, [r3, #5]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4613      	mov	r3, r2
 8006e54:	221f      	movs	r2, #31
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 ff2f 	bl	8008cba <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006e5c:	e180      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	795b      	ldrb	r3, [r3, #5]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f004 fc6b 	bl	800b740 <USBH_LL_GetURBState>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006e6e:	7d3b      	ldrb	r3, [r7, #20]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d118      	bne.n	8006ea6 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00f      	beq.n	8006e9c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006e82:	b25b      	sxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	da04      	bge.n	8006e92 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e90:	e159      	b.n	8007146 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2205      	movs	r2, #5
 8006e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e9a:	e154      	b.n	8007146 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ea4:	e14f      	b.n	8007146 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ea6:	7d3b      	ldrb	r3, [r7, #20]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d104      	bne.n	8006eb6 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006eb4:	e147      	b.n	8007146 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006eb6:	7d3b      	ldrb	r3, [r7, #20]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	f040 8144 	bne.w	8007146 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	220a      	movs	r2, #10
 8006ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ec6:	e13e      	b.n	8007146 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	895a      	ldrh	r2, [r3, #10]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	791b      	ldrb	r3, [r3, #4]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 ff14 	bl	8008d04 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006ee4:	e13c      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f004 fc27 	bl	800b740 <USBH_LL_GetURBState>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006ef6:	7d3b      	ldrb	r3, [r7, #20]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d12d      	bne.n	8006f58 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	8952      	ldrh	r2, [r2, #10]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d910      	bls.n	8006f2a <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	8952      	ldrh	r2, [r2, #10]
 8006f12:	441a      	add	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	8952      	ldrh	r2, [r2, #10]
 8006f22:	1a9a      	subs	r2, r3, r2
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f28:	e002      	b.n	8006f30 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	895a      	ldrh	r2, [r3, #10]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	791b      	ldrb	r3, [r3, #4]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fedc 	bl	8008d04 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006f4c:	e0fd      	b.n	800714a <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2207      	movs	r2, #7
 8006f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f56:	e0f8      	b.n	800714a <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8006f58:	7d3b      	ldrb	r3, [r7, #20]
 8006f5a:	2b05      	cmp	r3, #5
 8006f5c:	f040 80f5 	bne.w	800714a <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2209      	movs	r2, #9
 8006f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f68:	e0ef      	b.n	800714a <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	891a      	ldrh	r2, [r3, #8]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	7958      	ldrb	r0, [r3, #5]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fe9b 	bl	8008cba <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2206      	movs	r2, #6
 8006f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f8c:	e0e8      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	795b      	ldrb	r3, [r3, #5]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f004 fbd3 	bl	800b740 <USBH_LL_GetURBState>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006f9e:	7d3b      	ldrb	r3, [r7, #20]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d130      	bne.n	8007006 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	8912      	ldrh	r2, [r2, #8]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d910      	bls.n	8006fd2 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	8912      	ldrh	r2, [r2, #8]
 8006fba:	441a      	add	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	8912      	ldrh	r2, [r2, #8]
 8006fca:	1a9a      	subs	r2, r3, r2
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fd0:	e002      	b.n	8006fd8 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00d      	beq.n	8006ffc <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	891a      	ldrh	r2, [r3, #8]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	7958      	ldrb	r0, [r3, #5]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fe60 	bl	8008cba <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006ffa:	e0a8      	b.n	800714e <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2207      	movs	r2, #7
 8007000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007004:	e0a3      	b.n	800714e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007006:	7d3b      	ldrb	r3, [r7, #20]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d104      	bne.n	8007016 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2205      	movs	r2, #5
 8007010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007014:	e09b      	b.n	800714e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8007016:	7d3b      	ldrb	r3, [r7, #20]
 8007018:	2b05      	cmp	r3, #5
 800701a:	f040 8098 	bne.w	800714e <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	220a      	movs	r2, #10
 8007022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007026:	e092      	b.n	800714e <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	791b      	ldrb	r3, [r3, #4]
 8007032:	220d      	movs	r2, #13
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fe65 	bl	8008d04 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2208      	movs	r2, #8
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007042:	e08d      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	791b      	ldrb	r3, [r3, #4]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f004 fb78 	bl	800b740 <USBH_LL_GetURBState>
 8007050:	4603      	mov	r3, r0
 8007052:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007054:	7d3b      	ldrb	r3, [r7, #20]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d115      	bne.n	8007086 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f8aa 	bl	80071c4 <USBH_MSC_DecodeCSW>
 8007070:	4603      	mov	r3, r0
 8007072:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007074:	7d7b      	ldrb	r3, [r7, #21]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800707e:	e068      	b.n	8007152 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	75fb      	strb	r3, [r7, #23]
      break;
 8007084:	e065      	b.n	8007152 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8007086:	7d3b      	ldrb	r3, [r7, #20]
 8007088:	2b05      	cmp	r3, #5
 800708a:	d162      	bne.n	8007152 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2209      	movs	r2, #9
 8007090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007094:	e05d      	b.n	8007152 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	2200      	movs	r2, #0
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f865 	bl	800716c <USBH_MSC_BOT_Abort>
 80070a2:	4603      	mov	r3, r0
 80070a4:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80070a6:	7dbb      	ldrb	r3, [r7, #22]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2207      	movs	r2, #7
 80070b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80070b4:	e04f      	b.n	8007156 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 80070b6:	7dbb      	ldrb	r3, [r7, #22]
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d14c      	bne.n	8007156 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	220b      	movs	r2, #11
 80070c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80070c4:	e047      	b.n	8007156 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	2201      	movs	r2, #1
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f84d 	bl	800716c <USBH_MSC_BOT_Abort>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80070d6:	7dbb      	ldrb	r3, [r7, #22]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11d      	bne.n	8007118 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	795b      	ldrb	r3, [r3, #5]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f004 fb89 	bl	800b7fa <USBH_LL_GetToggle>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	7959      	ldrb	r1, [r3, #5]
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	f1c3 0301 	rsb	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f004 fb4a 	bl	800b794 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	791b      	ldrb	r3, [r3, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f004 fb43 	bl	800b794 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2209      	movs	r2, #9
 8007112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007116:	e020      	b.n	800715a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8007118:	7dbb      	ldrb	r3, [r7, #22]
 800711a:	2b04      	cmp	r3, #4
 800711c:	d11d      	bne.n	800715a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	220b      	movs	r2, #11
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007126:	e018      	b.n	800715a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fdf0 	bl	8006d0e <USBH_MSC_BOT_REQ_Reset>
 800712e:	4603      	mov	r3, r0
 8007130:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d112      	bne.n	800715e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007140:	e00d      	b.n	800715e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8007142:	bf00      	nop
 8007144:	e00c      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 8007146:	bf00      	nop
 8007148:	e00a      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 800714a:	bf00      	nop
 800714c:	e008      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 800714e:	bf00      	nop
 8007150:	e006      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 8007152:	bf00      	nop
 8007154:	e004      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <USBH_MSC_BOT_Process+0x398>
      break;
 800715e:	bf00      	nop
  }
  return status;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
 8007178:	4613      	mov	r3, r2
 800717a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800717c:	2302      	movs	r3, #2
 800717e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800718a:	78bb      	ldrb	r3, [r7, #2]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <USBH_MSC_BOT_Abort+0x2a>
 8007190:	2b01      	cmp	r3, #1
 8007192:	d009      	beq.n	80071a8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007194:	e011      	b.n	80071ba <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	79db      	ldrb	r3, [r3, #7]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f99c 	bl	80084da <USBH_ClrFeature>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
      break;
 80071a6:	e008      	b.n	80071ba <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	799b      	ldrb	r3, [r3, #6]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f993 	bl	80084da <USBH_ClrFeature>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	bf00      	nop
  }
  return status;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80071d6:	2301      	movs	r3, #1
 80071d8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	791b      	ldrb	r3, [r3, #4]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f004 fa1b 	bl	800b61c <USBH_LL_GetLastXferSize>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b0d      	cmp	r3, #13
 80071ea:	d002      	beq.n	80071f2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80071ec:	2302      	movs	r3, #2
 80071ee:	73fb      	strb	r3, [r7, #15]
 80071f0:	e024      	b.n	800723c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f6:	4a14      	ldr	r2, [pc, #80]	; (8007248 <USBH_MSC_DecodeCSW+0x84>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d11d      	bne.n	8007238 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007204:	429a      	cmp	r2, r3
 8007206:	d119      	bne.n	800723c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e011      	b.n	800723c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800721e:	2b01      	cmp	r3, #1
 8007220:	d102      	bne.n	8007228 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	e009      	b.n	800723c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800722e:	2b02      	cmp	r3, #2
 8007230:	d104      	bne.n	800723c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
 8007236:	e001      	b.n	800723c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007238:	2302      	movs	r3, #2
 800723a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	53425355 	.word	0x53425355

0800724c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007258:	2302      	movs	r3, #2
 800725a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800726c:	2b01      	cmp	r3, #1
 800726e:	d002      	beq.n	8007276 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007270:	2b02      	cmp	r3, #2
 8007272:	d021      	beq.n	80072b8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007274:	e028      	b.n	80072c8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	220a      	movs	r2, #10
 8007288:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	3363      	adds	r3, #99	; 0x63
 8007290:	2210      	movs	r2, #16
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f004 fb76 	bl	800b986 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80072b2:	2301      	movs	r3, #1
 80072b4:	73fb      	strb	r3, [r7, #15]
      break;
 80072b6:	e007      	b.n	80072c8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fd83 	bl	8006dc8 <USBH_MSC_BOT_Process>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
      break;
 80072c6:	bf00      	nop
  }

  return error;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	460b      	mov	r3, r1
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80072e0:	2301      	movs	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d002      	beq.n	80072fe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d027      	beq.n	800734c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80072fc:	e05f      	b.n	80073be <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	2208      	movs	r2, #8
 8007302:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2280      	movs	r2, #128	; 0x80
 8007308:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	220a      	movs	r2, #10
 8007310:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3363      	adds	r3, #99	; 0x63
 8007318:	2210      	movs	r2, #16
 800731a:	2100      	movs	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f004 fb32 	bl	800b986 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2225      	movs	r2, #37	; 0x25
 8007326:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2202      	movs	r2, #2
 8007336:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f103 0210 	add.w	r2, r3, #16
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
      break;
 800734a:	e038      	b.n	80073be <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	4619      	mov	r1, r3
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fd39 	bl	8006dc8 <USBH_MSC_BOT_Process>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d12d      	bne.n	80073bc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007366:	3303      	adds	r3, #3
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007372:	3302      	adds	r3, #2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007380:	3301      	adds	r3, #1
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007386:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	061b      	lsls	r3, r3, #24
 8007392:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800739e:	3307      	adds	r3, #7
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073aa:	3306      	adds	r3, #6
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	809a      	strh	r2, [r3, #4]
      break;
 80073bc:	bf00      	nop
  }

  return error;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	460b      	mov	r3, r1
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80073d6:	2302      	movs	r3, #2
 80073d8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d002      	beq.n	80073f4 <USBH_MSC_SCSI_Inquiry+0x2c>
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d03d      	beq.n	800746e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80073f2:	e089      	b.n	8007508 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2224      	movs	r2, #36	; 0x24
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2280      	movs	r2, #128	; 0x80
 80073fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	220a      	movs	r2, #10
 8007406:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3363      	adds	r3, #99	; 0x63
 800740e:	220a      	movs	r2, #10
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f004 fab7 	bl	800b986 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2212      	movs	r2, #18
 800741c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	015b      	lsls	r3, r3, #5
 8007424:	b2da      	uxtb	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2224      	movs	r2, #36	; 0x24
 8007440:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f103 0210 	add.w	r2, r3, #16
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
      break;
 800746c:	e04c      	b.n	8007508 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	4619      	mov	r1, r3
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fca8 	bl	8006dc8 <USBH_MSC_BOT_Process>
 8007478:	4603      	mov	r3, r0
 800747a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d141      	bne.n	8007506 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007482:	2222      	movs	r2, #34	; 0x22
 8007484:	2100      	movs	r1, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f004 fa7d 	bl	800b986 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	095b      	lsrs	r3, r3, #5
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b4:	3301      	adds	r3, #1
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da03      	bge.n	80074c6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	709a      	strb	r2, [r3, #2]
 80074c4:	e002      	b.n	80074cc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1cd8      	adds	r0, r3, #3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d6:	3308      	adds	r3, #8
 80074d8:	2208      	movs	r2, #8
 80074da:	4619      	mov	r1, r3
 80074dc:	f004 fa48 	bl	800b970 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f103 000c 	add.w	r0, r3, #12
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ec:	3310      	adds	r3, #16
 80074ee:	2210      	movs	r2, #16
 80074f0:	4619      	mov	r1, r3
 80074f2:	f004 fa3d 	bl	800b970 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	331d      	adds	r3, #29
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007500:	3220      	adds	r2, #32
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	601a      	str	r2, [r3, #0]
      break;
 8007506:	bf00      	nop
  }

  return error;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	460b      	mov	r3, r1
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007520:	2302      	movs	r3, #2
 8007522:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007534:	2b01      	cmp	r3, #1
 8007536:	d002      	beq.n	800753e <USBH_MSC_SCSI_RequestSense+0x2c>
 8007538:	2b02      	cmp	r3, #2
 800753a:	d03d      	beq.n	80075b8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800753c:	e05d      	b.n	80075fa <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	220e      	movs	r2, #14
 8007542:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2280      	movs	r2, #128	; 0x80
 8007548:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	220a      	movs	r2, #10
 8007550:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	3363      	adds	r3, #99	; 0x63
 8007558:	2210      	movs	r2, #16
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f004 fa12 	bl	800b986 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2203      	movs	r2, #3
 8007566:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800756a:	7afb      	ldrb	r3, [r7, #11]
 800756c:	015b      	lsls	r3, r3, #5
 800756e:	b2da      	uxtb	r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	220e      	movs	r2, #14
 800758a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f103 0210 	add.w	r2, r3, #16
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
      break;
 80075b6:	e020      	b.n	80075fa <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fc03 	bl	8006dc8 <USBH_MSC_BOT_Process>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d115      	bne.n	80075f8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d2:	3302      	adds	r3, #2
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e6:	7b1a      	ldrb	r2, [r3, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f2:	7b5a      	ldrb	r2, [r3, #13]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	709a      	strb	r2, [r3, #2]
      break;
 80075f8:	bf00      	nop
  }

  return error;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	460b      	mov	r3, r1
 8007612:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007614:	2302      	movs	r3, #2
 8007616:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007628:	2b01      	cmp	r3, #1
 800762a:	d002      	beq.n	8007632 <USBH_MSC_SCSI_Write+0x2e>
 800762c:	2b02      	cmp	r3, #2
 800762e:	d047      	beq.n	80076c0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007630:	e04e      	b.n	80076d0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007638:	461a      	mov	r2, r3
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	fb03 f202 	mul.w	r2, r3, r2
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	220a      	movs	r2, #10
 8007650:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3363      	adds	r3, #99	; 0x63
 8007658:	2210      	movs	r2, #16
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f004 f992 	bl	800b986 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	222a      	movs	r2, #42	; 0x2a
 8007666:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800766a:	79fa      	ldrb	r2, [r7, #7]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007672:	79ba      	ldrb	r2, [r7, #6]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800767a:	797a      	ldrb	r2, [r7, #5]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800768c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007696:	f107 0320 	add.w	r3, r7, #32
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
      break;
 80076be:	e007      	b.n	80076d0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	4619      	mov	r1, r3
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff fb7f 	bl	8006dc8 <USBH_MSC_BOT_Process>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75fb      	strb	r3, [r7, #23]
      break;
 80076ce:	bf00      	nop
  }

  return error;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	460b      	mov	r3, r1
 80076e8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80076ea:	2302      	movs	r3, #2
 80076ec:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d002      	beq.n	8007708 <USBH_MSC_SCSI_Read+0x2e>
 8007702:	2b02      	cmp	r3, #2
 8007704:	d047      	beq.n	8007796 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007706:	e04e      	b.n	80077a6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800770e:	461a      	mov	r2, r3
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	fb03 f202 	mul.w	r2, r3, r2
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2280      	movs	r2, #128	; 0x80
 800771e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	220a      	movs	r2, #10
 8007726:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3363      	adds	r3, #99	; 0x63
 800772e:	2210      	movs	r2, #16
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f004 f927 	bl	800b986 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2228      	movs	r2, #40	; 0x28
 800773c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007740:	79fa      	ldrb	r2, [r7, #7]
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007748:	79ba      	ldrb	r2, [r7, #6]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007750:	797a      	ldrb	r2, [r7, #5]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007762:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800776c:	f107 0320 	add.w	r3, r7, #32
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
      break;
 8007794:	e007      	b.n	80077a6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007796:	7afb      	ldrb	r3, [r7, #11]
 8007798:	4619      	mov	r1, r3
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fb14 	bl	8006dc8 <USBH_MSC_BOT_Process>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]
      break;
 80077a4:	bf00      	nop
  }

  return error;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80077c4:	2302      	movs	r3, #2
 80077c6:	e029      	b.n	800781c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	79fa      	ldrb	r2, [r7, #7]
 80077cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f81f 	bl	8007824 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f003 fe4f 	bl	800b4b8 <USBH_LL_Init>

  return USBH_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e009      	b.n	800784a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	33e0      	adds	r3, #224	; 0xe0
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	2200      	movs	r2, #0
 8007842:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b0e      	cmp	r3, #14
 800784e:	d9f2      	bls.n	8007836 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	e009      	b.n	800786a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007870:	d3f1      	bcc.n	8007856 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2240      	movs	r2, #64	; 0x40
 8007896:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d016      	beq.n	800790e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10e      	bne.n	8007908 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078f0:	1c59      	adds	r1, r3, #1
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	33de      	adds	r3, #222	; 0xde
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	73fb      	strb	r3, [r7, #15]
 8007906:	e004      	b.n	8007912 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007908:	2302      	movs	r3, #2
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e001      	b.n	8007912 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800790e:	2302      	movs	r3, #2
 8007910:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	429a      	cmp	r2, r3
 800793a:	d204      	bcs.n	8007946 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007944:	e001      	b.n	800794a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007946:	2302      	movs	r3, #2
 8007948:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	461a      	mov	r2, r3
 8007966:	4603      	mov	r3, r0
 8007968:	70fb      	strb	r3, [r7, #3]
 800796a:	460b      	mov	r3, r1
 800796c:	70bb      	strb	r3, [r7, #2]
 800796e:	4613      	mov	r3, r2
 8007970:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007980:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007982:	e025      	b.n	80079d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	221a      	movs	r2, #26
 8007988:	fb02 f303 	mul.w	r3, r2, r3
 800798c:	3308      	adds	r3, #8
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	3302      	adds	r3, #2
 8007994:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	795b      	ldrb	r3, [r3, #5]
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	429a      	cmp	r2, r3
 800799e:	d002      	beq.n	80079a6 <USBH_FindInterface+0x4e>
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	2bff      	cmp	r3, #255	; 0xff
 80079a4:	d111      	bne.n	80079ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079aa:	78ba      	ldrb	r2, [r7, #2]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d002      	beq.n	80079b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079b0:	78bb      	ldrb	r3, [r7, #2]
 80079b2:	2bff      	cmp	r3, #255	; 0xff
 80079b4:	d109      	bne.n	80079ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079ba:	787a      	ldrb	r2, [r7, #1]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d002      	beq.n	80079c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079c0:	787b      	ldrb	r3, [r7, #1]
 80079c2:	2bff      	cmp	r3, #255	; 0xff
 80079c4:	d101      	bne.n	80079ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	e006      	b.n	80079d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	3301      	adds	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d9d6      	bls.n	8007984 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079d6:	23ff      	movs	r3, #255	; 0xff
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f003 fd9f 	bl	800b530 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80079f2:	2101      	movs	r1, #1
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f003 feb6 	bl	800b766 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af04      	add	r7, sp, #16
 8007a0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d102      	bne.n	8007a26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2203      	movs	r2, #3
 8007a24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b0b      	cmp	r3, #11
 8007a2e:	f200 81b3 	bhi.w	8007d98 <USBH_Process+0x394>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <USBH_Process+0x34>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a69 	.word	0x08007a69
 8007a3c:	08007a9b 	.word	0x08007a9b
 8007a40:	08007b03 	.word	0x08007b03
 8007a44:	08007d33 	.word	0x08007d33
 8007a48:	08007d99 	.word	0x08007d99
 8007a4c:	08007ba7 	.word	0x08007ba7
 8007a50:	08007cd9 	.word	0x08007cd9
 8007a54:	08007bdd 	.word	0x08007bdd
 8007a58:	08007bfd 	.word	0x08007bfd
 8007a5c:	08007c1d 	.word	0x08007c1d
 8007a60:	08007c4b 	.word	0x08007c4b
 8007a64:	08007d1b 	.word	0x08007d1b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 8193 	beq.w	8007d9c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a7c:	20c8      	movs	r0, #200	; 0xc8
 8007a7e:	f003 feef 	bl	800b860 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f003 fdaf 	bl	800b5e6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a98:	e180      	b.n	8007d9c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d107      	bne.n	8007ab4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ab2:	e182      	b.n	8007dba <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007abe:	d914      	bls.n	8007aea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d903      	bls.n	8007ae2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	220d      	movs	r2, #13
 8007ade:	701a      	strb	r2, [r3, #0]
      break;
 8007ae0:	e16b      	b.n	8007dba <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
      break;
 8007ae8:	e167      	b.n	8007dba <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007af0:	f103 020a 	add.w	r2, r3, #10
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007afa:	200a      	movs	r0, #10
 8007afc:	f003 feb0 	bl	800b860 <USBH_Delay>
      break;
 8007b00:	e15b      	b.n	8007dba <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b12:	2104      	movs	r1, #4
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b18:	2064      	movs	r0, #100	; 0x64
 8007b1a:	f003 fea1 	bl	800b860 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f003 fd3c 	bl	800b59c <USBH_LL_GetSpeed>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2205      	movs	r2, #5
 8007b32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b34:	2100      	movs	r1, #0
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f931 	bl	8008d9e <USBH_AllocPipe>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b44:	2180      	movs	r1, #128	; 0x80
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 f929 	bl	8008d9e <USBH_AllocPipe>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7919      	ldrb	r1, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b68:	b292      	uxth	r2, r2
 8007b6a:	9202      	str	r2, [sp, #8]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	9201      	str	r2, [sp, #4]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4603      	mov	r3, r0
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 f8e2 	bl	8008d40 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7959      	ldrb	r1, [r3, #5]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b90:	b292      	uxth	r2, r2
 8007b92:	9202      	str	r2, [sp, #8]
 8007b94:	2200      	movs	r2, #0
 8007b96:	9201      	str	r2, [sp, #4]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 f8ce 	bl	8008d40 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ba4:	e109      	b.n	8007dba <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f90c 	bl	8007dc4 <USBH_HandleEnum>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 80f3 	bne.w	8007da0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d103      	bne.n	8007bd4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2208      	movs	r2, #8
 8007bd0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007bd2:	e0e5      	b.n	8007da0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2207      	movs	r2, #7
 8007bd8:	701a      	strb	r2, [r3, #0]
      break;
 8007bda:	e0e1      	b.n	8007da0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 80de 	beq.w	8007da4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bee:	2101      	movs	r1, #1
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bfa:	e0d3      	b.n	8007da4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc20 	bl	800844c <USBH_SetCfg>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f040 80ca 	bne.w	8007da8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2209      	movs	r2, #9
 8007c18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c1a:	e0c5      	b.n	8007da8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fc30 	bl	8008492 <USBH_SetFeature>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 80b9 	bne.w	8007dac <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c40:	e0b4      	b.n	8007dac <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	220a      	movs	r2, #10
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	e0b0      	b.n	8007dac <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 80ad 	beq.w	8007db0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	e016      	b.n	8007c92 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c64:	7bfa      	ldrb	r2, [r7, #15]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	32de      	adds	r2, #222	; 0xde
 8007c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6e:	791a      	ldrb	r2, [r3, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d108      	bne.n	8007c8c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007c7a:	7bfa      	ldrb	r2, [r7, #15]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	32de      	adds	r2, #222	; 0xde
 8007c80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007c8a:	e005      	b.n	8007c98 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0e5      	beq.n	8007c64 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d016      	beq.n	8007cd0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d109      	bne.n	8007cc8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2206      	movs	r2, #6
 8007cb8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cc0:	2103      	movs	r1, #3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cc6:	e073      	b.n	8007db0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	220d      	movs	r2, #13
 8007ccc:	701a      	strb	r2, [r3, #0]
      break;
 8007cce:	e06f      	b.n	8007db0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	220d      	movs	r2, #13
 8007cd4:	701a      	strb	r2, [r3, #0]
      break;
 8007cd6:	e06b      	b.n	8007db0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d017      	beq.n	8007d12 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	220b      	movs	r2, #11
 8007cfe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d00:	e058      	b.n	8007db4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d154      	bne.n	8007db4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	220d      	movs	r2, #13
 8007d0e:	701a      	strb	r2, [r3, #0]
      break;
 8007d10:	e050      	b.n	8007db4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	220d      	movs	r2, #13
 8007d16:	701a      	strb	r2, [r3, #0]
      break;
 8007d18:	e04c      	b.n	8007db4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d049      	beq.n	8007db8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4798      	blx	r3
      }
      break;
 8007d30:	e042      	b.n	8007db8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff fd72 	bl	8007824 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d6e:	2105      	movs	r1, #5
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d107      	bne.n	8007d90 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fe2b 	bl	80079e4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d8e:	e014      	b.n	8007dba <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f003 fbcd 	bl	800b530 <USBH_LL_Start>
      break;
 8007d96:	e010      	b.n	8007dba <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007d98:	bf00      	nop
 8007d9a:	e00e      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007d9c:	bf00      	nop
 8007d9e:	e00c      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007da0:	bf00      	nop
 8007da2:	e00a      	b.n	8007dba <USBH_Process+0x3b6>
    break;
 8007da4:	bf00      	nop
 8007da6:	e008      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007da8:	bf00      	nop
 8007daa:	e006      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007dac:	bf00      	nop
 8007dae:	e004      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007db0:	bf00      	nop
 8007db2:	e002      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007db4:	bf00      	nop
 8007db6:	e000      	b.n	8007dba <USBH_Process+0x3b6>
      break;
 8007db8:	bf00      	nop
  }
  return USBH_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af04      	add	r7, sp, #16
 8007dca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	785b      	ldrb	r3, [r3, #1]
 8007dd8:	2b07      	cmp	r3, #7
 8007dda:	f200 81c1 	bhi.w	8008160 <USBH_HandleEnum+0x39c>
 8007dde:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <USBH_HandleEnum+0x20>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007e05 	.word	0x08007e05
 8007de8:	08007ec3 	.word	0x08007ec3
 8007dec:	08007f2d 	.word	0x08007f2d
 8007df0:	08007fbb 	.word	0x08007fbb
 8007df4:	08008025 	.word	0x08008025
 8007df8:	08008095 	.word	0x08008095
 8007dfc:	080080db 	.word	0x080080db
 8007e00:	08008121 	.word	0x08008121
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e04:	2108      	movs	r1, #8
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa50 	bl	80082ac <USBH_Get_DevDesc>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d130      	bne.n	8007e78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7919      	ldrb	r1, [r3, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e3a:	b292      	uxth	r2, r2
 8007e3c:	9202      	str	r2, [sp, #8]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	9201      	str	r2, [sp, #4]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	4603      	mov	r3, r0
 8007e46:	2280      	movs	r2, #128	; 0x80
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff79 	bl	8008d40 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7959      	ldrb	r1, [r3, #5]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e62:	b292      	uxth	r2, r2
 8007e64:	9202      	str	r2, [sp, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	9201      	str	r2, [sp, #4]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2200      	movs	r2, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 ff65 	bl	8008d40 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e76:	e175      	b.n	8008164 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	f040 8172 	bne.w	8008164 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e86:	3301      	adds	r3, #1
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d903      	bls.n	8007ea2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	220d      	movs	r2, #13
 8007e9e:	701a      	strb	r2, [r3, #0]
      break;
 8007ea0:	e160      	b.n	8008164 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	795b      	ldrb	r3, [r3, #5]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 ff99 	bl	8008de0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 ff93 	bl	8008de0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
      break;
 8007ec0:	e150      	b.n	8008164 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ec2:	2112      	movs	r1, #18
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9f1 	bl	80082ac <USBH_Get_DevDesc>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d103      	bne.n	8007edc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007eda:	e145      	b.n	8008168 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	f040 8142 	bne.w	8008168 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eea:	3301      	adds	r3, #1
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d903      	bls.n	8007f06 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220d      	movs	r2, #13
 8007f02:	701a      	strb	r2, [r3, #0]
      break;
 8007f04:	e130      	b.n	8008168 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	795b      	ldrb	r3, [r3, #5]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 ff67 	bl	8008de0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 ff61 	bl	8008de0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
      break;
 8007f2a:	e11d      	b.n	8008168 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa68 	bl	8008404 <USBH_SetAddress>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d132      	bne.n	8007fa4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007f3e:	2002      	movs	r0, #2
 8007f40:	f003 fc8e 	bl	800b860 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7919      	ldrb	r1, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f66:	b292      	uxth	r2, r2
 8007f68:	9202      	str	r2, [sp, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	9201      	str	r2, [sp, #4]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	4603      	mov	r3, r0
 8007f72:	2280      	movs	r2, #128	; 0x80
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fee3 	bl	8008d40 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7959      	ldrb	r1, [r3, #5]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	9202      	str	r2, [sp, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	9201      	str	r2, [sp, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fecf 	bl	8008d40 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fa2:	e0e3      	b.n	800816c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	f040 80e0 	bne.w	800816c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220d      	movs	r2, #13
 8007fb0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	705a      	strb	r2, [r3, #1]
      break;
 8007fb8:	e0d8      	b.n	800816c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007fba:	2109      	movs	r1, #9
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f99d 	bl	80082fc <USBH_Get_CfgDesc>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fd2:	e0cd      	b.n	8008170 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	f040 80ca 	bne.w	8008170 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d903      	bls.n	8007ffe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	220d      	movs	r2, #13
 8007ffa:	701a      	strb	r2, [r3, #0]
      break;
 8007ffc:	e0b8      	b.n	8008170 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	795b      	ldrb	r3, [r3, #5]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 feeb 	bl	8008de0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	791b      	ldrb	r3, [r3, #4]
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fee5 	bl	8008de0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
      break;
 8008022:	e0a5      	b.n	8008170 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f965 	bl	80082fc <USBH_Get_CfgDesc>
 8008032:	4603      	mov	r3, r0
 8008034:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d103      	bne.n	8008044 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2205      	movs	r2, #5
 8008040:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008042:	e097      	b.n	8008174 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b03      	cmp	r3, #3
 8008048:	f040 8094 	bne.w	8008174 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008052:	3301      	adds	r3, #1
 8008054:	b2da      	uxtb	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008062:	2b03      	cmp	r3, #3
 8008064:	d903      	bls.n	800806e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220d      	movs	r2, #13
 800806a:	701a      	strb	r2, [r3, #0]
      break;
 800806c:	e082      	b.n	8008174 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	795b      	ldrb	r3, [r3, #5]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 feb3 	bl	8008de0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fead 	bl	8008de0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
      break;
 8008092:	e06f      	b.n	8008174 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800809a:	2b00      	cmp	r3, #0
 800809c:	d019      	beq.n	80080d2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080aa:	23ff      	movs	r3, #255	; 0xff
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f949 	bl	8008344 <USBH_Get_StringDesc>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2206      	movs	r2, #6
 80080c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80080c2:	e059      	b.n	8008178 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d156      	bne.n	8008178 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2206      	movs	r2, #6
 80080ce:	705a      	strb	r2, [r3, #1]
      break;
 80080d0:	e052      	b.n	8008178 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2206      	movs	r2, #6
 80080d6:	705a      	strb	r2, [r3, #1]
      break;
 80080d8:	e04e      	b.n	8008178 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d019      	beq.n	8008118 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80080f0:	23ff      	movs	r3, #255	; 0xff
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f926 	bl	8008344 <USBH_Get_StringDesc>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2207      	movs	r2, #7
 8008106:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008108:	e038      	b.n	800817c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b03      	cmp	r3, #3
 800810e:	d135      	bne.n	800817c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2207      	movs	r2, #7
 8008114:	705a      	strb	r2, [r3, #1]
      break;
 8008116:	e031      	b.n	800817c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2207      	movs	r2, #7
 800811c:	705a      	strb	r2, [r3, #1]
      break;
 800811e:	e02d      	b.n	800817c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008126:	2b00      	cmp	r3, #0
 8008128:	d017      	beq.n	800815a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008136:	23ff      	movs	r3, #255	; 0xff
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f903 	bl	8008344 <USBH_Get_StringDesc>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800814c:	e018      	b.n	8008180 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d115      	bne.n	8008180 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
      break;
 8008158:	e012      	b.n	8008180 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
      break;
 800815e:	e00f      	b.n	8008180 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008160:	bf00      	nop
 8008162:	e00e      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 8008164:	bf00      	nop
 8008166:	e00c      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 8008168:	bf00      	nop
 800816a:	e00a      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 800816c:	bf00      	nop
 800816e:	e008      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 8008170:	bf00      	nop
 8008172:	e006      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 8008174:	bf00      	nop
 8008176:	e004      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 8008178:	bf00      	nop
 800817a:	e002      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 800817c:	bf00      	nop
 800817e:	e000      	b.n	8008182 <USBH_HandleEnum+0x3be>
      break;
 8008180:	bf00      	nop
  }
  return Status;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f804 	bl	80081ce <USBH_HandleSof>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b0b      	cmp	r3, #11
 80081de:	d10a      	bne.n	80081f6 <USBH_HandleSof+0x28>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
  }
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800820e:	bf00      	nop
}
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800822a:	bf00      	nop
}
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f003 f96e 	bl	800b566 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fda5 	bl	8008de0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	795b      	ldrb	r3, [r3, #5]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fd9f 	bl	8008de0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ca:	2100      	movs	r1, #0
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f864 	bl	800839a <USBH_GetDescriptor>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f203 3026 	addw	r0, r3, #806	; 0x326
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	b292      	uxth	r2, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	f000 f918 	bl	8008522 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af02      	add	r7, sp, #8
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	331c      	adds	r3, #28
 800830c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800830e:	887b      	ldrh	r3, [r7, #2]
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008318:	2100      	movs	r1, #0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f83d 	bl	800839a <USBH_GetDescriptor>
 8008320:	4603      	mov	r3, r0
 8008322:	72fb      	strb	r3, [r7, #11]
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d107      	bne.n	800833a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008330:	887a      	ldrh	r2, [r7, #2]
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f964 	bl	8008602 <USBH_ParseCfgDesc>
  }

  return status;
 800833a:	7afb      	ldrb	r3, [r7, #11]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	607a      	str	r2, [r7, #4]
 800834e:	461a      	mov	r2, r3
 8008350:	460b      	mov	r3, r1
 8008352:	72fb      	strb	r3, [r7, #11]
 8008354:	4613      	mov	r3, r2
 8008356:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008360:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008368:	893b      	ldrh	r3, [r7, #8]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	460b      	mov	r3, r1
 800836e:	2100      	movs	r1, #0
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f812 	bl	800839a <USBH_GetDescriptor>
 8008376:	4603      	mov	r3, r0
 8008378:	75fb      	strb	r3, [r7, #23]
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d107      	bne.n	8008390 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008386:	893a      	ldrh	r2, [r7, #8]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fa37 	bl	80087fe <USBH_ParseStringDesc>
  }

  return status;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	607b      	str	r3, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	72fb      	strb	r3, [r7, #11]
 80083a8:	4613      	mov	r3, r2
 80083aa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	789b      	ldrb	r3, [r3, #2]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d11c      	bne.n	80083ee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2206      	movs	r2, #6
 80083c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	893a      	ldrh	r2, [r7, #8]
 80083ca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80083cc:	893b      	ldrh	r3, [r7, #8]
 80083ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d6:	d104      	bne.n	80083e2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f240 4209 	movw	r2, #1033	; 0x409
 80083de:	829a      	strh	r2, [r3, #20]
 80083e0:	e002      	b.n	80083e8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8b3a      	ldrh	r2, [r7, #24]
 80083ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80083ee:	8b3b      	ldrh	r3, [r7, #24]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fa50 	bl	800889a <USBH_CtlReq>
 80083fa:	4603      	mov	r3, r0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	789b      	ldrb	r3, [r3, #2]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10f      	bne.n	8008438 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2205      	movs	r2, #5
 8008422:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	b29a      	uxth	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008438:	2200      	movs	r2, #0
 800843a:	2100      	movs	r1, #0
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa2c 	bl	800889a <USBH_CtlReq>
 8008442:	4603      	mov	r3, r0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	789b      	ldrb	r3, [r3, #2]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10e      	bne.n	800847e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2209      	movs	r2, #9
 800846a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	887a      	ldrh	r2, [r7, #2]
 8008470:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800847e:	2200      	movs	r2, #0
 8008480:	2100      	movs	r1, #0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa09 	bl	800889a <USBH_CtlReq>
 8008488:	4603      	mov	r3, r0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	789b      	ldrb	r3, [r3, #2]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d10f      	bne.n	80084c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2203      	movs	r2, #3
 80084b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80084c6:	2200      	movs	r2, #0
 80084c8:	2100      	movs	r1, #0
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f9e5 	bl	800889a <USBH_CtlReq>
 80084d0:	4603      	mov	r3, r0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	789b      	ldrb	r3, [r3, #2]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d10f      	bne.n	800850e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2202      	movs	r2, #2
 80084f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f9c1 	bl	800889a <USBH_CtlReq>
 8008518:	4603      	mov	r3, r0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	4613      	mov	r3, r2
 800852e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	781a      	ldrb	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	785a      	ldrb	r2, [r3, #1]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3302      	adds	r3, #2
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	b29a      	uxth	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	3303      	adds	r3, #3
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	b29b      	uxth	r3, r3
 8008554:	4313      	orrs	r3, r2
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	791a      	ldrb	r2, [r3, #4]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	795a      	ldrb	r2, [r3, #5]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	799a      	ldrb	r2, [r3, #6]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	79da      	ldrb	r2, [r3, #7]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	2b08      	cmp	r3, #8
 8008580:	d939      	bls.n	80085f6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	3308      	adds	r3, #8
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	b29a      	uxth	r2, r3
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	3309      	adds	r3, #9
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	b29b      	uxth	r3, r3
 8008596:	4313      	orrs	r3, r2
 8008598:	b29a      	uxth	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	330a      	adds	r3, #10
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	330b      	adds	r3, #11
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	4313      	orrs	r3, r2
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	330c      	adds	r3, #12
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	330d      	adds	r3, #13
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	7b9a      	ldrb	r2, [r3, #14]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	7bda      	ldrb	r2, [r3, #15]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	7c1a      	ldrb	r2, [r3, #16]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	7c5a      	ldrb	r2, [r3, #17]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	745a      	strb	r2, [r3, #17]
  }
}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b08a      	sub	sp, #40	; 0x28
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	4613      	mov	r3, r2
 800860e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	785a      	ldrb	r2, [r3, #1]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3302      	adds	r3, #2
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b29a      	uxth	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3303      	adds	r3, #3
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	b29b      	uxth	r3, r3
 8008648:	4313      	orrs	r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	791a      	ldrb	r2, [r3, #4]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	795a      	ldrb	r2, [r3, #5]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	799a      	ldrb	r2, [r3, #6]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	79da      	ldrb	r2, [r3, #7]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	7a1a      	ldrb	r2, [r3, #8]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	2b09      	cmp	r3, #9
 800867c:	d95f      	bls.n	800873e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800867e:	2309      	movs	r3, #9
 8008680:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008682:	2300      	movs	r3, #0
 8008684:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008686:	e051      	b.n	800872c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008688:	f107 0316 	add.w	r3, r7, #22
 800868c:	4619      	mov	r1, r3
 800868e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008690:	f000 f8e8 	bl	8008864 <USBH_GetNextDesc>
 8008694:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	2b04      	cmp	r3, #4
 800869c:	d146      	bne.n	800872c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800869e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a2:	221a      	movs	r2, #26
 80086a4:	fb02 f303 	mul.w	r3, r2, r3
 80086a8:	3308      	adds	r3, #8
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	3302      	adds	r3, #2
 80086b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80086b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086b4:	69f8      	ldr	r0, [r7, #28]
 80086b6:	f000 f846 	bl	8008746 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086c4:	e022      	b.n	800870c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80086c6:	f107 0316 	add.w	r3, r7, #22
 80086ca:	4619      	mov	r1, r3
 80086cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086ce:	f000 f8c9 	bl	8008864 <USBH_GetNextDesc>
 80086d2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	2b05      	cmp	r3, #5
 80086da:	d117      	bne.n	800870c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80086dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80086e4:	3201      	adds	r2, #1
 80086e6:	00d2      	lsls	r2, r2, #3
 80086e8:	211a      	movs	r1, #26
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	4413      	add	r3, r2
 80086f0:	3308      	adds	r3, #8
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	3304      	adds	r3, #4
 80086f8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80086fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086fc:	69b8      	ldr	r0, [r7, #24]
 80086fe:	f000 f851 	bl	80087a4 <USBH_ParseEPDesc>
            ep_ix++;
 8008702:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008706:	3301      	adds	r3, #1
 8008708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	791b      	ldrb	r3, [r3, #4]
 8008710:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008714:	429a      	cmp	r2, r3
 8008716:	d204      	bcs.n	8008722 <USBH_ParseCfgDesc+0x120>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	885a      	ldrh	r2, [r3, #2]
 800871c:	8afb      	ldrh	r3, [r7, #22]
 800871e:	429a      	cmp	r2, r3
 8008720:	d8d1      	bhi.n	80086c6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008726:	3301      	adds	r3, #1
 8008728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800872c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008730:	2b01      	cmp	r3, #1
 8008732:	d804      	bhi.n	800873e <USBH_ParseCfgDesc+0x13c>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	885a      	ldrh	r2, [r3, #2]
 8008738:	8afb      	ldrh	r3, [r7, #22]
 800873a:	429a      	cmp	r2, r3
 800873c:	d8a4      	bhi.n	8008688 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800873e:	bf00      	nop
 8008740:	3728      	adds	r7, #40	; 0x28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	785a      	ldrb	r2, [r3, #1]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	789a      	ldrb	r2, [r3, #2]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	78da      	ldrb	r2, [r3, #3]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	791a      	ldrb	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	795a      	ldrb	r2, [r3, #5]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	799a      	ldrb	r2, [r3, #6]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	79da      	ldrb	r2, [r3, #7]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	7a1a      	ldrb	r2, [r3, #8]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	721a      	strb	r2, [r3, #8]
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781a      	ldrb	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	785a      	ldrb	r2, [r3, #1]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	789a      	ldrb	r2, [r3, #2]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	78da      	ldrb	r2, [r3, #3]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	3304      	adds	r3, #4
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	3305      	adds	r3, #5
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	4313      	orrs	r3, r2
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	799a      	ldrb	r2, [r3, #6]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	719a      	strb	r2, [r3, #6]
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	4613      	mov	r3, r2
 800880a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b03      	cmp	r3, #3
 8008814:	d120      	bne.n	8008858 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	1e9a      	subs	r2, r3, #2
 800881c:	88fb      	ldrh	r3, [r7, #6]
 800881e:	4293      	cmp	r3, r2
 8008820:	bf28      	it	cs
 8008822:	4613      	movcs	r3, r2
 8008824:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3302      	adds	r3, #2
 800882a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800882c:	2300      	movs	r3, #0
 800882e:	82fb      	strh	r3, [r7, #22]
 8008830:	e00b      	b.n	800884a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008832:	8afb      	ldrh	r3, [r7, #22]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	781a      	ldrb	r2, [r3, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	3301      	adds	r3, #1
 8008842:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008844:	8afb      	ldrh	r3, [r7, #22]
 8008846:	3302      	adds	r3, #2
 8008848:	82fb      	strh	r3, [r7, #22]
 800884a:	8afa      	ldrh	r2, [r7, #22]
 800884c:	8abb      	ldrh	r3, [r7, #20]
 800884e:	429a      	cmp	r2, r3
 8008850:	d3ef      	bcc.n	8008832 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
  }
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	881a      	ldrh	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	4413      	add	r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800888c:	68fb      	ldr	r3, [r7, #12]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b086      	sub	sp, #24
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4613      	mov	r3, r2
 80088a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	789b      	ldrb	r3, [r3, #2]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d002      	beq.n	80088ba <USBH_CtlReq+0x20>
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d00f      	beq.n	80088d8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80088b8:	e027      	b.n	800890a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2202      	movs	r2, #2
 80088d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088d2:	2301      	movs	r3, #1
 80088d4:	75fb      	strb	r3, [r7, #23]
      break;
 80088d6:	e018      	b.n	800890a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f81b 	bl	8008914 <USBH_HandleControl>
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <USBH_CtlReq+0x54>
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d106      	bne.n	80088fc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	761a      	strb	r2, [r3, #24]
      break;
 80088fa:	e005      	b.n	8008908 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d102      	bne.n	8008908 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	709a      	strb	r2, [r3, #2]
      break;
 8008908:	bf00      	nop
  }
  return status;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008920:	2300      	movs	r3, #0
 8008922:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7e1b      	ldrb	r3, [r3, #24]
 8008928:	3b01      	subs	r3, #1
 800892a:	2b0a      	cmp	r3, #10
 800892c:	f200 8158 	bhi.w	8008be0 <USBH_HandleControl+0x2cc>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBH_HandleControl+0x24>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008965 	.word	0x08008965
 800893c:	0800897f 	.word	0x0800897f
 8008940:	080089e9 	.word	0x080089e9
 8008944:	08008a0f 	.word	0x08008a0f
 8008948:	08008a47 	.word	0x08008a47
 800894c:	08008a73 	.word	0x08008a73
 8008950:	08008ac5 	.word	0x08008ac5
 8008954:	08008ae7 	.word	0x08008ae7
 8008958:	08008b23 	.word	0x08008b23
 800895c:	08008b4b 	.word	0x08008b4b
 8008960:	08008b89 	.word	0x08008b89
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f103 0110 	add.w	r1, r3, #16
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	795b      	ldrb	r3, [r3, #5]
 800896e:	461a      	mov	r2, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f945 	bl	8008c00 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	761a      	strb	r2, [r3, #24]
      break;
 800897c:	e13b      	b.n	8008bf6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	795b      	ldrb	r3, [r3, #5]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f002 fedb 	bl	800b740 <USBH_LL_GetURBState>
 800898a:	4603      	mov	r3, r0
 800898c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d11e      	bne.n	80089d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7c1b      	ldrb	r3, [r3, #16]
 8008998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800899c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8adb      	ldrh	r3, [r3, #22]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089a6:	7b7b      	ldrb	r3, [r7, #13]
 80089a8:	2b80      	cmp	r3, #128	; 0x80
 80089aa:	d103      	bne.n	80089b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2203      	movs	r2, #3
 80089b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089b2:	e117      	b.n	8008be4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2205      	movs	r2, #5
 80089b8:	761a      	strb	r2, [r3, #24]
      break;
 80089ba:	e113      	b.n	8008be4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80089bc:	7b7b      	ldrb	r3, [r7, #13]
 80089be:	2b80      	cmp	r3, #128	; 0x80
 80089c0:	d103      	bne.n	80089ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2209      	movs	r2, #9
 80089c6:	761a      	strb	r2, [r3, #24]
      break;
 80089c8:	e10c      	b.n	8008be4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2207      	movs	r2, #7
 80089ce:	761a      	strb	r2, [r3, #24]
      break;
 80089d0:	e108      	b.n	8008be4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d003      	beq.n	80089e0 <USBH_HandleControl+0xcc>
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	f040 8102 	bne.w	8008be4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	220b      	movs	r2, #11
 80089e4:	761a      	strb	r2, [r3, #24]
      break;
 80089e6:	e0fd      	b.n	8008be4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6899      	ldr	r1, [r3, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	899a      	ldrh	r2, [r3, #12]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	791b      	ldrb	r3, [r3, #4]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f93c 	bl	8008c7e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2204      	movs	r2, #4
 8008a0a:	761a      	strb	r2, [r3, #24]
      break;
 8008a0c:	e0f3      	b.n	8008bf6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	791b      	ldrb	r3, [r3, #4]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f002 fe93 	bl	800b740 <USBH_LL_GetURBState>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d102      	bne.n	8008a2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2209      	movs	r2, #9
 8008a28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b05      	cmp	r3, #5
 8008a2e:	d102      	bne.n	8008a36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a30:	2303      	movs	r3, #3
 8008a32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a34:	e0d8      	b.n	8008be8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	f040 80d5 	bne.w	8008be8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	220b      	movs	r2, #11
 8008a42:	761a      	strb	r2, [r3, #24]
      break;
 8008a44:	e0d0      	b.n	8008be8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6899      	ldr	r1, [r3, #8]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	899a      	ldrh	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7958      	ldrb	r0, [r3, #5]
 8008a52:	2301      	movs	r3, #1
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	4603      	mov	r3, r0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8eb 	bl	8008c34 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2206      	movs	r2, #6
 8008a6e:	761a      	strb	r2, [r3, #24]
      break;
 8008a70:	e0c1      	b.n	8008bf6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	795b      	ldrb	r3, [r3, #5]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f002 fe61 	bl	800b740 <USBH_LL_GetURBState>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d103      	bne.n	8008a90 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a8e:	e0ad      	b.n	8008bec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d105      	bne.n	8008aa2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	220c      	movs	r2, #12
 8008a9a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa0:	e0a4      	b.n	8008bec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d103      	bne.n	8008ab0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2205      	movs	r2, #5
 8008aac:	761a      	strb	r2, [r3, #24]
      break;
 8008aae:	e09d      	b.n	8008bec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	f040 809a 	bne.w	8008bec <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	220b      	movs	r2, #11
 8008abc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	e093      	b.n	8008bec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	791b      	ldrb	r3, [r3, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2100      	movs	r1, #0
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8d6 	bl	8008c7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	761a      	strb	r2, [r3, #24]

      break;
 8008ae4:	e087      	b.n	8008bf6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	791b      	ldrb	r3, [r3, #4]
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f002 fe27 	bl	800b740 <USBH_LL_GetURBState>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d105      	bne.n	8008b08 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	220d      	movs	r2, #13
 8008b00:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b06:	e073      	b.n	8008bf0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d103      	bne.n	8008b16 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	220b      	movs	r2, #11
 8008b12:	761a      	strb	r2, [r3, #24]
      break;
 8008b14:	e06c      	b.n	8008bf0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b05      	cmp	r3, #5
 8008b1a:	d169      	bne.n	8008bf0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b20:	e066      	b.n	8008bf0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	795a      	ldrb	r2, [r3, #5]
 8008b26:	2301      	movs	r3, #1
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2100      	movs	r1, #0
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f87f 	bl	8008c34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	220a      	movs	r2, #10
 8008b46:	761a      	strb	r2, [r3, #24]
      break;
 8008b48:	e055      	b.n	8008bf6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 fdf5 	bl	800b740 <USBH_LL_GetURBState>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d105      	bne.n	8008b6c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	220d      	movs	r2, #13
 8008b68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b6a:	e043      	b.n	8008bf4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d103      	bne.n	8008b7a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2209      	movs	r2, #9
 8008b76:	761a      	strb	r2, [r3, #24]
      break;
 8008b78:	e03c      	b.n	8008bf4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d139      	bne.n	8008bf4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	220b      	movs	r2, #11
 8008b84:	761a      	strb	r2, [r3, #24]
      break;
 8008b86:	e035      	b.n	8008bf4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7e5b      	ldrb	r3, [r3, #25]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	765a      	strb	r2, [r3, #25]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7e5b      	ldrb	r3, [r3, #25]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d806      	bhi.n	8008baa <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ba8:	e025      	b.n	8008bf6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bb0:	2106      	movs	r1, #6
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	795b      	ldrb	r3, [r3, #5]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f90c 	bl	8008de0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	791b      	ldrb	r3, [r3, #4]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f906 	bl	8008de0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bde:	e00a      	b.n	8008bf6 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008be0:	bf00      	nop
 8008be2:	e008      	b.n	8008bf6 <USBH_HandleControl+0x2e2>
      break;
 8008be4:	bf00      	nop
 8008be6:	e006      	b.n	8008bf6 <USBH_HandleControl+0x2e2>
      break;
 8008be8:	bf00      	nop
 8008bea:	e004      	b.n	8008bf6 <USBH_HandleControl+0x2e2>
      break;
 8008bec:	bf00      	nop
 8008bee:	e002      	b.n	8008bf6 <USBH_HandleControl+0x2e2>
      break;
 8008bf0:	bf00      	nop
 8008bf2:	e000      	b.n	8008bf6 <USBH_HandleControl+0x2e2>
      break;
 8008bf4:	bf00      	nop
  }

  return status;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af04      	add	r7, sp, #16
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c0e:	79f9      	ldrb	r1, [r7, #7]
 8008c10:	2300      	movs	r3, #0
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	2308      	movs	r3, #8
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2300      	movs	r3, #0
 8008c22:	2200      	movs	r2, #0
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f002 fd5a 	bl	800b6de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af04      	add	r7, sp, #16
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	460b      	mov	r3, r1
 8008c44:	80fb      	strh	r3, [r7, #6]
 8008c46:	4613      	mov	r3, r2
 8008c48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c58:	7979      	ldrb	r1, [r7, #5]
 8008c5a:	7e3b      	ldrb	r3, [r7, #24]
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	9302      	str	r3, [sp, #8]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	2301      	movs	r3, #1
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f002 fd35 	bl	800b6de <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af04      	add	r7, sp, #16
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	80fb      	strh	r3, [r7, #6]
 8008c90:	4613      	mov	r3, r2
 8008c92:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c94:	7979      	ldrb	r1, [r7, #5]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	88fb      	ldrh	r3, [r7, #6]
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2201      	movs	r2, #1
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f002 fd17 	bl	800b6de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008cb0:	2300      	movs	r3, #0

}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af04      	add	r7, sp, #16
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	460b      	mov	r3, r1
 8008cca:	80fb      	strh	r3, [r7, #6]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cde:	7979      	ldrb	r1, [r7, #5]
 8008ce0:	7e3b      	ldrb	r3, [r7, #24]
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	9302      	str	r3, [sp, #8]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	2301      	movs	r3, #1
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f002 fcf2 	bl	800b6de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	460b      	mov	r3, r1
 8008d14:	80fb      	strh	r3, [r7, #6]
 8008d16:	4613      	mov	r3, r2
 8008d18:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d1a:	7979      	ldrb	r1, [r7, #5]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	88fb      	ldrh	r3, [r7, #6]
 8008d22:	9302      	str	r3, [sp, #8]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2301      	movs	r3, #1
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	2201      	movs	r2, #1
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f002 fcd4 	bl	800b6de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af04      	add	r7, sp, #16
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	70fb      	strb	r3, [r7, #3]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70bb      	strb	r3, [r7, #2]
 8008d56:	4613      	mov	r3, r2
 8008d58:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d5a:	7878      	ldrb	r0, [r7, #1]
 8008d5c:	78ba      	ldrb	r2, [r7, #2]
 8008d5e:	78f9      	ldrb	r1, [r7, #3]
 8008d60:	8b3b      	ldrh	r3, [r7, #24]
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	7d3b      	ldrb	r3, [r7, #20]
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	7c3b      	ldrb	r3, [r7, #16]
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f002 fc67 	bl	800b642 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f002 fc86 	bl	800b6a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f836 	bl	8008e1c <USBH_GetFreePipe>
 8008db0:	4603      	mov	r3, r0
 8008db2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008db4:	89fb      	ldrh	r3, [r7, #14]
 8008db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00a      	beq.n	8008dd4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	33e0      	adds	r3, #224	; 0xe0
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008dd4:	89fb      	ldrh	r3, [r7, #14]
 8008dd6:	b2db      	uxtb	r3, r3
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	2b0a      	cmp	r3, #10
 8008df0:	d80d      	bhi.n	8008e0e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	33e0      	adds	r3, #224	; 0xe0
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	33e0      	adds	r3, #224	; 0xe0
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
 8008e2c:	e00f      	b.n	8008e4e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	33e0      	adds	r3, #224	; 0xe0
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	e007      	b.n	8008e58 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d9ec      	bls.n	8008e2e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	4a08      	ldr	r2, [pc, #32]	; (8008e94 <disk_status+0x30>)
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	79fa      	ldrb	r2, [r7, #7]
 8008e7c:	4905      	ldr	r1, [pc, #20]	; (8008e94 <disk_status+0x30>)
 8008e7e:	440a      	add	r2, r1
 8008e80:	7a12      	ldrb	r2, [r2, #8]
 8008e82:	4610      	mov	r0, r2
 8008e84:	4798      	blx	r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20008100 	.word	0x20008100

08008e98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	4a0d      	ldr	r2, [pc, #52]	; (8008ee0 <disk_initialize+0x48>)
 8008eaa:	5cd3      	ldrb	r3, [r2, r3]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d111      	bne.n	8008ed4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	4a0b      	ldr	r2, [pc, #44]	; (8008ee0 <disk_initialize+0x48>)
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <disk_initialize+0x48>)
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	79fa      	ldrb	r2, [r7, #7]
 8008ec6:	4906      	ldr	r1, [pc, #24]	; (8008ee0 <disk_initialize+0x48>)
 8008ec8:	440a      	add	r2, r1
 8008eca:	7a12      	ldrb	r2, [r2, #8]
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20008100 	.word	0x20008100

08008ee4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4a0a      	ldr	r2, [pc, #40]	; (8008f20 <disk_read+0x3c>)
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	689c      	ldr	r4, [r3, #8]
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	4a07      	ldr	r2, [pc, #28]	; (8008f20 <disk_read+0x3c>)
 8008f04:	4413      	add	r3, r2
 8008f06:	7a18      	ldrb	r0, [r3, #8]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	47a0      	blx	r4
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd90      	pop	{r4, r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20008100 	.word	0x20008100

08008f24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f24:	b590      	push	{r4, r7, lr}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4603      	mov	r3, r0
 8008f32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <disk_write+0x3c>)
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68dc      	ldr	r4, [r3, #12]
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <disk_write+0x3c>)
 8008f44:	4413      	add	r3, r2
 8008f46:	7a18      	ldrb	r0, [r3, #8]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	47a0      	blx	r4
 8008f50:	4603      	mov	r3, r0
 8008f52:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd90      	pop	{r4, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20008100 	.word	0x20008100

08008f64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	603a      	str	r2, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
 8008f70:	460b      	mov	r3, r1
 8008f72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	4a09      	ldr	r2, [pc, #36]	; (8008f9c <disk_ioctl+0x38>)
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	79fa      	ldrb	r2, [r7, #7]
 8008f82:	4906      	ldr	r1, [pc, #24]	; (8008f9c <disk_ioctl+0x38>)
 8008f84:	440a      	add	r2, r1
 8008f86:	7a10      	ldrb	r0, [r2, #8]
 8008f88:	79b9      	ldrb	r1, [r7, #6]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	4798      	blx	r3
 8008f8e:	4603      	mov	r3, r0
 8008f90:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20008100 	.word	0x20008100

08008fa0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3301      	adds	r3, #1
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008fb0:	89fb      	ldrh	r3, [r7, #14]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	b21a      	sxth	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	b21b      	sxth	r3, r3
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	b21b      	sxth	r3, r3
 8008fc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008fc2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3303      	adds	r3, #3
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	3202      	adds	r2, #2
 8008fe8:	7812      	ldrb	r2, [r2, #0]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	3201      	adds	r2, #1
 8008ff6:	7812      	ldrb	r2, [r2, #0]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	4313      	orrs	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
	return rv;
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	887a      	ldrh	r2, [r7, #2]
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	0a1b      	lsrs	r3, r3, #8
 8009066:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	b2d2      	uxtb	r2, r2
 8009096:	701a      	strb	r2, [r3, #0]
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00d      	beq.n	80090da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	1c53      	adds	r3, r2, #1
 80090c2:	613b      	str	r3, [r7, #16]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	1c59      	adds	r1, r3, #1
 80090c8:	6179      	str	r1, [r7, #20]
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	607b      	str	r3, [r7, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f1      	bne.n	80090be <mem_cpy+0x1a>
	}
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80090e6:	b480      	push	{r7}
 80090e8:	b087      	sub	sp, #28
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	617a      	str	r2, [r7, #20]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3b01      	subs	r3, #1
 8009106:	607b      	str	r3, [r7, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f3      	bne.n	80090f6 <mem_set+0x10>
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800911a:	b480      	push	{r7}
 800911c:	b089      	sub	sp, #36	; 0x24
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	61fb      	str	r3, [r7, #28]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	61fa      	str	r2, [r7, #28]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	4619      	mov	r1, r3
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	61ba      	str	r2, [r7, #24]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	1acb      	subs	r3, r1, r3
 8009146:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3b01      	subs	r3, #1
 800914c:	607b      	str	r3, [r7, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <mem_cmp+0x40>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0eb      	beq.n	8009132 <mem_cmp+0x18>

	return r;
 800915a:	697b      	ldr	r3, [r7, #20]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3724      	adds	r7, #36	; 0x24
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009172:	e002      	b.n	800917a <chk_chr+0x12>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3301      	adds	r3, #1
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <chk_chr+0x26>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	4293      	cmp	r3, r2
 800918c:	d1f2      	bne.n	8009174 <chk_chr+0xc>
	return *str;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	781b      	ldrb	r3, [r3, #0]
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80091aa:	2300      	movs	r3, #0
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	e029      	b.n	8009208 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80091b4:	4a27      	ldr	r2, [pc, #156]	; (8009254 <chk_lock+0xb4>)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	4413      	add	r3, r2
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01d      	beq.n	80091fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091c2:	4a24      	ldr	r2, [pc, #144]	; (8009254 <chk_lock+0xb4>)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	4413      	add	r3, r2
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d116      	bne.n	8009202 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80091d4:	4a1f      	ldr	r2, [pc, #124]	; (8009254 <chk_lock+0xb4>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	4413      	add	r3, r2
 80091dc:	3304      	adds	r3, #4
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d10c      	bne.n	8009202 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80091e8:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <chk_lock+0xb4>)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	4413      	add	r3, r2
 80091f0:	3308      	adds	r3, #8
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d102      	bne.n	8009202 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80091fc:	e007      	b.n	800920e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80091fe:	2301      	movs	r3, #1
 8009200:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d9d2      	bls.n	80091b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d109      	bne.n	8009228 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <chk_lock+0x80>
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d101      	bne.n	8009224 <chk_lock+0x84>
 8009220:	2300      	movs	r3, #0
 8009222:	e010      	b.n	8009246 <chk_lock+0xa6>
 8009224:	2312      	movs	r3, #18
 8009226:	e00e      	b.n	8009246 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d108      	bne.n	8009240 <chk_lock+0xa0>
 800922e:	4a09      	ldr	r2, [pc, #36]	; (8009254 <chk_lock+0xb4>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	4413      	add	r3, r2
 8009236:	330c      	adds	r3, #12
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923e:	d101      	bne.n	8009244 <chk_lock+0xa4>
 8009240:	2310      	movs	r3, #16
 8009242:	e000      	b.n	8009246 <chk_lock+0xa6>
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	200080e0 	.word	0x200080e0

08009258 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800925e:	2300      	movs	r3, #0
 8009260:	607b      	str	r3, [r7, #4]
 8009262:	e002      	b.n	800926a <enq_lock+0x12>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3301      	adds	r3, #1
 8009268:	607b      	str	r3, [r7, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d806      	bhi.n	800927e <enq_lock+0x26>
 8009270:	4a09      	ldr	r2, [pc, #36]	; (8009298 <enq_lock+0x40>)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	4413      	add	r3, r2
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1f2      	bne.n	8009264 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b02      	cmp	r3, #2
 8009282:	bf14      	ite	ne
 8009284:	2301      	movne	r3, #1
 8009286:	2300      	moveq	r3, #0
 8009288:	b2db      	uxtb	r3, r3
}
 800928a:	4618      	mov	r0, r3
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	200080e0 	.word	0x200080e0

0800929c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	e01f      	b.n	80092ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80092ac:	4a41      	ldr	r2, [pc, #260]	; (80093b4 <inc_lock+0x118>)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	4413      	add	r3, r2
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d113      	bne.n	80092e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80092be:	4a3d      	ldr	r2, [pc, #244]	; (80093b4 <inc_lock+0x118>)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	4413      	add	r3, r2
 80092c6:	3304      	adds	r3, #4
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d109      	bne.n	80092e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80092d2:	4a38      	ldr	r2, [pc, #224]	; (80093b4 <inc_lock+0x118>)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	4413      	add	r3, r2
 80092da:	3308      	adds	r3, #8
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d006      	beq.n	80092f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d9dc      	bls.n	80092ac <inc_lock+0x10>
 80092f2:	e000      	b.n	80092f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80092f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d132      	bne.n	8009362 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	e002      	b.n	8009308 <inc_lock+0x6c>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d806      	bhi.n	800931c <inc_lock+0x80>
 800930e:	4a29      	ldr	r2, [pc, #164]	; (80093b4 <inc_lock+0x118>)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	4413      	add	r3, r2
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1f2      	bne.n	8009302 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d101      	bne.n	8009326 <inc_lock+0x8a>
 8009322:	2300      	movs	r3, #0
 8009324:	e040      	b.n	80093a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	4922      	ldr	r1, [pc, #136]	; (80093b4 <inc_lock+0x118>)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	440b      	add	r3, r1
 8009332:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	491e      	ldr	r1, [pc, #120]	; (80093b4 <inc_lock+0x118>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	440b      	add	r3, r1
 8009340:	3304      	adds	r3, #4
 8009342:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695a      	ldr	r2, [r3, #20]
 8009348:	491a      	ldr	r1, [pc, #104]	; (80093b4 <inc_lock+0x118>)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	440b      	add	r3, r1
 8009350:	3308      	adds	r3, #8
 8009352:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009354:	4a17      	ldr	r2, [pc, #92]	; (80093b4 <inc_lock+0x118>)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	4413      	add	r3, r2
 800935c:	330c      	adds	r3, #12
 800935e:	2200      	movs	r2, #0
 8009360:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <inc_lock+0xe0>
 8009368:	4a12      	ldr	r2, [pc, #72]	; (80093b4 <inc_lock+0x118>)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	4413      	add	r3, r2
 8009370:	330c      	adds	r3, #12
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <inc_lock+0xe0>
 8009378:	2300      	movs	r3, #0
 800937a:	e015      	b.n	80093a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d108      	bne.n	8009394 <inc_lock+0xf8>
 8009382:	4a0c      	ldr	r2, [pc, #48]	; (80093b4 <inc_lock+0x118>)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	4413      	add	r3, r2
 800938a:	330c      	adds	r3, #12
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	3301      	adds	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	e001      	b.n	8009398 <inc_lock+0xfc>
 8009394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009398:	4906      	ldr	r1, [pc, #24]	; (80093b4 <inc_lock+0x118>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	440b      	add	r3, r1
 80093a0:	330c      	adds	r3, #12
 80093a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3301      	adds	r3, #1
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	200080e0 	.word	0x200080e0

080093b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d825      	bhi.n	8009418 <dec_lock+0x60>
		n = Files[i].ctr;
 80093cc:	4a17      	ldr	r2, [pc, #92]	; (800942c <dec_lock+0x74>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	4413      	add	r3, r2
 80093d4:	330c      	adds	r3, #12
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80093da:	89fb      	ldrh	r3, [r7, #14]
 80093dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093e0:	d101      	bne.n	80093e6 <dec_lock+0x2e>
 80093e2:	2300      	movs	r3, #0
 80093e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80093e6:	89fb      	ldrh	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <dec_lock+0x3a>
 80093ec:	89fb      	ldrh	r3, [r7, #14]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80093f2:	4a0e      	ldr	r2, [pc, #56]	; (800942c <dec_lock+0x74>)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	4413      	add	r3, r2
 80093fa:	330c      	adds	r3, #12
 80093fc:	89fa      	ldrh	r2, [r7, #14]
 80093fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009400:	89fb      	ldrh	r3, [r7, #14]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d105      	bne.n	8009412 <dec_lock+0x5a>
 8009406:	4a09      	ldr	r2, [pc, #36]	; (800942c <dec_lock+0x74>)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	4413      	add	r3, r2
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	737b      	strb	r3, [r7, #13]
 8009416:	e001      	b.n	800941c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009418:	2302      	movs	r3, #2
 800941a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800941c:	7b7b      	ldrb	r3, [r7, #13]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200080e0 	.word	0x200080e0

08009430 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	e010      	b.n	8009460 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800943e:	4a0d      	ldr	r2, [pc, #52]	; (8009474 <clear_lock+0x44>)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	4413      	add	r3, r2
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	429a      	cmp	r2, r3
 800944c:	d105      	bne.n	800945a <clear_lock+0x2a>
 800944e:	4a09      	ldr	r2, [pc, #36]	; (8009474 <clear_lock+0x44>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	4413      	add	r3, r2
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3301      	adds	r3, #1
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d9eb      	bls.n	800943e <clear_lock+0xe>
	}
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	200080e0 	.word	0x200080e0

08009478 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	78db      	ldrb	r3, [r3, #3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d034      	beq.n	80094f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7858      	ldrb	r0, [r3, #1]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800949c:	2301      	movs	r3, #1
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	f7ff fd40 	bl	8008f24 <disk_write>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	e022      	b.n	80094f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	1ad2      	subs	r2, r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d217      	bcs.n	80094f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	789b      	ldrb	r3, [r3, #2]
 80094ca:	613b      	str	r3, [r7, #16]
 80094cc:	e010      	b.n	80094f0 <sync_window+0x78>
					wsect += fs->fsize;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	4413      	add	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	7858      	ldrb	r0, [r3, #1]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094e2:	2301      	movs	r3, #1
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	f7ff fd1d 	bl	8008f24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d8eb      	bhi.n	80094ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d01b      	beq.n	8009550 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff ffad 	bl	8009478 <sync_window>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d113      	bne.n	8009550 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7858      	ldrb	r0, [r3, #1]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009532:	2301      	movs	r3, #1
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	f7ff fcd5 	bl	8008ee4 <disk_read>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009540:	f04f 33ff 	mov.w	r3, #4294967295
 8009544:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009546:	2301      	movs	r3, #1
 8009548:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff ff87 	bl	8009478 <sync_window>
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d158      	bne.n	8009626 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b03      	cmp	r3, #3
 800957a:	d148      	bne.n	800960e <sync_fs+0xb2>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	791b      	ldrb	r3, [r3, #4]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d144      	bne.n	800960e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3330      	adds	r3, #48	; 0x30
 8009588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fda9 	bl	80090e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3330      	adds	r3, #48	; 0x30
 8009598:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800959c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fd38 	bl	8009016 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3330      	adds	r3, #48	; 0x30
 80095aa:	4921      	ldr	r1, [pc, #132]	; (8009630 <sync_fs+0xd4>)
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff fd4d 	bl	800904c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3330      	adds	r3, #48	; 0x30
 80095b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80095ba:	491e      	ldr	r1, [pc, #120]	; (8009634 <sync_fs+0xd8>)
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fd45 	bl	800904c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3330      	adds	r3, #48	; 0x30
 80095c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f7ff fd3b 	bl	800904c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	3330      	adds	r3, #48	; 0x30
 80095da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	4619      	mov	r1, r3
 80095e4:	4610      	mov	r0, r2
 80095e6:	f7ff fd31 	bl	800904c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	7858      	ldrb	r0, [r3, #1]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009602:	2301      	movs	r3, #1
 8009604:	f7ff fc8e 	bl	8008f24 <disk_write>
			fs->fsi_flag = 0;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	785b      	ldrb	r3, [r3, #1]
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff fca4 	bl	8008f64 <disk_ioctl>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <sync_fs+0xca>
 8009622:	2301      	movs	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	41615252 	.word	0x41615252
 8009634:	61417272 	.word	0x61417272

08009638 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	3b02      	subs	r3, #2
 8009646:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	3b02      	subs	r3, #2
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d301      	bcc.n	8009658 <clust2sect+0x20>
 8009654:	2300      	movs	r3, #0
 8009656:	e008      	b.n	800966a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	895b      	ldrh	r3, [r3, #10]
 800965c:	461a      	mov	r2, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	fb03 f202 	mul.w	r2, r3, r2
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	4413      	add	r3, r2
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b086      	sub	sp, #24
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d904      	bls.n	8009696 <get_fat+0x20>
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d302      	bcc.n	800969c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009696:	2301      	movs	r3, #1
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e08c      	b.n	80097b6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800969c:	f04f 33ff 	mov.w	r3, #4294967295
 80096a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d045      	beq.n	8009736 <get_fat+0xc0>
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d05d      	beq.n	800976a <get_fat+0xf4>
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d177      	bne.n	80097a2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	085b      	lsrs	r3, r3, #1
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6a1a      	ldr	r2, [r3, #32]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	0a5b      	lsrs	r3, r3, #9
 80096c8:	4413      	add	r3, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	6938      	ldr	r0, [r7, #16]
 80096ce:	f7ff ff17 	bl	8009500 <move_window>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d167      	bne.n	80097a8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	60fa      	str	r2, [r7, #12]
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	4413      	add	r3, r2
 80096e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096ea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	6a1a      	ldr	r2, [r3, #32]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0a5b      	lsrs	r3, r3, #9
 80096f4:	4413      	add	r3, r2
 80096f6:	4619      	mov	r1, r3
 80096f8:	6938      	ldr	r0, [r7, #16]
 80096fa:	f7ff ff01 	bl	8009500 <move_window>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d153      	bne.n	80097ac <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4413      	add	r3, r2
 800970e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	461a      	mov	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	4313      	orrs	r3, r2
 800971a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <get_fat+0xb6>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	091b      	lsrs	r3, r3, #4
 800972a:	e002      	b.n	8009732 <get_fat+0xbc>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009732:	617b      	str	r3, [r7, #20]
			break;
 8009734:	e03f      	b.n	80097b6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	6a1a      	ldr	r2, [r3, #32]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	0a1b      	lsrs	r3, r3, #8
 800973e:	4413      	add	r3, r2
 8009740:	4619      	mov	r1, r3
 8009742:	6938      	ldr	r0, [r7, #16]
 8009744:	f7ff fedc 	bl	8009500 <move_window>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d130      	bne.n	80097b0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800975c:	4413      	add	r3, r2
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fc1e 	bl	8008fa0 <ld_word>
 8009764:	4603      	mov	r3, r0
 8009766:	617b      	str	r3, [r7, #20]
			break;
 8009768:	e025      	b.n	80097b6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6a1a      	ldr	r2, [r3, #32]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	09db      	lsrs	r3, r3, #7
 8009772:	4413      	add	r3, r2
 8009774:	4619      	mov	r1, r3
 8009776:	6938      	ldr	r0, [r7, #16]
 8009778:	f7ff fec2 	bl	8009500 <move_window>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d118      	bne.n	80097b4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009790:	4413      	add	r3, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fc1c 	bl	8008fd0 <ld_dword>
 8009798:	4603      	mov	r3, r0
 800979a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800979e:	617b      	str	r3, [r7, #20]
			break;
 80097a0:	e009      	b.n	80097b6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80097a2:	2301      	movs	r3, #1
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	e006      	b.n	80097b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097a8:	bf00      	nop
 80097aa:	e004      	b.n	80097b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097ac:	bf00      	nop
 80097ae:	e002      	b.n	80097b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097b0:	bf00      	nop
 80097b2:	e000      	b.n	80097b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097b4:	bf00      	nop
		}
	}

	return val;
 80097b6:	697b      	ldr	r3, [r7, #20]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80097c0:	b590      	push	{r4, r7, lr}
 80097c2:	b089      	sub	sp, #36	; 0x24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80097cc:	2302      	movs	r3, #2
 80097ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	f240 80d6 	bls.w	8009984 <put_fat+0x1c4>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	429a      	cmp	r2, r3
 80097e0:	f080 80d0 	bcs.w	8009984 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d073      	beq.n	80098d4 <put_fat+0x114>
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	f000 8091 	beq.w	8009914 <put_fat+0x154>
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	f040 80c6 	bne.w	8009984 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	4413      	add	r3, r2
 8009804:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1a      	ldr	r2, [r3, #32]
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	0a5b      	lsrs	r3, r3, #9
 800980e:	4413      	add	r3, r2
 8009810:	4619      	mov	r1, r3
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fe74 	bl	8009500 <move_window>
 8009818:	4603      	mov	r3, r0
 800981a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800981c:	7ffb      	ldrb	r3, [r7, #31]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f040 80a9 	bne.w	8009976 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	1c59      	adds	r1, r3, #1
 800982e:	61b9      	str	r1, [r7, #24]
 8009830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009834:	4413      	add	r3, r2
 8009836:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00d      	beq.n	800985e <put_fat+0x9e>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b25b      	sxtb	r3, r3
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	b25a      	sxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	b25b      	sxtb	r3, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	b25b      	sxtb	r3, r3
 800985a:	b2db      	uxtb	r3, r3
 800985c:	e001      	b.n	8009862 <put_fat+0xa2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	0a5b      	lsrs	r3, r3, #9
 8009874:	4413      	add	r3, r2
 8009876:	4619      	mov	r1, r3
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7ff fe41 	bl	8009500 <move_window>
 800987e:	4603      	mov	r3, r0
 8009880:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009882:	7ffb      	ldrb	r3, [r7, #31]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d178      	bne.n	800997a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009894:	4413      	add	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <put_fat+0xea>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	091b      	lsrs	r3, r3, #4
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	e00e      	b.n	80098c8 <put_fat+0x108>
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b25b      	sxtb	r3, r3
 80098b0:	f023 030f 	bic.w	r3, r3, #15
 80098b4:	b25a      	sxtb	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	b25b      	sxtb	r3, r3
 80098c2:	4313      	orrs	r3, r2
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	70da      	strb	r2, [r3, #3]
			break;
 80098d2:	e057      	b.n	8009984 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1a      	ldr	r2, [r3, #32]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	4413      	add	r3, r2
 80098de:	4619      	mov	r1, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff fe0d 	bl	8009500 <move_window>
 80098e6:	4603      	mov	r3, r0
 80098e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098ea:	7ffb      	ldrb	r3, [r7, #31]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d146      	bne.n	800997e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80098fe:	4413      	add	r3, r2
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	b292      	uxth	r2, r2
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fb85 	bl	8009016 <st_word>
			fs->wflag = 1;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	70da      	strb	r2, [r3, #3]
			break;
 8009912:	e037      	b.n	8009984 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a1a      	ldr	r2, [r3, #32]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	09db      	lsrs	r3, r3, #7
 800991c:	4413      	add	r3, r2
 800991e:	4619      	mov	r1, r3
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7ff fded 	bl	8009500 <move_window>
 8009926:	4603      	mov	r3, r0
 8009928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800992a:	7ffb      	ldrb	r3, [r7, #31]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d128      	bne.n	8009982 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009944:	4413      	add	r3, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fb42 	bl	8008fd0 <ld_dword>
 800994c:	4603      	mov	r3, r0
 800994e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009952:	4323      	orrs	r3, r4
 8009954:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009964:	4413      	add	r3, r2
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff fb6f 	bl	800904c <st_dword>
			fs->wflag = 1;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2201      	movs	r2, #1
 8009972:	70da      	strb	r2, [r3, #3]
			break;
 8009974:	e006      	b.n	8009984 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009976:	bf00      	nop
 8009978:	e004      	b.n	8009984 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800997a:	bf00      	nop
 800997c:	e002      	b.n	8009984 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800997e:	bf00      	nop
 8009980:	e000      	b.n	8009984 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009982:	bf00      	nop
		}
	}
	return res;
 8009984:	7ffb      	ldrb	r3, [r7, #31]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3724      	adds	r7, #36	; 0x24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd90      	pop	{r4, r7, pc}

0800998e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b088      	sub	sp, #32
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d904      	bls.n	80099b4 <remove_chain+0x26>
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d301      	bcc.n	80099b8 <remove_chain+0x2a>
 80099b4:	2302      	movs	r3, #2
 80099b6:	e04b      	b.n	8009a50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00c      	beq.n	80099d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80099be:	f04f 32ff 	mov.w	r2, #4294967295
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	69b8      	ldr	r0, [r7, #24]
 80099c6:	f7ff fefb 	bl	80097c0 <put_fat>
 80099ca:	4603      	mov	r3, r0
 80099cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80099ce:	7ffb      	ldrb	r3, [r7, #31]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <remove_chain+0x4a>
 80099d4:	7ffb      	ldrb	r3, [r7, #31]
 80099d6:	e03b      	b.n	8009a50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7ff fe4b 	bl	8009676 <get_fat>
 80099e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d031      	beq.n	8009a4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d101      	bne.n	80099f2 <remove_chain+0x64>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e02e      	b.n	8009a50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d101      	bne.n	80099fe <remove_chain+0x70>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e028      	b.n	8009a50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80099fe:	2200      	movs	r2, #0
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	69b8      	ldr	r0, [r7, #24]
 8009a04:	f7ff fedc 	bl	80097c0 <put_fat>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a0c:	7ffb      	ldrb	r3, [r7, #31]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <remove_chain+0x88>
 8009a12:	7ffb      	ldrb	r3, [r7, #31]
 8009a14:	e01c      	b.n	8009a50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	691a      	ldr	r2, [r3, #16]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	3b02      	subs	r3, #2
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d20b      	bcs.n	8009a3c <remove_chain+0xae>
			fs->free_clst++;
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	f043 0301 	orr.w	r3, r3, #1
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d3c6      	bcc.n	80099d8 <remove_chain+0x4a>
 8009a4a:	e000      	b.n	8009a4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009a4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10d      	bne.n	8009a8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <create_chain+0x2c>
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d31b      	bcc.n	8009abc <create_chain+0x64>
 8009a84:	2301      	movs	r3, #1
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	e018      	b.n	8009abc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fdf2 	bl	8009676 <get_fat>
 8009a92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d801      	bhi.n	8009a9e <create_chain+0x46>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e070      	b.n	8009b80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa4:	d101      	bne.n	8009aaa <create_chain+0x52>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	e06a      	b.n	8009b80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d201      	bcs.n	8009ab8 <create_chain+0x60>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	e063      	b.n	8009b80 <create_chain+0x128>
		scl = clst;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d307      	bcc.n	8009ae0 <create_chain+0x88>
				ncl = 2;
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009ad4:	69fa      	ldr	r2, [r7, #28]
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d901      	bls.n	8009ae0 <create_chain+0x88>
 8009adc:	2300      	movs	r3, #0
 8009ade:	e04f      	b.n	8009b80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009ae0:	69f9      	ldr	r1, [r7, #28]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff fdc7 	bl	8009676 <get_fat>
 8009ae8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00e      	beq.n	8009b0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d003      	beq.n	8009afe <create_chain+0xa6>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afc:	d101      	bne.n	8009b02 <create_chain+0xaa>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	e03e      	b.n	8009b80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d1da      	bne.n	8009ac0 <create_chain+0x68>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e038      	b.n	8009b80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009b0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009b10:	f04f 32ff 	mov.w	r2, #4294967295
 8009b14:	69f9      	ldr	r1, [r7, #28]
 8009b16:	6938      	ldr	r0, [r7, #16]
 8009b18:	f7ff fe52 	bl	80097c0 <put_fat>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <create_chain+0xe2>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d006      	beq.n	8009b3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6938      	ldr	r0, [r7, #16]
 8009b32:	f7ff fe45 	bl	80097c0 <put_fat>
 8009b36:	4603      	mov	r3, r0
 8009b38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d116      	bne.n	8009b6e <create_chain+0x116>
		fs->last_clst = ncl;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	3b02      	subs	r3, #2
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d804      	bhi.n	8009b5e <create_chain+0x106>
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	1e5a      	subs	r2, r3, #1
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	791b      	ldrb	r3, [r3, #4]
 8009b62:	f043 0301 	orr.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	711a      	strb	r2, [r3, #4]
 8009b6c:	e007      	b.n	8009b7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d102      	bne.n	8009b7a <create_chain+0x122>
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	e000      	b.n	8009b7c <create_chain+0x124>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009b7e:	69fb      	ldr	r3, [r7, #28]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3720      	adds	r7, #32
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	0a5b      	lsrs	r3, r3, #9
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	8952      	ldrh	r2, [r2, #10]
 8009ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1d1a      	adds	r2, r3, #4
 8009bb2:	613a      	str	r2, [r7, #16]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <clmt_clust+0x3a>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e010      	b.n	8009be4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d307      	bcc.n	8009bda <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bd8:	e7e9      	b.n	8009bae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009bda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	4413      	add	r3, r2
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	371c      	adds	r7, #28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c06:	d204      	bcs.n	8009c12 <dir_sdi+0x22>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f003 031f 	and.w	r3, r3, #31
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009c12:	2302      	movs	r3, #2
 8009c14:	e063      	b.n	8009cde <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <dir_sdi+0x46>
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d902      	bls.n	8009c36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10c      	bne.n	8009c56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	095b      	lsrs	r3, r3, #5
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	8912      	ldrh	r2, [r2, #8]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d301      	bcc.n	8009c4c <dir_sdi+0x5c>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e048      	b.n	8009cde <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	61da      	str	r2, [r3, #28]
 8009c54:	e029      	b.n	8009caa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	895b      	ldrh	r3, [r3, #10]
 8009c5a:	025b      	lsls	r3, r3, #9
 8009c5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c5e:	e019      	b.n	8009c94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6979      	ldr	r1, [r7, #20]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff fd06 	bl	8009676 <get_fat>
 8009c6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d101      	bne.n	8009c78 <dir_sdi+0x88>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e032      	b.n	8009cde <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d904      	bls.n	8009c88 <dir_sdi+0x98>
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d301      	bcc.n	8009c8c <dir_sdi+0x9c>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e028      	b.n	8009cde <dir_sdi+0xee>
			ofs -= csz;
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d2e1      	bcs.n	8009c60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009c9c:	6979      	ldr	r1, [r7, #20]
 8009c9e:	6938      	ldr	r0, [r7, #16]
 8009ca0:	f7ff fcca 	bl	8009638 <clust2sect>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <dir_sdi+0xcc>
 8009cb8:	2302      	movs	r3, #2
 8009cba:	e010      	b.n	8009cde <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	69da      	ldr	r2, [r3, #28]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	0a5b      	lsrs	r3, r3, #9
 8009cc4:	441a      	add	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd6:	441a      	add	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	3320      	adds	r3, #32
 8009cfc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <dir_next+0x28>
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d0c:	d301      	bcc.n	8009d12 <dir_next+0x2c>
 8009d0e:	2304      	movs	r3, #4
 8009d10:	e0aa      	b.n	8009e68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f040 8098 	bne.w	8009e4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10b      	bne.n	8009d48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	095b      	lsrs	r3, r3, #5
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	8912      	ldrh	r2, [r2, #8]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	f0c0 8088 	bcc.w	8009e4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	61da      	str	r2, [r3, #28]
 8009d44:	2304      	movs	r3, #4
 8009d46:	e08f      	b.n	8009e68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	0a5b      	lsrs	r3, r3, #9
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	8952      	ldrh	r2, [r2, #10]
 8009d50:	3a01      	subs	r2, #1
 8009d52:	4013      	ands	r3, r2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d17a      	bne.n	8009e4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	4610      	mov	r0, r2
 8009d62:	f7ff fc88 	bl	8009676 <get_fat>
 8009d66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d801      	bhi.n	8009d72 <dir_next+0x8c>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e07a      	b.n	8009e68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	d101      	bne.n	8009d7e <dir_next+0x98>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e074      	b.n	8009e68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d358      	bcc.n	8009e3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	61da      	str	r2, [r3, #28]
 8009d94:	2304      	movs	r3, #4
 8009d96:	e067      	b.n	8009e68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7ff fe59 	bl	8009a58 <create_chain>
 8009da6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <dir_next+0xcc>
 8009dae:	2307      	movs	r3, #7
 8009db0:	e05a      	b.n	8009e68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <dir_next+0xd6>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e055      	b.n	8009e68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d101      	bne.n	8009dc8 <dir_next+0xe2>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e04f      	b.n	8009e68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7ff fb55 	bl	8009478 <sync_window>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <dir_next+0xf2>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e047      	b.n	8009e68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3330      	adds	r3, #48	; 0x30
 8009ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff f97f 	bl	80090e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009de8:	2300      	movs	r3, #0
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	6979      	ldr	r1, [r7, #20]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fc22 	bl	8009638 <clust2sect>
 8009df4:	4602      	mov	r2, r0
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8009dfa:	e012      	b.n	8009e22 <dir_next+0x13c>
						fs->wflag = 1;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7ff fb38 	bl	8009478 <sync_window>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <dir_next+0x12c>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e02a      	b.n	8009e68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	3301      	adds	r3, #1
 8009e16:	613b      	str	r3, [r7, #16]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	62da      	str	r2, [r3, #44]	; 0x2c
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	895b      	ldrh	r3, [r3, #10]
 8009e26:	461a      	mov	r2, r3
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d3e6      	bcc.n	8009dfc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009e40:	6979      	ldr	r1, [r7, #20]
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fbf8 	bl	8009638 <clust2sect>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	441a      	add	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009e80:	2100      	movs	r1, #0
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff feb4 	bl	8009bf0 <dir_sdi>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d12b      	bne.n	8009eea <dir_alloc+0x7a>
		n = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fb2f 	bl	8009500 <move_window>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d11d      	bne.n	8009ee8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2be5      	cmp	r3, #229	; 0xe5
 8009eb4:	d004      	beq.n	8009ec0 <dir_alloc+0x50>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d107      	bne.n	8009ed0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	613b      	str	r3, [r7, #16]
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d102      	bne.n	8009ed4 <dir_alloc+0x64>
 8009ece:	e00c      	b.n	8009eea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff ff05 	bl	8009ce6 <dir_next>
 8009edc:	4603      	mov	r3, r0
 8009ede:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ee0:	7dfb      	ldrb	r3, [r7, #23]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0d7      	beq.n	8009e96 <dir_alloc+0x26>
 8009ee6:	e000      	b.n	8009eea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ee8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d101      	bne.n	8009ef4 <dir_alloc+0x84>
 8009ef0:	2307      	movs	r3, #7
 8009ef2:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	331a      	adds	r3, #26
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff f847 	bl	8008fa0 <ld_word>
 8009f12:	4603      	mov	r3, r0
 8009f14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d109      	bne.n	8009f32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	3314      	adds	r3, #20
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff f83c 	bl	8008fa0 <ld_word>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	041b      	lsls	r3, r3, #16
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009f32:	68fb      	ldr	r3, [r7, #12]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	331a      	adds	r3, #26
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	b292      	uxth	r2, r2
 8009f50:	4611      	mov	r1, r2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7ff f85f 	bl	8009016 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d109      	bne.n	8009f74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f103 0214 	add.w	r2, r3, #20
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	0c1b      	lsrs	r3, r3, #16
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7ff f851 	bl	8009016 <st_word>
	}
}
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff fe2f 	bl	8009bf0 <dir_sdi>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <dir_find+0x24>
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	e03e      	b.n	800a01e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6938      	ldr	r0, [r7, #16]
 8009fa8:	f7ff faaa 	bl	8009500 <move_window>
 8009fac:	4603      	mov	r3, r0
 8009fae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d12f      	bne.n	800a016 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <dir_find+0x4e>
 8009fc4:	2304      	movs	r3, #4
 8009fc6:	75fb      	strb	r3, [r7, #23]
 8009fc8:	e028      	b.n	800a01c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	330b      	adds	r3, #11
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	330b      	adds	r3, #11
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <dir_find+0x86>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a18      	ldr	r0, [r3, #32]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3324      	adds	r3, #36	; 0x24
 8009ff4:	220b      	movs	r2, #11
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f7ff f88f 	bl	800911a <mem_cmp>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00b      	beq.n	800a01a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a002:	2100      	movs	r1, #0
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fe6e 	bl	8009ce6 <dir_next>
 800a00a:	4603      	mov	r3, r0
 800a00c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0c5      	beq.n	8009fa0 <dir_find+0x24>
 800a014:	e002      	b.n	800a01c <dir_find+0xa0>
		if (res != FR_OK) break;
 800a016:	bf00      	nop
 800a018:	e000      	b.n	800a01c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a01a:	bf00      	nop

	return res;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a034:	2101      	movs	r1, #1
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7ff ff1a 	bl	8009e70 <dir_alloc>
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d11c      	bne.n	800a080 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	4619      	mov	r1, r3
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f7ff fa57 	bl	8009500 <move_window>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d111      	bne.n	800a080 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	2220      	movs	r2, #32
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff f83e 	bl	80090e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a18      	ldr	r0, [r3, #32]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	3324      	adds	r3, #36	; 0x24
 800a072:	220b      	movs	r2, #11
 800a074:	4619      	mov	r1, r3
 800a076:	f7ff f815 	bl	80090a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2201      	movs	r2, #1
 800a07e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b086      	sub	sp, #24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d04e      	beq.n	800a140 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	613b      	str	r3, [r7, #16]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a0aa:	e021      	b.n	800a0f0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1a      	ldr	r2, [r3, #32]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1c59      	adds	r1, r3, #1
 800a0b4:	6179      	str	r1, [r7, #20]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d100      	bne.n	800a0c4 <get_fileinfo+0x3a>
 800a0c2:	e015      	b.n	800a0f0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	d101      	bne.n	800a0ce <get_fileinfo+0x44>
 800a0ca:	23e5      	movs	r3, #229	; 0xe5
 800a0cc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b09      	cmp	r3, #9
 800a0d2:	d106      	bne.n	800a0e2 <get_fileinfo+0x58>
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	613a      	str	r2, [r7, #16]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4413      	add	r3, r2
 800a0de:	222e      	movs	r2, #46	; 0x2e
 800a0e0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	613a      	str	r2, [r7, #16]
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	7bfa      	ldrb	r2, [r7, #15]
 800a0ee:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2b0a      	cmp	r3, #10
 800a0f4:	d9da      	bls.n	800a0ac <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	3309      	adds	r3, #9
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	7ada      	ldrb	r2, [r3, #11]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	331c      	adds	r3, #28
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe ff5c 	bl	8008fd0 <ld_dword>
 800a118:	4602      	mov	r2, r0
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	3316      	adds	r3, #22
 800a124:	4618      	mov	r0, r3
 800a126:	f7fe ff53 	bl	8008fd0 <ld_dword>
 800a12a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	b29a      	uxth	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	80da      	strh	r2, [r3, #6]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	b29a      	uxth	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	809a      	strh	r2, [r3, #4]
 800a13e:	e000      	b.n	800a142 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a140:	bf00      	nop
}
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a15e:	220b      	movs	r2, #11
 800a160:	2120      	movs	r1, #32
 800a162:	68b8      	ldr	r0, [r7, #8]
 800a164:	f7fe ffbf 	bl	80090e6 <mem_set>
	si = i = 0; ni = 8;
 800a168:	2300      	movs	r3, #0
 800a16a:	613b      	str	r3, [r7, #16]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	2308      	movs	r3, #8
 800a172:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	617a      	str	r2, [r7, #20]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4413      	add	r3, r2
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a182:	7ffb      	ldrb	r3, [r7, #31]
 800a184:	2b20      	cmp	r3, #32
 800a186:	d94e      	bls.n	800a226 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a188:	7ffb      	ldrb	r3, [r7, #31]
 800a18a:	2b2f      	cmp	r3, #47	; 0x2f
 800a18c:	d006      	beq.n	800a19c <create_name+0x54>
 800a18e:	7ffb      	ldrb	r3, [r7, #31]
 800a190:	2b5c      	cmp	r3, #92	; 0x5c
 800a192:	d110      	bne.n	800a1b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a194:	e002      	b.n	800a19c <create_name+0x54>
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	3301      	adds	r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b2f      	cmp	r3, #47	; 0x2f
 800a1a6:	d0f6      	beq.n	800a196 <create_name+0x4e>
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a1b2:	d0f0      	beq.n	800a196 <create_name+0x4e>
			break;
 800a1b4:	e038      	b.n	800a228 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a1b6:	7ffb      	ldrb	r3, [r7, #31]
 800a1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ba:	d003      	beq.n	800a1c4 <create_name+0x7c>
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d30c      	bcc.n	800a1de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	2b0b      	cmp	r3, #11
 800a1c8:	d002      	beq.n	800a1d0 <create_name+0x88>
 800a1ca:	7ffb      	ldrb	r3, [r7, #31]
 800a1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ce:	d001      	beq.n	800a1d4 <create_name+0x8c>
 800a1d0:	2306      	movs	r3, #6
 800a1d2:	e044      	b.n	800a25e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	230b      	movs	r3, #11
 800a1da:	61bb      	str	r3, [r7, #24]
			continue;
 800a1dc:	e022      	b.n	800a224 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a1de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	da04      	bge.n	800a1f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a1e6:	7ffb      	ldrb	r3, [r7, #31]
 800a1e8:	3b80      	subs	r3, #128	; 0x80
 800a1ea:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <create_name+0x120>)
 800a1ec:	5cd3      	ldrb	r3, [r2, r3]
 800a1ee:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a1f0:	7ffb      	ldrb	r3, [r7, #31]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	481d      	ldr	r0, [pc, #116]	; (800a26c <create_name+0x124>)
 800a1f6:	f7fe ffb7 	bl	8009168 <chk_chr>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <create_name+0xbc>
 800a200:	2306      	movs	r3, #6
 800a202:	e02c      	b.n	800a25e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a204:	7ffb      	ldrb	r3, [r7, #31]
 800a206:	2b60      	cmp	r3, #96	; 0x60
 800a208:	d905      	bls.n	800a216 <create_name+0xce>
 800a20a:	7ffb      	ldrb	r3, [r7, #31]
 800a20c:	2b7a      	cmp	r3, #122	; 0x7a
 800a20e:	d802      	bhi.n	800a216 <create_name+0xce>
 800a210:	7ffb      	ldrb	r3, [r7, #31]
 800a212:	3b20      	subs	r3, #32
 800a214:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	613a      	str	r2, [r7, #16]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	4413      	add	r3, r2
 800a220:	7ffa      	ldrb	r2, [r7, #31]
 800a222:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a224:	e7a6      	b.n	800a174 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a226:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	441a      	add	r2, r3
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <create_name+0xf4>
 800a238:	2306      	movs	r3, #6
 800a23a:	e010      	b.n	800a25e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2be5      	cmp	r3, #229	; 0xe5
 800a242:	d102      	bne.n	800a24a <create_name+0x102>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2205      	movs	r2, #5
 800a248:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a24a:	7ffb      	ldrb	r3, [r7, #31]
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d801      	bhi.n	800a254 <create_name+0x10c>
 800a250:	2204      	movs	r2, #4
 800a252:	e000      	b.n	800a256 <create_name+0x10e>
 800a254:	2200      	movs	r2, #0
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	330b      	adds	r3, #11
 800a25a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a25c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3720      	adds	r7, #32
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	0800cac4 	.word	0x0800cac4
 800a26c:	0800ca54 	.word	0x0800ca54

0800a270 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a284:	e002      	b.n	800a28c <follow_path+0x1c>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	3301      	adds	r3, #1
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b2f      	cmp	r3, #47	; 0x2f
 800a292:	d0f8      	beq.n	800a286 <follow_path+0x16>
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b5c      	cmp	r3, #92	; 0x5c
 800a29a:	d0f4      	beq.n	800a286 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b1f      	cmp	r3, #31
 800a2a8:	d80a      	bhi.n	800a2c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2280      	movs	r2, #128	; 0x80
 800a2ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff fc9b 	bl	8009bf0 <dir_sdi>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
 800a2be:	e043      	b.n	800a348 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2c0:	463b      	mov	r3, r7
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff3f 	bl	800a148 <create_name>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d134      	bne.n	800a33e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff fe51 	bl	8009f7c <dir_find>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a2e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d127      	bne.n	800a342 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d122      	bne.n	800a342 <follow_path+0xd2>
 800a2fc:	2305      	movs	r3, #5
 800a2fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a300:	e01f      	b.n	800a342 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a302:	7afb      	ldrb	r3, [r7, #11]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d11c      	bne.n	800a346 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	799b      	ldrb	r3, [r3, #6]
 800a310:	f003 0310 	and.w	r3, r3, #16
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a318:	2305      	movs	r3, #5
 800a31a:	75fb      	strb	r3, [r7, #23]
 800a31c:	e014      	b.n	800a348 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32c:	4413      	add	r3, r2
 800a32e:	4619      	mov	r1, r3
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff fde4 	bl	8009efe <ld_clust>
 800a336:	4602      	mov	r2, r0
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a33c:	e7c0      	b.n	800a2c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a33e:	bf00      	nop
 800a340:	e002      	b.n	800a348 <follow_path+0xd8>
				break;
 800a342:	bf00      	nop
 800a344:	e000      	b.n	800a348 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a346:	bf00      	nop
			}
		}
	}

	return res;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a352:	b480      	push	{r7}
 800a354:	b087      	sub	sp, #28
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a35a:	f04f 33ff 	mov.w	r3, #4294967295
 800a35e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d031      	beq.n	800a3cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e002      	b.n	800a376 <get_ldnumber+0x24>
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3301      	adds	r3, #1
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b20      	cmp	r3, #32
 800a37c:	d903      	bls.n	800a386 <get_ldnumber+0x34>
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b3a      	cmp	r3, #58	; 0x3a
 800a384:	d1f4      	bne.n	800a370 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b3a      	cmp	r3, #58	; 0x3a
 800a38c:	d11c      	bne.n	800a3c8 <get_ldnumber+0x76>
			tp = *path;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	60fa      	str	r2, [r7, #12]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	3b30      	subs	r3, #48	; 0x30
 800a39e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b09      	cmp	r3, #9
 800a3a4:	d80e      	bhi.n	800a3c4 <get_ldnumber+0x72>
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d10a      	bne.n	800a3c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <get_ldnumber+0x72>
					vol = (int)i;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	e002      	b.n	800a3ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a3cc:	693b      	ldr	r3, [r7, #16]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
	...

0800a3dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	70da      	strb	r2, [r3, #3]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff f882 	bl	8009500 <move_window>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <check_fs+0x2a>
 800a402:	2304      	movs	r3, #4
 800a404:	e038      	b.n	800a478 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	3330      	adds	r3, #48	; 0x30
 800a40a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fdc6 	bl	8008fa0 <ld_word>
 800a414:	4603      	mov	r3, r0
 800a416:	461a      	mov	r2, r3
 800a418:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d001      	beq.n	800a424 <check_fs+0x48>
 800a420:	2303      	movs	r3, #3
 800a422:	e029      	b.n	800a478 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a42a:	2be9      	cmp	r3, #233	; 0xe9
 800a42c:	d009      	beq.n	800a442 <check_fs+0x66>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a434:	2beb      	cmp	r3, #235	; 0xeb
 800a436:	d11e      	bne.n	800a476 <check_fs+0x9a>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a43e:	2b90      	cmp	r3, #144	; 0x90
 800a440:	d119      	bne.n	800a476 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3330      	adds	r3, #48	; 0x30
 800a446:	3336      	adds	r3, #54	; 0x36
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fdc1 	bl	8008fd0 <ld_dword>
 800a44e:	4603      	mov	r3, r0
 800a450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a454:	4a0a      	ldr	r2, [pc, #40]	; (800a480 <check_fs+0xa4>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d101      	bne.n	800a45e <check_fs+0x82>
 800a45a:	2300      	movs	r3, #0
 800a45c:	e00c      	b.n	800a478 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3330      	adds	r3, #48	; 0x30
 800a462:	3352      	adds	r3, #82	; 0x52
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fdb3 	bl	8008fd0 <ld_dword>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4b05      	ldr	r3, [pc, #20]	; (800a484 <check_fs+0xa8>)
 800a46e:	429a      	cmp	r2, r3
 800a470:	d101      	bne.n	800a476 <check_fs+0x9a>
 800a472:	2300      	movs	r3, #0
 800a474:	e000      	b.n	800a478 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a476:	2302      	movs	r3, #2
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	00544146 	.word	0x00544146
 800a484:	33544146 	.word	0x33544146

0800a488 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b096      	sub	sp, #88	; 0x58
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7ff ff58 	bl	800a352 <get_ldnumber>
 800a4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da01      	bge.n	800a4ae <find_volume+0x26>
 800a4aa:	230b      	movs	r3, #11
 800a4ac:	e22e      	b.n	800a90c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a4ae:	4aa8      	ldr	r2, [pc, #672]	; (800a750 <find_volume+0x2c8>)
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <find_volume+0x3a>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	e224      	b.n	800a90c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a4c8:	79fb      	ldrb	r3, [r7, #7]
 800a4ca:	f023 0301 	bic.w	r3, r3, #1
 800a4ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01a      	beq.n	800a50e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fcc1 	bl	8008e64 <disk_status>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a4e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10c      	bne.n	800a50e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d007      	beq.n	800a50a <find_volume+0x82>
 800a4fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4fe:	f003 0304 	and.w	r3, r3, #4
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a506:	230a      	movs	r3, #10
 800a508:	e200      	b.n	800a90c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a50a:	2300      	movs	r3, #0
 800a50c:	e1fe      	b.n	800a90c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a516:	b2da      	uxtb	r2, r3
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	785b      	ldrb	r3, [r3, #1]
 800a520:	4618      	mov	r0, r3
 800a522:	f7fe fcb9 	bl	8008e98 <disk_initialize>
 800a526:	4603      	mov	r3, r0
 800a528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a52c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a538:	2303      	movs	r3, #3
 800a53a:	e1e7      	b.n	800a90c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d007      	beq.n	800a552 <find_volume+0xca>
 800a542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a54e:	230a      	movs	r3, #10
 800a550:	e1dc      	b.n	800a90c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a558:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a55a:	f7ff ff3f 	bl	800a3dc <check_fs>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d14b      	bne.n	800a604 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a56c:	2300      	movs	r3, #0
 800a56e:	643b      	str	r3, [r7, #64]	; 0x40
 800a570:	e01f      	b.n	800a5b2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a580:	4413      	add	r3, r2
 800a582:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	3304      	adds	r3, #4
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d006      	beq.n	800a59c <find_volume+0x114>
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	3308      	adds	r3, #8
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fd1c 	bl	8008fd0 <ld_dword>
 800a598:	4602      	mov	r2, r0
 800a59a:	e000      	b.n	800a59e <find_volume+0x116>
 800a59c:	2200      	movs	r2, #0
 800a59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a5a6:	440b      	add	r3, r1
 800a5a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d9dc      	bls.n	800a572 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <find_volume+0x140>
 800a5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a5d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d005      	beq.n	800a5ea <find_volume+0x162>
 800a5de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5e2:	f7ff fefb 	bl	800a3dc <check_fs>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	e000      	b.n	800a5ec <find_volume+0x164>
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a5f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d905      	bls.n	800a604 <find_volume+0x17c>
 800a5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a600:	2b03      	cmp	r3, #3
 800a602:	d9e1      	bls.n	800a5c8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d101      	bne.n	800a610 <find_volume+0x188>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e17d      	b.n	800a90c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a610:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a614:	2b01      	cmp	r3, #1
 800a616:	d901      	bls.n	800a61c <find_volume+0x194>
 800a618:	230d      	movs	r3, #13
 800a61a:	e177      	b.n	800a90c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	3330      	adds	r3, #48	; 0x30
 800a620:	330b      	adds	r3, #11
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fcbc 	bl	8008fa0 <ld_word>
 800a628:	4603      	mov	r3, r0
 800a62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62e:	d001      	beq.n	800a634 <find_volume+0x1ac>
 800a630:	230d      	movs	r3, #13
 800a632:	e16b      	b.n	800a90c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	3330      	adds	r3, #48	; 0x30
 800a638:	3316      	adds	r3, #22
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fcb0 	bl	8008fa0 <ld_word>
 800a640:	4603      	mov	r3, r0
 800a642:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <find_volume+0x1d0>
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	3330      	adds	r3, #48	; 0x30
 800a64e:	3324      	adds	r3, #36	; 0x24
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fcbd 	bl	8008fd0 <ld_dword>
 800a656:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a65c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	789b      	ldrb	r3, [r3, #2]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d005      	beq.n	800a67c <find_volume+0x1f4>
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	789b      	ldrb	r3, [r3, #2]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d001      	beq.n	800a67c <find_volume+0x1f4>
 800a678:	230d      	movs	r3, #13
 800a67a:	e147      	b.n	800a90c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	789b      	ldrb	r3, [r3, #2]
 800a680:	461a      	mov	r2, r3
 800a682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a684:	fb02 f303 	mul.w	r3, r2, r3
 800a688:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a690:	b29a      	uxth	r2, r3
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	895b      	ldrh	r3, [r3, #10]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <find_volume+0x228>
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	895b      	ldrh	r3, [r3, #10]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	895b      	ldrh	r3, [r3, #10]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <find_volume+0x22c>
 800a6b0:	230d      	movs	r3, #13
 800a6b2:	e12b      	b.n	800a90c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	3330      	adds	r3, #48	; 0x30
 800a6b8:	3311      	adds	r3, #17
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fc70 	bl	8008fa0 <ld_word>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	891b      	ldrh	r3, [r3, #8]
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <find_volume+0x252>
 800a6d6:	230d      	movs	r3, #13
 800a6d8:	e118      	b.n	800a90c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	3330      	adds	r3, #48	; 0x30
 800a6de:	3313      	adds	r3, #19
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fc5d 	bl	8008fa0 <ld_word>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d106      	bne.n	800a6fe <find_volume+0x276>
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	3330      	adds	r3, #48	; 0x30
 800a6f4:	3320      	adds	r3, #32
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fc6a 	bl	8008fd0 <ld_dword>
 800a6fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	3330      	adds	r3, #48	; 0x30
 800a702:	330e      	adds	r3, #14
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fc4b 	bl	8008fa0 <ld_word>
 800a70a:	4603      	mov	r3, r0
 800a70c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a70e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <find_volume+0x290>
 800a714:	230d      	movs	r3, #13
 800a716:	e0f9      	b.n	800a90c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a718:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71c:	4413      	add	r3, r2
 800a71e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a720:	8912      	ldrh	r2, [r2, #8]
 800a722:	0912      	lsrs	r2, r2, #4
 800a724:	b292      	uxth	r2, r2
 800a726:	4413      	add	r3, r2
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a72a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	429a      	cmp	r2, r3
 800a730:	d201      	bcs.n	800a736 <find_volume+0x2ae>
 800a732:	230d      	movs	r3, #13
 800a734:	e0ea      	b.n	800a90c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a73e:	8952      	ldrh	r2, [r2, #10]
 800a740:	fbb3 f3f2 	udiv	r3, r3, r2
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <find_volume+0x2cc>
 800a74c:	230d      	movs	r3, #13
 800a74e:	e0dd      	b.n	800a90c <find_volume+0x484>
 800a750:	200080d8 	.word	0x200080d8
		fmt = FS_FAT32;
 800a754:	2303      	movs	r3, #3
 800a756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a760:	4293      	cmp	r3, r2
 800a762:	d802      	bhi.n	800a76a <find_volume+0x2e2>
 800a764:	2302      	movs	r3, #2
 800a766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a770:	4293      	cmp	r3, r2
 800a772:	d802      	bhi.n	800a77a <find_volume+0x2f2>
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	1c9a      	adds	r2, r3, #2
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a786:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a78c:	441a      	add	r2, r3
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	441a      	add	r2, r3
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a79c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d11e      	bne.n	800a7e2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	3330      	adds	r3, #48	; 0x30
 800a7a8:	332a      	adds	r3, #42	; 0x2a
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fbf8 	bl	8008fa0 <ld_word>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <find_volume+0x332>
 800a7b6:	230d      	movs	r3, #13
 800a7b8:	e0a8      	b.n	800a90c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	891b      	ldrh	r3, [r3, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <find_volume+0x33e>
 800a7c2:	230d      	movs	r3, #13
 800a7c4:	e0a2      	b.n	800a90c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	3330      	adds	r3, #48	; 0x30
 800a7ca:	332c      	adds	r3, #44	; 0x2c
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fbff 	bl	8008fd0 <ld_dword>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	647b      	str	r3, [r7, #68]	; 0x44
 800a7e0:	e01f      	b.n	800a822 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	891b      	ldrh	r3, [r3, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <find_volume+0x366>
 800a7ea:	230d      	movs	r3, #13
 800a7ec:	e08e      	b.n	800a90c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f4:	441a      	add	r2, r3
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a7fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d103      	bne.n	800a80a <find_volume+0x382>
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	e00a      	b.n	800a820 <find_volume+0x398>
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	695a      	ldr	r2, [r3, #20]
 800a80e:	4613      	mov	r3, r2
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	4413      	add	r3, r2
 800a814:	085a      	lsrs	r2, r3, #1
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a820:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a828:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a82c:	0a5b      	lsrs	r3, r3, #9
 800a82e:	429a      	cmp	r2, r3
 800a830:	d201      	bcs.n	800a836 <find_volume+0x3ae>
 800a832:	230d      	movs	r3, #13
 800a834:	e06a      	b.n	800a90c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	f04f 32ff 	mov.w	r2, #4294967295
 800a83c:	611a      	str	r2, [r3, #16]
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	2280      	movs	r2, #128	; 0x80
 800a84a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a84c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a850:	2b03      	cmp	r3, #3
 800a852:	d149      	bne.n	800a8e8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	3330      	adds	r3, #48	; 0x30
 800a858:	3330      	adds	r3, #48	; 0x30
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fba0 	bl	8008fa0 <ld_word>
 800a860:	4603      	mov	r3, r0
 800a862:	2b01      	cmp	r3, #1
 800a864:	d140      	bne.n	800a8e8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a868:	3301      	adds	r3, #1
 800a86a:	4619      	mov	r1, r3
 800a86c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a86e:	f7fe fe47 	bl	8009500 <move_window>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d137      	bne.n	800a8e8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	2200      	movs	r2, #0
 800a87c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	3330      	adds	r3, #48	; 0x30
 800a882:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe fb8a 	bl	8008fa0 <ld_word>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a894:	429a      	cmp	r2, r3
 800a896:	d127      	bne.n	800a8e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89a:	3330      	adds	r3, #48	; 0x30
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fe fb97 	bl	8008fd0 <ld_dword>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	4b1b      	ldr	r3, [pc, #108]	; (800a914 <find_volume+0x48c>)
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d11e      	bne.n	800a8e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	3330      	adds	r3, #48	; 0x30
 800a8ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe fb8c 	bl	8008fd0 <ld_dword>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4b17      	ldr	r3, [pc, #92]	; (800a918 <find_volume+0x490>)
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d113      	bne.n	800a8e8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	3330      	adds	r3, #48	; 0x30
 800a8c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fb81 	bl	8008fd0 <ld_dword>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d6:	3330      	adds	r3, #48	; 0x30
 800a8d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe fb77 	bl	8008fd0 <ld_dword>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a8ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <find_volume+0x494>)
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	4b08      	ldr	r3, [pc, #32]	; (800a91c <find_volume+0x494>)
 800a8fa:	801a      	strh	r2, [r3, #0]
 800a8fc:	4b07      	ldr	r3, [pc, #28]	; (800a91c <find_volume+0x494>)
 800a8fe:	881a      	ldrh	r2, [r3, #0]
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a906:	f7fe fd93 	bl	8009430 <clear_lock>
#endif
	return FR_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3758      	adds	r7, #88	; 0x58
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	41615252 	.word	0x41615252
 800a918:	61417272 	.word	0x61417272
 800a91c:	200080dc 	.word	0x200080dc

0800a920 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a92a:	2309      	movs	r3, #9
 800a92c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01c      	beq.n	800a96e <validate+0x4e>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d018      	beq.n	800a96e <validate+0x4e>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d013      	beq.n	800a96e <validate+0x4e>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	889a      	ldrh	r2, [r3, #4]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	88db      	ldrh	r3, [r3, #6]
 800a950:	429a      	cmp	r2, r3
 800a952:	d10c      	bne.n	800a96e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe fa82 	bl	8008e64 <disk_status>
 800a960:	4603      	mov	r3, r0
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <validate+0x4e>
			res = FR_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <validate+0x5a>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	e000      	b.n	800a97c <validate+0x5c>
 800a97a:	2300      	movs	r3, #0
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	6013      	str	r3, [r2, #0]
	return res;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a99e:	f107 0310 	add.w	r3, r7, #16
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fcd5 	bl	800a352 <get_ldnumber>
 800a9a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	da01      	bge.n	800a9b4 <f_mount+0x28>
 800a9b0:	230b      	movs	r3, #11
 800a9b2:	e02b      	b.n	800aa0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a9b4:	4a17      	ldr	r2, [pc, #92]	; (800aa14 <f_mount+0x88>)
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a9c4:	69b8      	ldr	r0, [r7, #24]
 800a9c6:	f7fe fd33 	bl	8009430 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	490d      	ldr	r1, [pc, #52]	; (800aa14 <f_mount+0x88>)
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <f_mount+0x66>
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d001      	beq.n	800a9f6 <f_mount+0x6a>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e00a      	b.n	800aa0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a9f6:	f107 010c 	add.w	r1, r7, #12
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff fd41 	bl	800a488 <find_volume>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	200080d8 	.word	0x200080d8

0800aa18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b098      	sub	sp, #96	; 0x60
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4613      	mov	r3, r2
 800aa24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <f_open+0x18>
 800aa2c:	2309      	movs	r3, #9
 800aa2e:	e1ad      	b.n	800ad8c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aa38:	79fa      	ldrb	r2, [r7, #7]
 800aa3a:	f107 0110 	add.w	r1, r7, #16
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff fd20 	bl	800a488 <find_volume>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800aa4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 8191 	bne.w	800ad7a <f_open+0x362>
		dj.obj.fs = fs;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	f107 0314 	add.w	r3, r7, #20
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff fc03 	bl	800a270 <follow_path>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11a      	bne.n	800aaae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aa78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa7c:	b25b      	sxtb	r3, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da03      	bge.n	800aa8a <f_open+0x72>
				res = FR_INVALID_NAME;
 800aa82:	2306      	movs	r3, #6
 800aa84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa88:	e011      	b.n	800aaae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bf14      	ite	ne
 800aa94:	2301      	movne	r3, #1
 800aa96:	2300      	moveq	r3, #0
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f107 0314 	add.w	r3, r7, #20
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fb7c 	bl	80091a0 <chk_lock>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	f003 031c 	and.w	r3, r3, #28
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d07f      	beq.n	800abb8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800aab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d017      	beq.n	800aaf0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	d10e      	bne.n	800aae6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aac8:	f7fe fbc6 	bl	8009258 <enq_lock>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d006      	beq.n	800aae0 <f_open+0xc8>
 800aad2:	f107 0314 	add.w	r3, r7, #20
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff faa5 	bl	800a026 <dir_register>
 800aadc:	4603      	mov	r3, r0
 800aade:	e000      	b.n	800aae2 <f_open+0xca>
 800aae0:	2312      	movs	r3, #18
 800aae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	f043 0308 	orr.w	r3, r3, #8
 800aaec:	71fb      	strb	r3, [r7, #7]
 800aaee:	e010      	b.n	800ab12 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aaf0:	7ebb      	ldrb	r3, [r7, #26]
 800aaf2:	f003 0311 	and.w	r3, r3, #17
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <f_open+0xea>
					res = FR_DENIED;
 800aafa:	2307      	movs	r3, #7
 800aafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab00:	e007      	b.n	800ab12 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <f_open+0xfa>
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ab12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d168      	bne.n	800abec <f_open+0x1d4>
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d063      	beq.n	800abec <f_open+0x1d4>
				dw = GET_FATTIME();
 800ab24:	f7fb f9a6 	bl	8005e74 <get_fattime>
 800ab28:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ab2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2c:	330e      	adds	r3, #14
 800ab2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe fa8b 	bl	800904c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	3316      	adds	r3, #22
 800ab3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fa85 	bl	800904c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab44:	330b      	adds	r3, #11
 800ab46:	2220      	movs	r2, #32
 800ab48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4e:	4611      	mov	r1, r2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff f9d4 	bl	8009efe <ld_clust>
 800ab56:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff f9ec 	bl	8009f3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	331c      	adds	r3, #28
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fa6e 	bl	800904c <st_dword>
					fs->wflag = 1;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2201      	movs	r2, #1
 800ab74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ab76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d037      	beq.n	800abec <f_open+0x1d4>
						dw = fs->winsect;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ab82:	f107 0314 	add.w	r3, r7, #20
 800ab86:	2200      	movs	r2, #0
 800ab88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe feff 	bl	800998e <remove_chain>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ab96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d126      	bne.n	800abec <f_open+0x1d4>
							res = move_window(fs, dw);
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fcac 	bl	8009500 <move_window>
 800aba8:	4603      	mov	r3, r0
 800abaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abb2:	3a01      	subs	r2, #1
 800abb4:	60da      	str	r2, [r3, #12]
 800abb6:	e019      	b.n	800abec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800abb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d115      	bne.n	800abec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800abc0:	7ebb      	ldrb	r3, [r7, #26]
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800abca:	2304      	movs	r3, #4
 800abcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abd0:	e00c      	b.n	800abec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d007      	beq.n	800abec <f_open+0x1d4>
 800abdc:	7ebb      	ldrb	r3, [r7, #26]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <f_open+0x1d4>
						res = FR_DENIED;
 800abe6:	2307      	movs	r3, #7
 800abe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800abec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d128      	bne.n	800ac46 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	f003 0308 	and.w	r3, r3, #8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ac0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	f023 0301 	bic.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bf14      	ite	ne
 800ac1e:	2301      	movne	r3, #1
 800ac20:	2300      	moveq	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	f107 0314 	add.w	r3, r7, #20
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe fb35 	bl	800929c <inc_lock>
 800ac32:	4602      	mov	r2, r0
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d102      	bne.n	800ac46 <f_open+0x22e>
 800ac40:	2302      	movs	r3, #2
 800ac42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ac46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f040 8095 	bne.w	800ad7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac54:	4611      	mov	r1, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff f951 	bl	8009efe <ld_clust>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac64:	331c      	adds	r3, #28
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe f9b2 	bl	8008fd0 <ld_dword>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	88da      	ldrh	r2, [r3, #6]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	79fa      	ldrb	r2, [r7, #7]
 800ac8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3330      	adds	r3, #48	; 0x30
 800aca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aca6:	2100      	movs	r1, #0
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe fa1c 	bl	80090e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d060      	beq.n	800ad7a <f_open+0x362>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d05c      	beq.n	800ad7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	895b      	ldrh	r3, [r3, #10]
 800accc:	025b      	lsls	r3, r3, #9
 800acce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	657b      	str	r3, [r7, #84]	; 0x54
 800acdc:	e016      	b.n	800ad0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fcc7 	bl	8009676 <get_fat>
 800ace8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800acea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acec:	2b01      	cmp	r3, #1
 800acee:	d802      	bhi.n	800acf6 <f_open+0x2de>
 800acf0:	2302      	movs	r3, #2
 800acf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800acf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfc:	d102      	bne.n	800ad04 <f_open+0x2ec>
 800acfe:	2301      	movs	r3, #1
 800ad00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ad04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	657b      	str	r3, [r7, #84]	; 0x54
 800ad0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d103      	bne.n	800ad1c <f_open+0x304>
 800ad14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d8e0      	bhi.n	800acde <f_open+0x2c6>
				}
				fp->clust = clst;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ad22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d127      	bne.n	800ad7a <f_open+0x362>
 800ad2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d022      	beq.n	800ad7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe fc7d 	bl	8009638 <clust2sect>
 800ad3e:	6478      	str	r0, [r7, #68]	; 0x44
 800ad40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d103      	bne.n	800ad4e <f_open+0x336>
						res = FR_INT_ERR;
 800ad46:	2302      	movs	r3, #2
 800ad48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad4c:	e015      	b.n	800ad7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ad4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad50:	0a5a      	lsrs	r2, r3, #9
 800ad52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad54:	441a      	add	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	7858      	ldrb	r0, [r3, #1]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a1a      	ldr	r2, [r3, #32]
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f7fe f8bb 	bl	8008ee4 <disk_read>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <f_open+0x362>
 800ad74:	2301      	movs	r3, #1
 800ad76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ad7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <f_open+0x370>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3760      	adds	r7, #96	; 0x60
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08e      	sub	sp, #56	; 0x38
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f107 0214 	add.w	r2, r7, #20
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff fdb3 	bl	800a920 <validate>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800adc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d107      	bne.n	800add8 <f_read+0x44>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	7d5b      	ldrb	r3, [r3, #21]
 800adcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800add0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <f_read+0x4a>
 800add8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800addc:	e115      	b.n	800b00a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	7d1b      	ldrb	r3, [r3, #20]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <f_read+0x5a>
 800adea:	2307      	movs	r3, #7
 800adec:	e10d      	b.n	800b00a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	f240 80fe 	bls.w	800b000 <f_read+0x26c>
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ae08:	e0fa      	b.n	800b000 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f040 80c6 	bne.w	800afa4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	0a5b      	lsrs	r3, r3, #9
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	8952      	ldrh	r2, [r2, #10]
 800ae22:	3a01      	subs	r2, #1
 800ae24:	4013      	ands	r3, r2
 800ae26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d12f      	bne.n	800ae8e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d103      	bne.n	800ae3e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ae3c:	e013      	b.n	800ae66 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7fe fe9b 	bl	8009b88 <clmt_clust>
 800ae52:	6338      	str	r0, [r7, #48]	; 0x30
 800ae54:	e007      	b.n	800ae66 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	f7fe fc09 	bl	8009676 <get_fat>
 800ae64:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d804      	bhi.n	800ae76 <f_read+0xe2>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	755a      	strb	r2, [r3, #21]
 800ae72:	2302      	movs	r3, #2
 800ae74:	e0c9      	b.n	800b00a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7c:	d104      	bne.n	800ae88 <f_read+0xf4>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	755a      	strb	r2, [r3, #21]
 800ae84:	2301      	movs	r3, #1
 800ae86:	e0c0      	b.n	800b00a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f7fe fbce 	bl	8009638 <clust2sect>
 800ae9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d104      	bne.n	800aeae <f_read+0x11a>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2202      	movs	r2, #2
 800aea8:	755a      	strb	r2, [r3, #21]
 800aeaa:	2302      	movs	r3, #2
 800aeac:	e0ad      	b.n	800b00a <f_read+0x276>
			sect += csect;
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	0a5b      	lsrs	r3, r3, #9
 800aeba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d039      	beq.n	800af36 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aec2:	69fa      	ldr	r2, [r7, #28]
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	4413      	add	r3, r2
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	8952      	ldrh	r2, [r2, #10]
 800aecc:	4293      	cmp	r3, r2
 800aece:	d905      	bls.n	800aedc <f_read+0x148>
					cc = fs->csize - csect;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	895b      	ldrh	r3, [r3, #10]
 800aed4:	461a      	mov	r2, r3
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	7858      	ldrb	r0, [r3, #1]
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aee6:	f7fd fffd 	bl	8008ee4 <disk_read>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <f_read+0x166>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	755a      	strb	r2, [r3, #21]
 800aef6:	2301      	movs	r3, #1
 800aef8:	e087      	b.n	800b00a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	7d1b      	ldrb	r3, [r3, #20]
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	da14      	bge.n	800af2e <f_read+0x19a>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a1a      	ldr	r2, [r3, #32]
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0e:	429a      	cmp	r2, r3
 800af10:	d90d      	bls.n	800af2e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a1a      	ldr	r2, [r3, #32]
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	025b      	lsls	r3, r3, #9
 800af1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1e:	18d0      	adds	r0, r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3330      	adds	r3, #48	; 0x30
 800af24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af28:	4619      	mov	r1, r3
 800af2a:	f7fe f8bb 	bl	80090a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af30:	025b      	lsls	r3, r3, #9
 800af32:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800af34:	e050      	b.n	800afd8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d02e      	beq.n	800af9e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	7d1b      	ldrb	r3, [r3, #20]
 800af44:	b25b      	sxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	da18      	bge.n	800af7c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	7858      	ldrb	r0, [r3, #1]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a1a      	ldr	r2, [r3, #32]
 800af58:	2301      	movs	r3, #1
 800af5a:	f7fd ffe3 	bl	8008f24 <disk_write>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d004      	beq.n	800af6e <f_read+0x1da>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2201      	movs	r2, #1
 800af68:	755a      	strb	r2, [r3, #21]
 800af6a:	2301      	movs	r3, #1
 800af6c:	e04d      	b.n	800b00a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	7d1b      	ldrb	r3, [r3, #20]
 800af72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af76:	b2da      	uxtb	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	7858      	ldrb	r0, [r3, #1]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af86:	2301      	movs	r3, #1
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	f7fd ffab 	bl	8008ee4 <disk_read>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d004      	beq.n	800af9e <f_read+0x20a>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	755a      	strb	r2, [r3, #21]
 800af9a:	2301      	movs	r3, #1
 800af9c:	e035      	b.n	800b00a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800afb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800afb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d901      	bls.n	800afbe <f_read+0x22a>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afcc:	4413      	add	r3, r2
 800afce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afd0:	4619      	mov	r1, r3
 800afd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afd4:	f7fe f866 	bl	80090a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800afd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	4413      	add	r3, r2
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	699a      	ldr	r2, [r3, #24]
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	441a      	add	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	619a      	str	r2, [r3, #24]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	441a      	add	r2, r3
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f47f af01 	bne.w	800ae0a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3738      	adds	r7, #56	; 0x38
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b086      	sub	sp, #24
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f107 0208 	add.w	r2, r7, #8
 800b020:	4611      	mov	r1, r2
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fc7c 	bl	800a920 <validate>
 800b028:	4603      	mov	r3, r0
 800b02a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d168      	bne.n	800b104 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7d1b      	ldrb	r3, [r3, #20]
 800b036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d062      	beq.n	800b104 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7d1b      	ldrb	r3, [r3, #20]
 800b042:	b25b      	sxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	da15      	bge.n	800b074 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	7858      	ldrb	r0, [r3, #1]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a1a      	ldr	r2, [r3, #32]
 800b056:	2301      	movs	r3, #1
 800b058:	f7fd ff64 	bl	8008f24 <disk_write>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <f_sync+0x54>
 800b062:	2301      	movs	r3, #1
 800b064:	e04f      	b.n	800b106 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	7d1b      	ldrb	r3, [r3, #20]
 800b06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b074:	f7fa fefe 	bl	8005e74 <get_fattime>
 800b078:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	4619      	mov	r1, r3
 800b082:	4610      	mov	r0, r2
 800b084:	f7fe fa3c 	bl	8009500 <move_window>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d138      	bne.n	800b104 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b096:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	330b      	adds	r3, #11
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	330b      	adds	r3, #11
 800b0a2:	f042 0220 	orr.w	r2, r2, #32
 800b0a6:	b2d2      	uxtb	r2, r2
 800b0a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	68f9      	ldr	r1, [r7, #12]
 800b0b6:	f7fe ff41 	bl	8009f3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f103 021c 	add.w	r2, r3, #28
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	f7fd ffc0 	bl	800904c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3316      	adds	r3, #22
 800b0d0:	6939      	ldr	r1, [r7, #16]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fd ffba 	bl	800904c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3312      	adds	r3, #18
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fd ff99 	bl	8009016 <st_word>
					fs->wflag = 1;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fa35 	bl	800955c <sync_fs>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	7d1b      	ldrb	r3, [r3, #20]
 800b0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b104:	7dfb      	ldrb	r3, [r7, #23]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff ff7b 	bl	800b012 <f_sync>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d118      	bne.n	800b158 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f107 0208 	add.w	r2, r7, #8
 800b12c:	4611      	mov	r1, r2
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fbf6 	bl	800a920 <validate>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10c      	bne.n	800b158 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe f938 	bl	80093b8 <dec_lock>
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b090      	sub	sp, #64	; 0x40
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b16c:	f107 010c 	add.w	r1, r7, #12
 800b170:	1d3b      	adds	r3, r7, #4
 800b172:	2200      	movs	r2, #0
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff f987 	bl	800a488 <find_volume>
 800b17a:	4603      	mov	r3, r0
 800b17c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b180:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b184:	2b00      	cmp	r3, #0
 800b186:	d11f      	bne.n	800b1c8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	f107 030c 	add.w	r3, r7, #12
 800b18e:	4611      	mov	r1, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff f86d 	bl	800a270 <follow_path>
 800b196:	4603      	mov	r3, r0
 800b198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b19c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d111      	bne.n	800b1c8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b1a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1a8:	b25b      	sxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da03      	bge.n	800b1b6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b1ae:	2306      	movs	r3, #6
 800b1b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b1b4:	e008      	b.n	800b1c8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <f_stat+0x66>
 800b1bc:	f107 030c 	add.w	r3, r7, #12
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe ff61 	bl	800a08a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b1c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3740      	adds	r7, #64	; 0x40
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1ea:	4b1f      	ldr	r3, [pc, #124]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b1ec:	7a5b      	ldrb	r3, [r3, #9]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d131      	bne.n	800b258 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1f4:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b1f6:	7a5b      	ldrb	r3, [r3, #9]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b1fe:	2100      	movs	r1, #0
 800b200:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b202:	4b19      	ldr	r3, [pc, #100]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b204:	7a5b      	ldrb	r3, [r3, #9]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4a17      	ldr	r2, [pc, #92]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b214:	7a5b      	ldrb	r3, [r3, #9]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	461a      	mov	r2, r3
 800b21a:	4b13      	ldr	r3, [pc, #76]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b21c:	4413      	add	r3, r2
 800b21e:	79fa      	ldrb	r2, [r7, #7]
 800b220:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b224:	7a5b      	ldrb	r3, [r3, #9]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	b2d1      	uxtb	r1, r2
 800b22c:	4a0e      	ldr	r2, [pc, #56]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b22e:	7251      	strb	r1, [r2, #9]
 800b230:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b232:	7dbb      	ldrb	r3, [r7, #22]
 800b234:	3330      	adds	r3, #48	; 0x30
 800b236:	b2da      	uxtb	r2, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	3301      	adds	r3, #1
 800b240:	223a      	movs	r2, #58	; 0x3a
 800b242:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3302      	adds	r3, #2
 800b248:	222f      	movs	r2, #47	; 0x2f
 800b24a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3303      	adds	r3, #3
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20008100 	.word	0x20008100

0800b26c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b276:	2200      	movs	r2, #0
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff ffaa 	bl	800b1d4 <FATFS_LinkDriverEx>
 800b280:	4603      	mov	r3, r0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b290:	2201      	movs	r2, #1
 800b292:	490e      	ldr	r1, [pc, #56]	; (800b2cc <MX_USB_HOST_Init+0x40>)
 800b294:	480e      	ldr	r0, [pc, #56]	; (800b2d0 <MX_USB_HOST_Init+0x44>)
 800b296:	f7fc fa8b 	bl	80077b0 <USBH_Init>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b2a0:	f7f5 fcda 	bl	8000c58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b2a4:	490b      	ldr	r1, [pc, #44]	; (800b2d4 <MX_USB_HOST_Init+0x48>)
 800b2a6:	480a      	ldr	r0, [pc, #40]	; (800b2d0 <MX_USB_HOST_Init+0x44>)
 800b2a8:	f7fc fb10 	bl	80078cc <USBH_RegisterClass>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b2b2:	f7f5 fcd1 	bl	8000c58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b2b6:	4806      	ldr	r0, [pc, #24]	; (800b2d0 <MX_USB_HOST_Init+0x44>)
 800b2b8:	f7fc fb94 	bl	80079e4 <USBH_Start>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b2c2:	f7f5 fcc9 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b2c6:	bf00      	nop
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	0800b2ed 	.word	0x0800b2ed
 800b2d0:	20008d6c 	.word	0x20008d6c
 800b2d4:	2000000c 	.word	0x2000000c

0800b2d8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b2dc:	4802      	ldr	r0, [pc, #8]	; (800b2e8 <MX_USB_HOST_Process+0x10>)
 800b2de:	f7fc fb91 	bl	8007a04 <USBH_Process>
}
 800b2e2:	bf00      	nop
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20008d6c 	.word	0x20008d6c

0800b2ec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d819      	bhi.n	800b334 <USBH_UserProcess+0x48>
 800b300:	a201      	add	r2, pc, #4	; (adr r2, 800b308 <USBH_UserProcess+0x1c>)
 800b302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b306:	bf00      	nop
 800b308:	0800b335 	.word	0x0800b335
 800b30c:	0800b325 	.word	0x0800b325
 800b310:	0800b335 	.word	0x0800b335
 800b314:	0800b32d 	.word	0x0800b32d
 800b318:	0800b31d 	.word	0x0800b31d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <USBH_UserProcess+0x58>)
 800b31e:	2203      	movs	r2, #3
 800b320:	701a      	strb	r2, [r3, #0]
  break;
 800b322:	e008      	b.n	800b336 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b324:	4b07      	ldr	r3, [pc, #28]	; (800b344 <USBH_UserProcess+0x58>)
 800b326:	2202      	movs	r2, #2
 800b328:	701a      	strb	r2, [r3, #0]
  break;
 800b32a:	e004      	b.n	800b336 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b32c:	4b05      	ldr	r3, [pc, #20]	; (800b344 <USBH_UserProcess+0x58>)
 800b32e:	2201      	movs	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
  break;
 800b332:	e000      	b.n	800b336 <USBH_UserProcess+0x4a>

  default:
  break;
 800b334:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	2000810c 	.word	0x2000810c

0800b348 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08a      	sub	sp, #40	; 0x28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b350:	f107 0314 	add.w	r3, r7, #20
 800b354:	2200      	movs	r2, #0
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	605a      	str	r2, [r3, #4]
 800b35a:	609a      	str	r2, [r3, #8]
 800b35c:	60da      	str	r2, [r3, #12]
 800b35e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b368:	d149      	bne.n	800b3fe <HAL_HCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b36a:	4b27      	ldr	r3, [pc, #156]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36e:	4a26      	ldr	r2, [pc, #152]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b370:	f043 0301 	orr.w	r3, r3, #1
 800b374:	6313      	str	r3, [r2, #48]	; 0x30
 800b376:	4b24      	ldr	r3, [pc, #144]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	613b      	str	r3, [r7, #16]
 800b380:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b382:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b388:	2302      	movs	r3, #2
 800b38a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b38c:	2300      	movs	r3, #0
 800b38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b390:	2303      	movs	r3, #3
 800b392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b394:	230a      	movs	r3, #10
 800b396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b398:	f107 0314 	add.w	r3, r7, #20
 800b39c:	4619      	mov	r1, r3
 800b39e:	481b      	ldr	r0, [pc, #108]	; (800b40c <HAL_HCD_MspInit+0xc4>)
 800b3a0:	f7f6 fc86 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b3a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b3b2:	f107 0314 	add.w	r3, r7, #20
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4814      	ldr	r0, [pc, #80]	; (800b40c <HAL_HCD_MspInit+0xc4>)
 800b3ba:	f7f6 fc79 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3be:	4b12      	ldr	r3, [pc, #72]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c2:	4a11      	ldr	r2, [pc, #68]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c8:	6353      	str	r3, [r2, #52]	; 0x34
 800b3ca:	4b0f      	ldr	r3, [pc, #60]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3da:	4a0b      	ldr	r2, [pc, #44]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b3dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3e0:	6453      	str	r3, [r2, #68]	; 0x44
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <HAL_HCD_MspInit+0xc0>)
 800b3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ea:	60bb      	str	r3, [r7, #8]
 800b3ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	2043      	movs	r0, #67	; 0x43
 800b3f4:	f7f5 ff33 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3f8:	2043      	movs	r0, #67	; 0x43
 800b3fa:	f7f5 ff4c 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3fe:	bf00      	nop
 800b400:	3728      	adds	r7, #40	; 0x28
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	40023800 	.word	0x40023800
 800b40c:	40020000 	.word	0x40020000

0800b410 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fc fec3 	bl	80081aa <USBH_LL_IncTimer>
}
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fc fefb 	bl	8008236 <USBH_LL_Connect>
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b456:	4618      	mov	r0, r3
 800b458:	f7fc ff04 	bl	8008264 <USBH_LL_Disconnect>
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
 800b470:	4613      	mov	r3, r2
 800b472:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fc feb5 	bl	80081fe <USBH_LL_PortEnabled>
}
 800b494:	bf00      	nop
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fc feb5 	bl	800821a <USBH_LL_PortDisabled>
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d12a      	bne.n	800b520 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b4ca:	4a18      	ldr	r2, [pc, #96]	; (800b52c <USBH_LL_Init+0x74>)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a15      	ldr	r2, [pc, #84]	; (800b52c <USBH_LL_Init+0x74>)
 800b4d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b4da:	4b14      	ldr	r3, [pc, #80]	; (800b52c <USBH_LL_Init+0x74>)
 800b4dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b4e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b4e2:	4b12      	ldr	r3, [pc, #72]	; (800b52c <USBH_LL_Init+0x74>)
 800b4e4:	2208      	movs	r2, #8
 800b4e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b4e8:	4b10      	ldr	r3, [pc, #64]	; (800b52c <USBH_LL_Init+0x74>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4ee:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <USBH_LL_Init+0x74>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b4f4:	4b0d      	ldr	r3, [pc, #52]	; (800b52c <USBH_LL_Init+0x74>)
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <USBH_LL_Init+0x74>)
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b500:	480a      	ldr	r0, [pc, #40]	; (800b52c <USBH_LL_Init+0x74>)
 800b502:	f7f6 fdbc 	bl	800207e <HAL_HCD_Init>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b50c:	f7f5 fba4 	bl	8000c58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b510:	4806      	ldr	r0, [pc, #24]	; (800b52c <USBH_LL_Init+0x74>)
 800b512:	f7f7 f9bf 	bl	8002894 <HAL_HCD_GetCurrentFrame>
 800b516:	4603      	mov	r3, r0
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7fc fe36 	bl	800818c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20009144 	.word	0x20009144

0800b530 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b546:	4618      	mov	r0, r3
 800b548:	f7f7 f92c 	bl	80027a4 <HAL_HCD_Start>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b550:	7bfb      	ldrb	r3, [r7, #15]
 800b552:	4618      	mov	r0, r3
 800b554:	f000 f990 	bl	800b878 <USBH_Get_USB_Status>
 800b558:	4603      	mov	r3, r0
 800b55a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7f7 f934 	bl	80027ea <HAL_HCD_Stop>
 800b582:	4603      	mov	r3, r0
 800b584:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 f975 	bl	800b878 <USBH_Get_USB_Status>
 800b58e:	4603      	mov	r3, r0
 800b590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b592:	7bbb      	ldrb	r3, [r7, #14]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f7 f97e 	bl	80028b0 <HAL_HCD_GetCurrentSpeed>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d007      	beq.n	800b5ca <USBH_LL_GetSpeed+0x2e>
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d302      	bcc.n	800b5c4 <USBH_LL_GetSpeed+0x28>
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d006      	beq.n	800b5d0 <USBH_LL_GetSpeed+0x34>
 800b5c2:	e008      	b.n	800b5d6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c8:	e008      	b.n	800b5dc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ce:	e005      	b.n	800b5dc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d4:	e002      	b.n	800b5dc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5da:	bf00      	nop
  }
  return  speed;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f7 f911 	bl	8002824 <HAL_HCD_ResetPort>
 800b602:	4603      	mov	r3, r0
 800b604:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b606:	7bfb      	ldrb	r3, [r7, #15]
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 f935 	bl	800b878 <USBH_Get_USB_Status>
 800b60e:	4603      	mov	r3, r0
 800b610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b612:	7bbb      	ldrb	r3, [r7, #14]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7f7 f919 	bl	800286a <HAL_HCD_HC_GetXferCount>
 800b638:	4603      	mov	r3, r0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b642:	b590      	push	{r4, r7, lr}
 800b644:	b089      	sub	sp, #36	; 0x24
 800b646:	af04      	add	r7, sp, #16
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	461a      	mov	r2, r3
 800b650:	4603      	mov	r3, r0
 800b652:	70fb      	strb	r3, [r7, #3]
 800b654:	460b      	mov	r3, r1
 800b656:	70bb      	strb	r3, [r7, #2]
 800b658:	4613      	mov	r3, r2
 800b65a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b66a:	787c      	ldrb	r4, [r7, #1]
 800b66c:	78ba      	ldrb	r2, [r7, #2]
 800b66e:	78f9      	ldrb	r1, [r7, #3]
 800b670:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b672:	9302      	str	r3, [sp, #8]
 800b674:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	4623      	mov	r3, r4
 800b682:	f7f6 fd5e 	bl	8002142 <HAL_HCD_HC_Init>
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 f8f3 	bl	800b878 <USBH_Get_USB_Status>
 800b692:	4603      	mov	r3, r0
 800b694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b696:	7bbb      	ldrb	r3, [r7, #14]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd90      	pop	{r4, r7, pc}

0800b6a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6ba:	78fa      	ldrb	r2, [r7, #3]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f6 fdd7 	bl	8002272 <HAL_HCD_HC_Halt>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f8d4 	bl	800b878 <USBH_Get_USB_Status>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b6de:	b590      	push	{r4, r7, lr}
 800b6e0:	b089      	sub	sp, #36	; 0x24
 800b6e2:	af04      	add	r7, sp, #16
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	4608      	mov	r0, r1
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	70fb      	strb	r3, [r7, #3]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70bb      	strb	r3, [r7, #2]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b706:	787c      	ldrb	r4, [r7, #1]
 800b708:	78ba      	ldrb	r2, [r7, #2]
 800b70a:	78f9      	ldrb	r1, [r7, #3]
 800b70c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b710:	9303      	str	r3, [sp, #12]
 800b712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	4623      	mov	r3, r4
 800b722:	f7f6 fdc9 	bl	80022b8 <HAL_HCD_HC_SubmitRequest>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 f8a3 	bl	800b878 <USBH_Get_USB_Status>
 800b732:	4603      	mov	r3, r0
 800b734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b736:	7bbb      	ldrb	r3, [r7, #14]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd90      	pop	{r4, r7, pc}

0800b740 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b752:	78fa      	ldrb	r2, [r7, #3]
 800b754:	4611      	mov	r1, r2
 800b756:	4618      	mov	r0, r3
 800b758:	f7f7 f872 	bl	8002840 <HAL_HCD_HC_GetURBState>
 800b75c:	4603      	mov	r3, r0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	460b      	mov	r3, r1
 800b770:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d103      	bne.n	800b784 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 f8a6 	bl	800b8d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b784:	20c8      	movs	r0, #200	; 0xc8
 800b786:	f7f5 fc6d 	bl	8001064 <HAL_Delay>
  return USBH_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7aa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b7ac:	78fa      	ldrb	r2, [r7, #3]
 800b7ae:	68f9      	ldr	r1, [r7, #12]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	440b      	add	r3, r1
 800b7ba:	333b      	adds	r3, #59	; 0x3b
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3350      	adds	r3, #80	; 0x50
 800b7d2:	78ba      	ldrb	r2, [r7, #2]
 800b7d4:	701a      	strb	r2, [r3, #0]
 800b7d6:	e009      	b.n	800b7ec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b7d8:	78fa      	ldrb	r2, [r7, #3]
 800b7da:	68f9      	ldr	r1, [r7, #12]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	440b      	add	r3, r1
 800b7e6:	3351      	adds	r3, #81	; 0x51
 800b7e8:	78ba      	ldrb	r2, [r7, #2]
 800b7ea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b810:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b812:	78fa      	ldrb	r2, [r7, #3]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	440b      	add	r3, r1
 800b820:	333b      	adds	r3, #59	; 0x3b
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4613      	mov	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	440b      	add	r3, r1
 800b836:	3350      	adds	r3, #80	; 0x50
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	73fb      	strb	r3, [r7, #15]
 800b83c:	e009      	b.n	800b852 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b83e:	78fa      	ldrb	r2, [r7, #3]
 800b840:	68b9      	ldr	r1, [r7, #8]
 800b842:	4613      	mov	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	440b      	add	r3, r1
 800b84c:	3351      	adds	r3, #81	; 0x51
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7f5 fbfb 	bl	8001064 <HAL_Delay>
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d817      	bhi.n	800b8bc <USBH_Get_USB_Status+0x44>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <USBH_Get_USB_Status+0x1c>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b8a5 	.word	0x0800b8a5
 800b898:	0800b8ab 	.word	0x0800b8ab
 800b89c:	0800b8b1 	.word	0x0800b8b1
 800b8a0:	0800b8b7 	.word	0x0800b8b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a8:	e00b      	b.n	800b8c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ae:	e008      	b.n	800b8c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b4:	e005      	b.n	800b8c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ba:	e002      	b.n	800b8c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b8bc:	2302      	movs	r3, #2
 800b8be:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c0:	bf00      	nop
  }
  return usb_status;
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
 // HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
}
 800b8e8:	e001      	b.n	800b8ee <MX_DriverVbusFS+0x1e>
    data = GPIO_PIN_RESET;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]
}
 800b8ee:	bf00      	nop
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
	...

0800b8fc <__errno>:
 800b8fc:	4b01      	ldr	r3, [pc, #4]	; (800b904 <__errno+0x8>)
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	2000002c 	.word	0x2000002c

0800b908 <__libc_init_array>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	4e0d      	ldr	r6, [pc, #52]	; (800b940 <__libc_init_array+0x38>)
 800b90c:	4c0d      	ldr	r4, [pc, #52]	; (800b944 <__libc_init_array+0x3c>)
 800b90e:	1ba4      	subs	r4, r4, r6
 800b910:	10a4      	asrs	r4, r4, #2
 800b912:	2500      	movs	r5, #0
 800b914:	42a5      	cmp	r5, r4
 800b916:	d109      	bne.n	800b92c <__libc_init_array+0x24>
 800b918:	4e0b      	ldr	r6, [pc, #44]	; (800b948 <__libc_init_array+0x40>)
 800b91a:	4c0c      	ldr	r4, [pc, #48]	; (800b94c <__libc_init_array+0x44>)
 800b91c:	f000 ff84 	bl	800c828 <_init>
 800b920:	1ba4      	subs	r4, r4, r6
 800b922:	10a4      	asrs	r4, r4, #2
 800b924:	2500      	movs	r5, #0
 800b926:	42a5      	cmp	r5, r4
 800b928:	d105      	bne.n	800b936 <__libc_init_array+0x2e>
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b930:	4798      	blx	r3
 800b932:	3501      	adds	r5, #1
 800b934:	e7ee      	b.n	800b914 <__libc_init_array+0xc>
 800b936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b93a:	4798      	blx	r3
 800b93c:	3501      	adds	r5, #1
 800b93e:	e7f2      	b.n	800b926 <__libc_init_array+0x1e>
 800b940:	0800cbe4 	.word	0x0800cbe4
 800b944:	0800cbe4 	.word	0x0800cbe4
 800b948:	0800cbe4 	.word	0x0800cbe4
 800b94c:	0800cbe8 	.word	0x0800cbe8

0800b950 <malloc>:
 800b950:	4b02      	ldr	r3, [pc, #8]	; (800b95c <malloc+0xc>)
 800b952:	4601      	mov	r1, r0
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	f000 b86d 	b.w	800ba34 <_malloc_r>
 800b95a:	bf00      	nop
 800b95c:	2000002c 	.word	0x2000002c

0800b960 <free>:
 800b960:	4b02      	ldr	r3, [pc, #8]	; (800b96c <free+0xc>)
 800b962:	4601      	mov	r1, r0
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	f000 b817 	b.w	800b998 <_free_r>
 800b96a:	bf00      	nop
 800b96c:	2000002c 	.word	0x2000002c

0800b970 <memcpy>:
 800b970:	b510      	push	{r4, lr}
 800b972:	1e43      	subs	r3, r0, #1
 800b974:	440a      	add	r2, r1
 800b976:	4291      	cmp	r1, r2
 800b978:	d100      	bne.n	800b97c <memcpy+0xc>
 800b97a:	bd10      	pop	{r4, pc}
 800b97c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b980:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b984:	e7f7      	b.n	800b976 <memcpy+0x6>

0800b986 <memset>:
 800b986:	4402      	add	r2, r0
 800b988:	4603      	mov	r3, r0
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d100      	bne.n	800b990 <memset+0xa>
 800b98e:	4770      	bx	lr
 800b990:	f803 1b01 	strb.w	r1, [r3], #1
 800b994:	e7f9      	b.n	800b98a <memset+0x4>
	...

0800b998 <_free_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4605      	mov	r5, r0
 800b99c:	2900      	cmp	r1, #0
 800b99e:	d045      	beq.n	800ba2c <_free_r+0x94>
 800b9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a4:	1f0c      	subs	r4, r1, #4
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bfb8      	it	lt
 800b9aa:	18e4      	addlt	r4, r4, r3
 800b9ac:	f000 fbc6 	bl	800c13c <__malloc_lock>
 800b9b0:	4a1f      	ldr	r2, [pc, #124]	; (800ba30 <_free_r+0x98>)
 800b9b2:	6813      	ldr	r3, [r2, #0]
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	b933      	cbnz	r3, 800b9c6 <_free_r+0x2e>
 800b9b8:	6063      	str	r3, [r4, #4]
 800b9ba:	6014      	str	r4, [r2, #0]
 800b9bc:	4628      	mov	r0, r5
 800b9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c2:	f000 bbbc 	b.w	800c13e <__malloc_unlock>
 800b9c6:	42a3      	cmp	r3, r4
 800b9c8:	d90c      	bls.n	800b9e4 <_free_r+0x4c>
 800b9ca:	6821      	ldr	r1, [r4, #0]
 800b9cc:	1862      	adds	r2, r4, r1
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	bf04      	itt	eq
 800b9d2:	681a      	ldreq	r2, [r3, #0]
 800b9d4:	685b      	ldreq	r3, [r3, #4]
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	bf04      	itt	eq
 800b9da:	1852      	addeq	r2, r2, r1
 800b9dc:	6022      	streq	r2, [r4, #0]
 800b9de:	6004      	str	r4, [r0, #0]
 800b9e0:	e7ec      	b.n	800b9bc <_free_r+0x24>
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	b10a      	cbz	r2, 800b9ec <_free_r+0x54>
 800b9e8:	42a2      	cmp	r2, r4
 800b9ea:	d9fa      	bls.n	800b9e2 <_free_r+0x4a>
 800b9ec:	6819      	ldr	r1, [r3, #0]
 800b9ee:	1858      	adds	r0, r3, r1
 800b9f0:	42a0      	cmp	r0, r4
 800b9f2:	d10b      	bne.n	800ba0c <_free_r+0x74>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	4401      	add	r1, r0
 800b9f8:	1858      	adds	r0, r3, r1
 800b9fa:	4282      	cmp	r2, r0
 800b9fc:	6019      	str	r1, [r3, #0]
 800b9fe:	d1dd      	bne.n	800b9bc <_free_r+0x24>
 800ba00:	6810      	ldr	r0, [r2, #0]
 800ba02:	6852      	ldr	r2, [r2, #4]
 800ba04:	605a      	str	r2, [r3, #4]
 800ba06:	4401      	add	r1, r0
 800ba08:	6019      	str	r1, [r3, #0]
 800ba0a:	e7d7      	b.n	800b9bc <_free_r+0x24>
 800ba0c:	d902      	bls.n	800ba14 <_free_r+0x7c>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	e7d3      	b.n	800b9bc <_free_r+0x24>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	1821      	adds	r1, r4, r0
 800ba18:	428a      	cmp	r2, r1
 800ba1a:	bf04      	itt	eq
 800ba1c:	6811      	ldreq	r1, [r2, #0]
 800ba1e:	6852      	ldreq	r2, [r2, #4]
 800ba20:	6062      	str	r2, [r4, #4]
 800ba22:	bf04      	itt	eq
 800ba24:	1809      	addeq	r1, r1, r0
 800ba26:	6021      	streq	r1, [r4, #0]
 800ba28:	605c      	str	r4, [r3, #4]
 800ba2a:	e7c7      	b.n	800b9bc <_free_r+0x24>
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20008110 	.word	0x20008110

0800ba34 <_malloc_r>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	1ccd      	adds	r5, r1, #3
 800ba38:	f025 0503 	bic.w	r5, r5, #3
 800ba3c:	3508      	adds	r5, #8
 800ba3e:	2d0c      	cmp	r5, #12
 800ba40:	bf38      	it	cc
 800ba42:	250c      	movcc	r5, #12
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	4606      	mov	r6, r0
 800ba48:	db01      	blt.n	800ba4e <_malloc_r+0x1a>
 800ba4a:	42a9      	cmp	r1, r5
 800ba4c:	d903      	bls.n	800ba56 <_malloc_r+0x22>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	2000      	movs	r0, #0
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
 800ba56:	f000 fb71 	bl	800c13c <__malloc_lock>
 800ba5a:	4a21      	ldr	r2, [pc, #132]	; (800bae0 <_malloc_r+0xac>)
 800ba5c:	6814      	ldr	r4, [r2, #0]
 800ba5e:	4621      	mov	r1, r4
 800ba60:	b991      	cbnz	r1, 800ba88 <_malloc_r+0x54>
 800ba62:	4c20      	ldr	r4, [pc, #128]	; (800bae4 <_malloc_r+0xb0>)
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	b91b      	cbnz	r3, 800ba70 <_malloc_r+0x3c>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f8b9 	bl	800bbe0 <_sbrk_r>
 800ba6e:	6020      	str	r0, [r4, #0]
 800ba70:	4629      	mov	r1, r5
 800ba72:	4630      	mov	r0, r6
 800ba74:	f000 f8b4 	bl	800bbe0 <_sbrk_r>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d124      	bne.n	800bac6 <_malloc_r+0x92>
 800ba7c:	230c      	movs	r3, #12
 800ba7e:	6033      	str	r3, [r6, #0]
 800ba80:	4630      	mov	r0, r6
 800ba82:	f000 fb5c 	bl	800c13e <__malloc_unlock>
 800ba86:	e7e4      	b.n	800ba52 <_malloc_r+0x1e>
 800ba88:	680b      	ldr	r3, [r1, #0]
 800ba8a:	1b5b      	subs	r3, r3, r5
 800ba8c:	d418      	bmi.n	800bac0 <_malloc_r+0x8c>
 800ba8e:	2b0b      	cmp	r3, #11
 800ba90:	d90f      	bls.n	800bab2 <_malloc_r+0x7e>
 800ba92:	600b      	str	r3, [r1, #0]
 800ba94:	50cd      	str	r5, [r1, r3]
 800ba96:	18cc      	adds	r4, r1, r3
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f000 fb50 	bl	800c13e <__malloc_unlock>
 800ba9e:	f104 000b 	add.w	r0, r4, #11
 800baa2:	1d23      	adds	r3, r4, #4
 800baa4:	f020 0007 	bic.w	r0, r0, #7
 800baa8:	1ac3      	subs	r3, r0, r3
 800baaa:	d0d3      	beq.n	800ba54 <_malloc_r+0x20>
 800baac:	425a      	negs	r2, r3
 800baae:	50e2      	str	r2, [r4, r3]
 800bab0:	e7d0      	b.n	800ba54 <_malloc_r+0x20>
 800bab2:	428c      	cmp	r4, r1
 800bab4:	684b      	ldr	r3, [r1, #4]
 800bab6:	bf16      	itet	ne
 800bab8:	6063      	strne	r3, [r4, #4]
 800baba:	6013      	streq	r3, [r2, #0]
 800babc:	460c      	movne	r4, r1
 800babe:	e7eb      	b.n	800ba98 <_malloc_r+0x64>
 800bac0:	460c      	mov	r4, r1
 800bac2:	6849      	ldr	r1, [r1, #4]
 800bac4:	e7cc      	b.n	800ba60 <_malloc_r+0x2c>
 800bac6:	1cc4      	adds	r4, r0, #3
 800bac8:	f024 0403 	bic.w	r4, r4, #3
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d005      	beq.n	800badc <_malloc_r+0xa8>
 800bad0:	1a21      	subs	r1, r4, r0
 800bad2:	4630      	mov	r0, r6
 800bad4:	f000 f884 	bl	800bbe0 <_sbrk_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d0cf      	beq.n	800ba7c <_malloc_r+0x48>
 800badc:	6025      	str	r5, [r4, #0]
 800bade:	e7db      	b.n	800ba98 <_malloc_r+0x64>
 800bae0:	20008110 	.word	0x20008110
 800bae4:	20008114 	.word	0x20008114

0800bae8 <iprintf>:
 800bae8:	b40f      	push	{r0, r1, r2, r3}
 800baea:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <iprintf+0x2c>)
 800baec:	b513      	push	{r0, r1, r4, lr}
 800baee:	681c      	ldr	r4, [r3, #0]
 800baf0:	b124      	cbz	r4, 800bafc <iprintf+0x14>
 800baf2:	69a3      	ldr	r3, [r4, #24]
 800baf4:	b913      	cbnz	r3, 800bafc <iprintf+0x14>
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 fa32 	bl	800bf60 <__sinit>
 800bafc:	ab05      	add	r3, sp, #20
 800bafe:	9a04      	ldr	r2, [sp, #16]
 800bb00:	68a1      	ldr	r1, [r4, #8]
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 fb45 	bl	800c194 <_vfiprintf_r>
 800bb0a:	b002      	add	sp, #8
 800bb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb10:	b004      	add	sp, #16
 800bb12:	4770      	bx	lr
 800bb14:	2000002c 	.word	0x2000002c

0800bb18 <_puts_r>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	460e      	mov	r6, r1
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b118      	cbz	r0, 800bb28 <_puts_r+0x10>
 800bb20:	6983      	ldr	r3, [r0, #24]
 800bb22:	b90b      	cbnz	r3, 800bb28 <_puts_r+0x10>
 800bb24:	f000 fa1c 	bl	800bf60 <__sinit>
 800bb28:	69ab      	ldr	r3, [r5, #24]
 800bb2a:	68ac      	ldr	r4, [r5, #8]
 800bb2c:	b913      	cbnz	r3, 800bb34 <_puts_r+0x1c>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 fa16 	bl	800bf60 <__sinit>
 800bb34:	4b23      	ldr	r3, [pc, #140]	; (800bbc4 <_puts_r+0xac>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d117      	bne.n	800bb6a <_puts_r+0x52>
 800bb3a:	686c      	ldr	r4, [r5, #4]
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	071b      	lsls	r3, r3, #28
 800bb40:	d51d      	bpl.n	800bb7e <_puts_r+0x66>
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	b1db      	cbz	r3, 800bb7e <_puts_r+0x66>
 800bb46:	3e01      	subs	r6, #1
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	b9e9      	cbnz	r1, 800bb90 <_puts_r+0x78>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	da2e      	bge.n	800bbb6 <_puts_r+0x9e>
 800bb58:	4622      	mov	r2, r4
 800bb5a:	210a      	movs	r1, #10
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f000 f84f 	bl	800bc00 <__swbuf_r>
 800bb62:	3001      	adds	r0, #1
 800bb64:	d011      	beq.n	800bb8a <_puts_r+0x72>
 800bb66:	200a      	movs	r0, #10
 800bb68:	e011      	b.n	800bb8e <_puts_r+0x76>
 800bb6a:	4b17      	ldr	r3, [pc, #92]	; (800bbc8 <_puts_r+0xb0>)
 800bb6c:	429c      	cmp	r4, r3
 800bb6e:	d101      	bne.n	800bb74 <_puts_r+0x5c>
 800bb70:	68ac      	ldr	r4, [r5, #8]
 800bb72:	e7e3      	b.n	800bb3c <_puts_r+0x24>
 800bb74:	4b15      	ldr	r3, [pc, #84]	; (800bbcc <_puts_r+0xb4>)
 800bb76:	429c      	cmp	r4, r3
 800bb78:	bf08      	it	eq
 800bb7a:	68ec      	ldreq	r4, [r5, #12]
 800bb7c:	e7de      	b.n	800bb3c <_puts_r+0x24>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f000 f88f 	bl	800bca4 <__swsetup_r>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d0dd      	beq.n	800bb46 <_puts_r+0x2e>
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	da04      	bge.n	800bb9e <_puts_r+0x86>
 800bb94:	69a2      	ldr	r2, [r4, #24]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	dc06      	bgt.n	800bba8 <_puts_r+0x90>
 800bb9a:	290a      	cmp	r1, #10
 800bb9c:	d004      	beq.n	800bba8 <_puts_r+0x90>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	6022      	str	r2, [r4, #0]
 800bba4:	7019      	strb	r1, [r3, #0]
 800bba6:	e7cf      	b.n	800bb48 <_puts_r+0x30>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f000 f828 	bl	800bc00 <__swbuf_r>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d1c9      	bne.n	800bb48 <_puts_r+0x30>
 800bbb4:	e7e9      	b.n	800bb8a <_puts_r+0x72>
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	200a      	movs	r0, #10
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	6022      	str	r2, [r4, #0]
 800bbbe:	7018      	strb	r0, [r3, #0]
 800bbc0:	e7e5      	b.n	800bb8e <_puts_r+0x76>
 800bbc2:	bf00      	nop
 800bbc4:	0800cb68 	.word	0x0800cb68
 800bbc8:	0800cb88 	.word	0x0800cb88
 800bbcc:	0800cb48 	.word	0x0800cb48

0800bbd0 <puts>:
 800bbd0:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <puts+0xc>)
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	f7ff bf9f 	b.w	800bb18 <_puts_r>
 800bbda:	bf00      	nop
 800bbdc:	2000002c 	.word	0x2000002c

0800bbe0 <_sbrk_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4c06      	ldr	r4, [pc, #24]	; (800bbfc <_sbrk_r+0x1c>)
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	f7f5 f968 	bl	8000ec0 <_sbrk>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d102      	bne.n	800bbfa <_sbrk_r+0x1a>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	b103      	cbz	r3, 800bbfa <_sbrk_r+0x1a>
 800bbf8:	602b      	str	r3, [r5, #0]
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	20009408 	.word	0x20009408

0800bc00 <__swbuf_r>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	460e      	mov	r6, r1
 800bc04:	4614      	mov	r4, r2
 800bc06:	4605      	mov	r5, r0
 800bc08:	b118      	cbz	r0, 800bc12 <__swbuf_r+0x12>
 800bc0a:	6983      	ldr	r3, [r0, #24]
 800bc0c:	b90b      	cbnz	r3, 800bc12 <__swbuf_r+0x12>
 800bc0e:	f000 f9a7 	bl	800bf60 <__sinit>
 800bc12:	4b21      	ldr	r3, [pc, #132]	; (800bc98 <__swbuf_r+0x98>)
 800bc14:	429c      	cmp	r4, r3
 800bc16:	d12a      	bne.n	800bc6e <__swbuf_r+0x6e>
 800bc18:	686c      	ldr	r4, [r5, #4]
 800bc1a:	69a3      	ldr	r3, [r4, #24]
 800bc1c:	60a3      	str	r3, [r4, #8]
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	071a      	lsls	r2, r3, #28
 800bc22:	d52e      	bpl.n	800bc82 <__swbuf_r+0x82>
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	b363      	cbz	r3, 800bc82 <__swbuf_r+0x82>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	6820      	ldr	r0, [r4, #0]
 800bc2c:	1ac0      	subs	r0, r0, r3
 800bc2e:	6963      	ldr	r3, [r4, #20]
 800bc30:	b2f6      	uxtb	r6, r6
 800bc32:	4283      	cmp	r3, r0
 800bc34:	4637      	mov	r7, r6
 800bc36:	dc04      	bgt.n	800bc42 <__swbuf_r+0x42>
 800bc38:	4621      	mov	r1, r4
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f000 f926 	bl	800be8c <_fflush_r>
 800bc40:	bb28      	cbnz	r0, 800bc8e <__swbuf_r+0x8e>
 800bc42:	68a3      	ldr	r3, [r4, #8]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	6022      	str	r2, [r4, #0]
 800bc4e:	701e      	strb	r6, [r3, #0]
 800bc50:	6963      	ldr	r3, [r4, #20]
 800bc52:	3001      	adds	r0, #1
 800bc54:	4283      	cmp	r3, r0
 800bc56:	d004      	beq.n	800bc62 <__swbuf_r+0x62>
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	07db      	lsls	r3, r3, #31
 800bc5c:	d519      	bpl.n	800bc92 <__swbuf_r+0x92>
 800bc5e:	2e0a      	cmp	r6, #10
 800bc60:	d117      	bne.n	800bc92 <__swbuf_r+0x92>
 800bc62:	4621      	mov	r1, r4
 800bc64:	4628      	mov	r0, r5
 800bc66:	f000 f911 	bl	800be8c <_fflush_r>
 800bc6a:	b190      	cbz	r0, 800bc92 <__swbuf_r+0x92>
 800bc6c:	e00f      	b.n	800bc8e <__swbuf_r+0x8e>
 800bc6e:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <__swbuf_r+0x9c>)
 800bc70:	429c      	cmp	r4, r3
 800bc72:	d101      	bne.n	800bc78 <__swbuf_r+0x78>
 800bc74:	68ac      	ldr	r4, [r5, #8]
 800bc76:	e7d0      	b.n	800bc1a <__swbuf_r+0x1a>
 800bc78:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <__swbuf_r+0xa0>)
 800bc7a:	429c      	cmp	r4, r3
 800bc7c:	bf08      	it	eq
 800bc7e:	68ec      	ldreq	r4, [r5, #12]
 800bc80:	e7cb      	b.n	800bc1a <__swbuf_r+0x1a>
 800bc82:	4621      	mov	r1, r4
 800bc84:	4628      	mov	r0, r5
 800bc86:	f000 f80d 	bl	800bca4 <__swsetup_r>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d0cc      	beq.n	800bc28 <__swbuf_r+0x28>
 800bc8e:	f04f 37ff 	mov.w	r7, #4294967295
 800bc92:	4638      	mov	r0, r7
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc96:	bf00      	nop
 800bc98:	0800cb68 	.word	0x0800cb68
 800bc9c:	0800cb88 	.word	0x0800cb88
 800bca0:	0800cb48 	.word	0x0800cb48

0800bca4 <__swsetup_r>:
 800bca4:	4b32      	ldr	r3, [pc, #200]	; (800bd70 <__swsetup_r+0xcc>)
 800bca6:	b570      	push	{r4, r5, r6, lr}
 800bca8:	681d      	ldr	r5, [r3, #0]
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460c      	mov	r4, r1
 800bcae:	b125      	cbz	r5, 800bcba <__swsetup_r+0x16>
 800bcb0:	69ab      	ldr	r3, [r5, #24]
 800bcb2:	b913      	cbnz	r3, 800bcba <__swsetup_r+0x16>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f000 f953 	bl	800bf60 <__sinit>
 800bcba:	4b2e      	ldr	r3, [pc, #184]	; (800bd74 <__swsetup_r+0xd0>)
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	d10f      	bne.n	800bce0 <__swsetup_r+0x3c>
 800bcc0:	686c      	ldr	r4, [r5, #4]
 800bcc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	0715      	lsls	r5, r2, #28
 800bcca:	d42c      	bmi.n	800bd26 <__swsetup_r+0x82>
 800bccc:	06d0      	lsls	r0, r2, #27
 800bcce:	d411      	bmi.n	800bcf4 <__swsetup_r+0x50>
 800bcd0:	2209      	movs	r2, #9
 800bcd2:	6032      	str	r2, [r6, #0]
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	e03e      	b.n	800bd5e <__swsetup_r+0xba>
 800bce0:	4b25      	ldr	r3, [pc, #148]	; (800bd78 <__swsetup_r+0xd4>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d101      	bne.n	800bcea <__swsetup_r+0x46>
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	e7eb      	b.n	800bcc2 <__swsetup_r+0x1e>
 800bcea:	4b24      	ldr	r3, [pc, #144]	; (800bd7c <__swsetup_r+0xd8>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	bf08      	it	eq
 800bcf0:	68ec      	ldreq	r4, [r5, #12]
 800bcf2:	e7e6      	b.n	800bcc2 <__swsetup_r+0x1e>
 800bcf4:	0751      	lsls	r1, r2, #29
 800bcf6:	d512      	bpl.n	800bd1e <__swsetup_r+0x7a>
 800bcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfa:	b141      	cbz	r1, 800bd0e <__swsetup_r+0x6a>
 800bcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d002      	beq.n	800bd0a <__swsetup_r+0x66>
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fe47 	bl	800b998 <_free_r>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	2300      	movs	r3, #0
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0308 	orr.w	r3, r3, #8
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	6923      	ldr	r3, [r4, #16]
 800bd28:	b94b      	cbnz	r3, 800bd3e <__swsetup_r+0x9a>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd34:	d003      	beq.n	800bd3e <__swsetup_r+0x9a>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f000 f9bf 	bl	800c0bc <__smakebuf_r>
 800bd3e:	89a2      	ldrh	r2, [r4, #12]
 800bd40:	f012 0301 	ands.w	r3, r2, #1
 800bd44:	d00c      	beq.n	800bd60 <__swsetup_r+0xbc>
 800bd46:	2300      	movs	r3, #0
 800bd48:	60a3      	str	r3, [r4, #8]
 800bd4a:	6963      	ldr	r3, [r4, #20]
 800bd4c:	425b      	negs	r3, r3
 800bd4e:	61a3      	str	r3, [r4, #24]
 800bd50:	6923      	ldr	r3, [r4, #16]
 800bd52:	b953      	cbnz	r3, 800bd6a <__swsetup_r+0xc6>
 800bd54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bd5c:	d1ba      	bne.n	800bcd4 <__swsetup_r+0x30>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	0792      	lsls	r2, r2, #30
 800bd62:	bf58      	it	pl
 800bd64:	6963      	ldrpl	r3, [r4, #20]
 800bd66:	60a3      	str	r3, [r4, #8]
 800bd68:	e7f2      	b.n	800bd50 <__swsetup_r+0xac>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e7f7      	b.n	800bd5e <__swsetup_r+0xba>
 800bd6e:	bf00      	nop
 800bd70:	2000002c 	.word	0x2000002c
 800bd74:	0800cb68 	.word	0x0800cb68
 800bd78:	0800cb88 	.word	0x0800cb88
 800bd7c:	0800cb48 	.word	0x0800cb48

0800bd80 <__sflush_r>:
 800bd80:	898a      	ldrh	r2, [r1, #12]
 800bd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd86:	4605      	mov	r5, r0
 800bd88:	0710      	lsls	r0, r2, #28
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	d458      	bmi.n	800be40 <__sflush_r+0xc0>
 800bd8e:	684b      	ldr	r3, [r1, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dc05      	bgt.n	800bda0 <__sflush_r+0x20>
 800bd94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	dc02      	bgt.n	800bda0 <__sflush_r+0x20>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bda2:	2e00      	cmp	r6, #0
 800bda4:	d0f9      	beq.n	800bd9a <__sflush_r+0x1a>
 800bda6:	2300      	movs	r3, #0
 800bda8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdac:	682f      	ldr	r7, [r5, #0]
 800bdae:	6a21      	ldr	r1, [r4, #32]
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	d032      	beq.n	800be1a <__sflush_r+0x9a>
 800bdb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	075a      	lsls	r2, r3, #29
 800bdba:	d505      	bpl.n	800bdc8 <__sflush_r+0x48>
 800bdbc:	6863      	ldr	r3, [r4, #4]
 800bdbe:	1ac0      	subs	r0, r0, r3
 800bdc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdc2:	b10b      	cbz	r3, 800bdc8 <__sflush_r+0x48>
 800bdc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdc6:	1ac0      	subs	r0, r0, r3
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4602      	mov	r2, r0
 800bdcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdce:	6a21      	ldr	r1, [r4, #32]
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b0      	blx	r6
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	d106      	bne.n	800bde8 <__sflush_r+0x68>
 800bdda:	6829      	ldr	r1, [r5, #0]
 800bddc:	291d      	cmp	r1, #29
 800bdde:	d848      	bhi.n	800be72 <__sflush_r+0xf2>
 800bde0:	4a29      	ldr	r2, [pc, #164]	; (800be88 <__sflush_r+0x108>)
 800bde2:	40ca      	lsrs	r2, r1
 800bde4:	07d6      	lsls	r6, r2, #31
 800bde6:	d544      	bpl.n	800be72 <__sflush_r+0xf2>
 800bde8:	2200      	movs	r2, #0
 800bdea:	6062      	str	r2, [r4, #4]
 800bdec:	04d9      	lsls	r1, r3, #19
 800bdee:	6922      	ldr	r2, [r4, #16]
 800bdf0:	6022      	str	r2, [r4, #0]
 800bdf2:	d504      	bpl.n	800bdfe <__sflush_r+0x7e>
 800bdf4:	1c42      	adds	r2, r0, #1
 800bdf6:	d101      	bne.n	800bdfc <__sflush_r+0x7c>
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	b903      	cbnz	r3, 800bdfe <__sflush_r+0x7e>
 800bdfc:	6560      	str	r0, [r4, #84]	; 0x54
 800bdfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be00:	602f      	str	r7, [r5, #0]
 800be02:	2900      	cmp	r1, #0
 800be04:	d0c9      	beq.n	800bd9a <__sflush_r+0x1a>
 800be06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be0a:	4299      	cmp	r1, r3
 800be0c:	d002      	beq.n	800be14 <__sflush_r+0x94>
 800be0e:	4628      	mov	r0, r5
 800be10:	f7ff fdc2 	bl	800b998 <_free_r>
 800be14:	2000      	movs	r0, #0
 800be16:	6360      	str	r0, [r4, #52]	; 0x34
 800be18:	e7c0      	b.n	800bd9c <__sflush_r+0x1c>
 800be1a:	2301      	movs	r3, #1
 800be1c:	4628      	mov	r0, r5
 800be1e:	47b0      	blx	r6
 800be20:	1c41      	adds	r1, r0, #1
 800be22:	d1c8      	bne.n	800bdb6 <__sflush_r+0x36>
 800be24:	682b      	ldr	r3, [r5, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0c5      	beq.n	800bdb6 <__sflush_r+0x36>
 800be2a:	2b1d      	cmp	r3, #29
 800be2c:	d001      	beq.n	800be32 <__sflush_r+0xb2>
 800be2e:	2b16      	cmp	r3, #22
 800be30:	d101      	bne.n	800be36 <__sflush_r+0xb6>
 800be32:	602f      	str	r7, [r5, #0]
 800be34:	e7b1      	b.n	800bd9a <__sflush_r+0x1a>
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3c:	81a3      	strh	r3, [r4, #12]
 800be3e:	e7ad      	b.n	800bd9c <__sflush_r+0x1c>
 800be40:	690f      	ldr	r7, [r1, #16]
 800be42:	2f00      	cmp	r7, #0
 800be44:	d0a9      	beq.n	800bd9a <__sflush_r+0x1a>
 800be46:	0793      	lsls	r3, r2, #30
 800be48:	680e      	ldr	r6, [r1, #0]
 800be4a:	bf08      	it	eq
 800be4c:	694b      	ldreq	r3, [r1, #20]
 800be4e:	600f      	str	r7, [r1, #0]
 800be50:	bf18      	it	ne
 800be52:	2300      	movne	r3, #0
 800be54:	eba6 0807 	sub.w	r8, r6, r7
 800be58:	608b      	str	r3, [r1, #8]
 800be5a:	f1b8 0f00 	cmp.w	r8, #0
 800be5e:	dd9c      	ble.n	800bd9a <__sflush_r+0x1a>
 800be60:	4643      	mov	r3, r8
 800be62:	463a      	mov	r2, r7
 800be64:	6a21      	ldr	r1, [r4, #32]
 800be66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be68:	4628      	mov	r0, r5
 800be6a:	47b0      	blx	r6
 800be6c:	2800      	cmp	r0, #0
 800be6e:	dc06      	bgt.n	800be7e <__sflush_r+0xfe>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	e78e      	b.n	800bd9c <__sflush_r+0x1c>
 800be7e:	4407      	add	r7, r0
 800be80:	eba8 0800 	sub.w	r8, r8, r0
 800be84:	e7e9      	b.n	800be5a <__sflush_r+0xda>
 800be86:	bf00      	nop
 800be88:	20400001 	.word	0x20400001

0800be8c <_fflush_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	690b      	ldr	r3, [r1, #16]
 800be90:	4605      	mov	r5, r0
 800be92:	460c      	mov	r4, r1
 800be94:	b1db      	cbz	r3, 800bece <_fflush_r+0x42>
 800be96:	b118      	cbz	r0, 800bea0 <_fflush_r+0x14>
 800be98:	6983      	ldr	r3, [r0, #24]
 800be9a:	b90b      	cbnz	r3, 800bea0 <_fflush_r+0x14>
 800be9c:	f000 f860 	bl	800bf60 <__sinit>
 800bea0:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <_fflush_r+0x48>)
 800bea2:	429c      	cmp	r4, r3
 800bea4:	d109      	bne.n	800beba <_fflush_r+0x2e>
 800bea6:	686c      	ldr	r4, [r5, #4]
 800bea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beac:	b17b      	cbz	r3, 800bece <_fflush_r+0x42>
 800beae:	4621      	mov	r1, r4
 800beb0:	4628      	mov	r0, r5
 800beb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beb6:	f7ff bf63 	b.w	800bd80 <__sflush_r>
 800beba:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <_fflush_r+0x4c>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d101      	bne.n	800bec4 <_fflush_r+0x38>
 800bec0:	68ac      	ldr	r4, [r5, #8]
 800bec2:	e7f1      	b.n	800bea8 <_fflush_r+0x1c>
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <_fflush_r+0x50>)
 800bec6:	429c      	cmp	r4, r3
 800bec8:	bf08      	it	eq
 800beca:	68ec      	ldreq	r4, [r5, #12]
 800becc:	e7ec      	b.n	800bea8 <_fflush_r+0x1c>
 800bece:	2000      	movs	r0, #0
 800bed0:	bd38      	pop	{r3, r4, r5, pc}
 800bed2:	bf00      	nop
 800bed4:	0800cb68 	.word	0x0800cb68
 800bed8:	0800cb88 	.word	0x0800cb88
 800bedc:	0800cb48 	.word	0x0800cb48

0800bee0 <std>:
 800bee0:	2300      	movs	r3, #0
 800bee2:	b510      	push	{r4, lr}
 800bee4:	4604      	mov	r4, r0
 800bee6:	e9c0 3300 	strd	r3, r3, [r0]
 800beea:	6083      	str	r3, [r0, #8]
 800beec:	8181      	strh	r1, [r0, #12]
 800beee:	6643      	str	r3, [r0, #100]	; 0x64
 800bef0:	81c2      	strh	r2, [r0, #14]
 800bef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bef6:	6183      	str	r3, [r0, #24]
 800bef8:	4619      	mov	r1, r3
 800befa:	2208      	movs	r2, #8
 800befc:	305c      	adds	r0, #92	; 0x5c
 800befe:	f7ff fd42 	bl	800b986 <memset>
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <std+0x38>)
 800bf04:	6263      	str	r3, [r4, #36]	; 0x24
 800bf06:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <std+0x3c>)
 800bf08:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf0a:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <std+0x40>)
 800bf0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf0e:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <std+0x44>)
 800bf10:	6224      	str	r4, [r4, #32]
 800bf12:	6323      	str	r3, [r4, #48]	; 0x30
 800bf14:	bd10      	pop	{r4, pc}
 800bf16:	bf00      	nop
 800bf18:	0800c6d1 	.word	0x0800c6d1
 800bf1c:	0800c6f3 	.word	0x0800c6f3
 800bf20:	0800c72b 	.word	0x0800c72b
 800bf24:	0800c74f 	.word	0x0800c74f

0800bf28 <_cleanup_r>:
 800bf28:	4901      	ldr	r1, [pc, #4]	; (800bf30 <_cleanup_r+0x8>)
 800bf2a:	f000 b885 	b.w	800c038 <_fwalk_reent>
 800bf2e:	bf00      	nop
 800bf30:	0800be8d 	.word	0x0800be8d

0800bf34 <__sfmoreglue>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	1e4a      	subs	r2, r1, #1
 800bf38:	2568      	movs	r5, #104	; 0x68
 800bf3a:	4355      	muls	r5, r2
 800bf3c:	460e      	mov	r6, r1
 800bf3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf42:	f7ff fd77 	bl	800ba34 <_malloc_r>
 800bf46:	4604      	mov	r4, r0
 800bf48:	b140      	cbz	r0, 800bf5c <__sfmoreglue+0x28>
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	e9c0 1600 	strd	r1, r6, [r0]
 800bf50:	300c      	adds	r0, #12
 800bf52:	60a0      	str	r0, [r4, #8]
 800bf54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf58:	f7ff fd15 	bl	800b986 <memset>
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}

0800bf60 <__sinit>:
 800bf60:	6983      	ldr	r3, [r0, #24]
 800bf62:	b510      	push	{r4, lr}
 800bf64:	4604      	mov	r4, r0
 800bf66:	bb33      	cbnz	r3, 800bfb6 <__sinit+0x56>
 800bf68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bf6c:	6503      	str	r3, [r0, #80]	; 0x50
 800bf6e:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <__sinit+0x58>)
 800bf70:	4a12      	ldr	r2, [pc, #72]	; (800bfbc <__sinit+0x5c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6282      	str	r2, [r0, #40]	; 0x28
 800bf76:	4298      	cmp	r0, r3
 800bf78:	bf04      	itt	eq
 800bf7a:	2301      	moveq	r3, #1
 800bf7c:	6183      	streq	r3, [r0, #24]
 800bf7e:	f000 f81f 	bl	800bfc0 <__sfp>
 800bf82:	6060      	str	r0, [r4, #4]
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 f81b 	bl	800bfc0 <__sfp>
 800bf8a:	60a0      	str	r0, [r4, #8]
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 f817 	bl	800bfc0 <__sfp>
 800bf92:	2200      	movs	r2, #0
 800bf94:	60e0      	str	r0, [r4, #12]
 800bf96:	2104      	movs	r1, #4
 800bf98:	6860      	ldr	r0, [r4, #4]
 800bf9a:	f7ff ffa1 	bl	800bee0 <std>
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	2109      	movs	r1, #9
 800bfa2:	68a0      	ldr	r0, [r4, #8]
 800bfa4:	f7ff ff9c 	bl	800bee0 <std>
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	2112      	movs	r1, #18
 800bfac:	68e0      	ldr	r0, [r4, #12]
 800bfae:	f7ff ff97 	bl	800bee0 <std>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	61a3      	str	r3, [r4, #24]
 800bfb6:	bd10      	pop	{r4, pc}
 800bfb8:	0800cb44 	.word	0x0800cb44
 800bfbc:	0800bf29 	.word	0x0800bf29

0800bfc0 <__sfp>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	4b1b      	ldr	r3, [pc, #108]	; (800c030 <__sfp+0x70>)
 800bfc4:	681e      	ldr	r6, [r3, #0]
 800bfc6:	69b3      	ldr	r3, [r6, #24]
 800bfc8:	4607      	mov	r7, r0
 800bfca:	b913      	cbnz	r3, 800bfd2 <__sfp+0x12>
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f7ff ffc7 	bl	800bf60 <__sinit>
 800bfd2:	3648      	adds	r6, #72	; 0x48
 800bfd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	d503      	bpl.n	800bfe4 <__sfp+0x24>
 800bfdc:	6833      	ldr	r3, [r6, #0]
 800bfde:	b133      	cbz	r3, 800bfee <__sfp+0x2e>
 800bfe0:	6836      	ldr	r6, [r6, #0]
 800bfe2:	e7f7      	b.n	800bfd4 <__sfp+0x14>
 800bfe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfe8:	b16d      	cbz	r5, 800c006 <__sfp+0x46>
 800bfea:	3468      	adds	r4, #104	; 0x68
 800bfec:	e7f4      	b.n	800bfd8 <__sfp+0x18>
 800bfee:	2104      	movs	r1, #4
 800bff0:	4638      	mov	r0, r7
 800bff2:	f7ff ff9f 	bl	800bf34 <__sfmoreglue>
 800bff6:	6030      	str	r0, [r6, #0]
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d1f1      	bne.n	800bfe0 <__sfp+0x20>
 800bffc:	230c      	movs	r3, #12
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	4604      	mov	r4, r0
 800c002:	4620      	mov	r0, r4
 800c004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c006:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <__sfp+0x74>)
 800c008:	6665      	str	r5, [r4, #100]	; 0x64
 800c00a:	e9c4 5500 	strd	r5, r5, [r4]
 800c00e:	60a5      	str	r5, [r4, #8]
 800c010:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c014:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c018:	2208      	movs	r2, #8
 800c01a:	4629      	mov	r1, r5
 800c01c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c020:	f7ff fcb1 	bl	800b986 <memset>
 800c024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c02c:	e7e9      	b.n	800c002 <__sfp+0x42>
 800c02e:	bf00      	nop
 800c030:	0800cb44 	.word	0x0800cb44
 800c034:	ffff0001 	.word	0xffff0001

0800c038 <_fwalk_reent>:
 800c038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c03c:	4680      	mov	r8, r0
 800c03e:	4689      	mov	r9, r1
 800c040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c044:	2600      	movs	r6, #0
 800c046:	b914      	cbnz	r4, 800c04e <_fwalk_reent+0x16>
 800c048:	4630      	mov	r0, r6
 800c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c052:	3f01      	subs	r7, #1
 800c054:	d501      	bpl.n	800c05a <_fwalk_reent+0x22>
 800c056:	6824      	ldr	r4, [r4, #0]
 800c058:	e7f5      	b.n	800c046 <_fwalk_reent+0xe>
 800c05a:	89ab      	ldrh	r3, [r5, #12]
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d907      	bls.n	800c070 <_fwalk_reent+0x38>
 800c060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c064:	3301      	adds	r3, #1
 800c066:	d003      	beq.n	800c070 <_fwalk_reent+0x38>
 800c068:	4629      	mov	r1, r5
 800c06a:	4640      	mov	r0, r8
 800c06c:	47c8      	blx	r9
 800c06e:	4306      	orrs	r6, r0
 800c070:	3568      	adds	r5, #104	; 0x68
 800c072:	e7ee      	b.n	800c052 <_fwalk_reent+0x1a>

0800c074 <__swhatbuf_r>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	460e      	mov	r6, r1
 800c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07c:	2900      	cmp	r1, #0
 800c07e:	b096      	sub	sp, #88	; 0x58
 800c080:	4614      	mov	r4, r2
 800c082:	461d      	mov	r5, r3
 800c084:	da07      	bge.n	800c096 <__swhatbuf_r+0x22>
 800c086:	2300      	movs	r3, #0
 800c088:	602b      	str	r3, [r5, #0]
 800c08a:	89b3      	ldrh	r3, [r6, #12]
 800c08c:	061a      	lsls	r2, r3, #24
 800c08e:	d410      	bmi.n	800c0b2 <__swhatbuf_r+0x3e>
 800c090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c094:	e00e      	b.n	800c0b4 <__swhatbuf_r+0x40>
 800c096:	466a      	mov	r2, sp
 800c098:	f000 fb80 	bl	800c79c <_fstat_r>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	dbf2      	blt.n	800c086 <__swhatbuf_r+0x12>
 800c0a0:	9a01      	ldr	r2, [sp, #4]
 800c0a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0aa:	425a      	negs	r2, r3
 800c0ac:	415a      	adcs	r2, r3
 800c0ae:	602a      	str	r2, [r5, #0]
 800c0b0:	e7ee      	b.n	800c090 <__swhatbuf_r+0x1c>
 800c0b2:	2340      	movs	r3, #64	; 0x40
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	b016      	add	sp, #88	; 0x58
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}

0800c0bc <__smakebuf_r>:
 800c0bc:	898b      	ldrh	r3, [r1, #12]
 800c0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0c0:	079d      	lsls	r5, r3, #30
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	d507      	bpl.n	800c0d8 <__smakebuf_r+0x1c>
 800c0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	6123      	str	r3, [r4, #16]
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	6163      	str	r3, [r4, #20]
 800c0d4:	b002      	add	sp, #8
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	ab01      	add	r3, sp, #4
 800c0da:	466a      	mov	r2, sp
 800c0dc:	f7ff ffca 	bl	800c074 <__swhatbuf_r>
 800c0e0:	9900      	ldr	r1, [sp, #0]
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7ff fca5 	bl	800ba34 <_malloc_r>
 800c0ea:	b948      	cbnz	r0, 800c100 <__smakebuf_r+0x44>
 800c0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f0:	059a      	lsls	r2, r3, #22
 800c0f2:	d4ef      	bmi.n	800c0d4 <__smakebuf_r+0x18>
 800c0f4:	f023 0303 	bic.w	r3, r3, #3
 800c0f8:	f043 0302 	orr.w	r3, r3, #2
 800c0fc:	81a3      	strh	r3, [r4, #12]
 800c0fe:	e7e3      	b.n	800c0c8 <__smakebuf_r+0xc>
 800c100:	4b0d      	ldr	r3, [pc, #52]	; (800c138 <__smakebuf_r+0x7c>)
 800c102:	62b3      	str	r3, [r6, #40]	; 0x28
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	6020      	str	r0, [r4, #0]
 800c108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	9b00      	ldr	r3, [sp, #0]
 800c110:	6163      	str	r3, [r4, #20]
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	6120      	str	r0, [r4, #16]
 800c116:	b15b      	cbz	r3, 800c130 <__smakebuf_r+0x74>
 800c118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c11c:	4630      	mov	r0, r6
 800c11e:	f000 fb4f 	bl	800c7c0 <_isatty_r>
 800c122:	b128      	cbz	r0, 800c130 <__smakebuf_r+0x74>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f023 0303 	bic.w	r3, r3, #3
 800c12a:	f043 0301 	orr.w	r3, r3, #1
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	431d      	orrs	r5, r3
 800c134:	81a5      	strh	r5, [r4, #12]
 800c136:	e7cd      	b.n	800c0d4 <__smakebuf_r+0x18>
 800c138:	0800bf29 	.word	0x0800bf29

0800c13c <__malloc_lock>:
 800c13c:	4770      	bx	lr

0800c13e <__malloc_unlock>:
 800c13e:	4770      	bx	lr

0800c140 <__sfputc_r>:
 800c140:	6893      	ldr	r3, [r2, #8]
 800c142:	3b01      	subs	r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	b410      	push	{r4}
 800c148:	6093      	str	r3, [r2, #8]
 800c14a:	da08      	bge.n	800c15e <__sfputc_r+0x1e>
 800c14c:	6994      	ldr	r4, [r2, #24]
 800c14e:	42a3      	cmp	r3, r4
 800c150:	db01      	blt.n	800c156 <__sfputc_r+0x16>
 800c152:	290a      	cmp	r1, #10
 800c154:	d103      	bne.n	800c15e <__sfputc_r+0x1e>
 800c156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c15a:	f7ff bd51 	b.w	800bc00 <__swbuf_r>
 800c15e:	6813      	ldr	r3, [r2, #0]
 800c160:	1c58      	adds	r0, r3, #1
 800c162:	6010      	str	r0, [r2, #0]
 800c164:	7019      	strb	r1, [r3, #0]
 800c166:	4608      	mov	r0, r1
 800c168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <__sfputs_r>:
 800c16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c170:	4606      	mov	r6, r0
 800c172:	460f      	mov	r7, r1
 800c174:	4614      	mov	r4, r2
 800c176:	18d5      	adds	r5, r2, r3
 800c178:	42ac      	cmp	r4, r5
 800c17a:	d101      	bne.n	800c180 <__sfputs_r+0x12>
 800c17c:	2000      	movs	r0, #0
 800c17e:	e007      	b.n	800c190 <__sfputs_r+0x22>
 800c180:	463a      	mov	r2, r7
 800c182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c186:	4630      	mov	r0, r6
 800c188:	f7ff ffda 	bl	800c140 <__sfputc_r>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d1f3      	bne.n	800c178 <__sfputs_r+0xa>
 800c190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c194 <_vfiprintf_r>:
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	460c      	mov	r4, r1
 800c19a:	b09d      	sub	sp, #116	; 0x74
 800c19c:	4617      	mov	r7, r2
 800c19e:	461d      	mov	r5, r3
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	b118      	cbz	r0, 800c1ac <_vfiprintf_r+0x18>
 800c1a4:	6983      	ldr	r3, [r0, #24]
 800c1a6:	b90b      	cbnz	r3, 800c1ac <_vfiprintf_r+0x18>
 800c1a8:	f7ff feda 	bl	800bf60 <__sinit>
 800c1ac:	4b7c      	ldr	r3, [pc, #496]	; (800c3a0 <_vfiprintf_r+0x20c>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d158      	bne.n	800c264 <_vfiprintf_r+0xd0>
 800c1b2:	6874      	ldr	r4, [r6, #4]
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	0718      	lsls	r0, r3, #28
 800c1b8:	d55e      	bpl.n	800c278 <_vfiprintf_r+0xe4>
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d05b      	beq.n	800c278 <_vfiprintf_r+0xe4>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c4:	2320      	movs	r3, #32
 800c1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ca:	2330      	movs	r3, #48	; 0x30
 800c1cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1d0:	9503      	str	r5, [sp, #12]
 800c1d2:	f04f 0b01 	mov.w	fp, #1
 800c1d6:	46b8      	mov	r8, r7
 800c1d8:	4645      	mov	r5, r8
 800c1da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1de:	b10b      	cbz	r3, 800c1e4 <_vfiprintf_r+0x50>
 800c1e0:	2b25      	cmp	r3, #37	; 0x25
 800c1e2:	d154      	bne.n	800c28e <_vfiprintf_r+0xfa>
 800c1e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800c1e8:	d00b      	beq.n	800c202 <_vfiprintf_r+0x6e>
 800c1ea:	4653      	mov	r3, sl
 800c1ec:	463a      	mov	r2, r7
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f7ff ffbc 	bl	800c16e <__sfputs_r>
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f000 80c2 	beq.w	800c380 <_vfiprintf_r+0x1ec>
 800c1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fe:	4453      	add	r3, sl
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
 800c202:	f898 3000 	ldrb.w	r3, [r8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	f000 80ba 	beq.w	800c380 <_vfiprintf_r+0x1ec>
 800c20c:	2300      	movs	r3, #0
 800c20e:	f04f 32ff 	mov.w	r2, #4294967295
 800c212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c216:	9304      	str	r3, [sp, #16]
 800c218:	9307      	str	r3, [sp, #28]
 800c21a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c21e:	931a      	str	r3, [sp, #104]	; 0x68
 800c220:	46a8      	mov	r8, r5
 800c222:	2205      	movs	r2, #5
 800c224:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c228:	485e      	ldr	r0, [pc, #376]	; (800c3a4 <_vfiprintf_r+0x210>)
 800c22a:	f7f4 f809 	bl	8000240 <memchr>
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	bb78      	cbnz	r0, 800c292 <_vfiprintf_r+0xfe>
 800c232:	06d9      	lsls	r1, r3, #27
 800c234:	bf44      	itt	mi
 800c236:	2220      	movmi	r2, #32
 800c238:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c23c:	071a      	lsls	r2, r3, #28
 800c23e:	bf44      	itt	mi
 800c240:	222b      	movmi	r2, #43	; 0x2b
 800c242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c246:	782a      	ldrb	r2, [r5, #0]
 800c248:	2a2a      	cmp	r2, #42	; 0x2a
 800c24a:	d02a      	beq.n	800c2a2 <_vfiprintf_r+0x10e>
 800c24c:	9a07      	ldr	r2, [sp, #28]
 800c24e:	46a8      	mov	r8, r5
 800c250:	2000      	movs	r0, #0
 800c252:	250a      	movs	r5, #10
 800c254:	4641      	mov	r1, r8
 800c256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c25a:	3b30      	subs	r3, #48	; 0x30
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d969      	bls.n	800c334 <_vfiprintf_r+0x1a0>
 800c260:	b360      	cbz	r0, 800c2bc <_vfiprintf_r+0x128>
 800c262:	e024      	b.n	800c2ae <_vfiprintf_r+0x11a>
 800c264:	4b50      	ldr	r3, [pc, #320]	; (800c3a8 <_vfiprintf_r+0x214>)
 800c266:	429c      	cmp	r4, r3
 800c268:	d101      	bne.n	800c26e <_vfiprintf_r+0xda>
 800c26a:	68b4      	ldr	r4, [r6, #8]
 800c26c:	e7a2      	b.n	800c1b4 <_vfiprintf_r+0x20>
 800c26e:	4b4f      	ldr	r3, [pc, #316]	; (800c3ac <_vfiprintf_r+0x218>)
 800c270:	429c      	cmp	r4, r3
 800c272:	bf08      	it	eq
 800c274:	68f4      	ldreq	r4, [r6, #12]
 800c276:	e79d      	b.n	800c1b4 <_vfiprintf_r+0x20>
 800c278:	4621      	mov	r1, r4
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7ff fd12 	bl	800bca4 <__swsetup_r>
 800c280:	2800      	cmp	r0, #0
 800c282:	d09d      	beq.n	800c1c0 <_vfiprintf_r+0x2c>
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	b01d      	add	sp, #116	; 0x74
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	46a8      	mov	r8, r5
 800c290:	e7a2      	b.n	800c1d8 <_vfiprintf_r+0x44>
 800c292:	4a44      	ldr	r2, [pc, #272]	; (800c3a4 <_vfiprintf_r+0x210>)
 800c294:	1a80      	subs	r0, r0, r2
 800c296:	fa0b f000 	lsl.w	r0, fp, r0
 800c29a:	4318      	orrs	r0, r3
 800c29c:	9004      	str	r0, [sp, #16]
 800c29e:	4645      	mov	r5, r8
 800c2a0:	e7be      	b.n	800c220 <_vfiprintf_r+0x8c>
 800c2a2:	9a03      	ldr	r2, [sp, #12]
 800c2a4:	1d11      	adds	r1, r2, #4
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	9103      	str	r1, [sp, #12]
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	db01      	blt.n	800c2b2 <_vfiprintf_r+0x11e>
 800c2ae:	9207      	str	r2, [sp, #28]
 800c2b0:	e004      	b.n	800c2bc <_vfiprintf_r+0x128>
 800c2b2:	4252      	negs	r2, r2
 800c2b4:	f043 0302 	orr.w	r3, r3, #2
 800c2b8:	9207      	str	r2, [sp, #28]
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	f898 3000 	ldrb.w	r3, [r8]
 800c2c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2c2:	d10e      	bne.n	800c2e2 <_vfiprintf_r+0x14e>
 800c2c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ca:	d138      	bne.n	800c33e <_vfiprintf_r+0x1aa>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	1d1a      	adds	r2, r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	9203      	str	r2, [sp, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bfb8      	it	lt
 800c2d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2dc:	f108 0802 	add.w	r8, r8, #2
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	4d33      	ldr	r5, [pc, #204]	; (800c3b0 <_vfiprintf_r+0x21c>)
 800c2e4:	f898 1000 	ldrb.w	r1, [r8]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f7f3 ffa8 	bl	8000240 <memchr>
 800c2f0:	b140      	cbz	r0, 800c304 <_vfiprintf_r+0x170>
 800c2f2:	2340      	movs	r3, #64	; 0x40
 800c2f4:	1b40      	subs	r0, r0, r5
 800c2f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2fa:	9b04      	ldr	r3, [sp, #16]
 800c2fc:	4303      	orrs	r3, r0
 800c2fe:	f108 0801 	add.w	r8, r8, #1
 800c302:	9304      	str	r3, [sp, #16]
 800c304:	f898 1000 	ldrb.w	r1, [r8]
 800c308:	482a      	ldr	r0, [pc, #168]	; (800c3b4 <_vfiprintf_r+0x220>)
 800c30a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c30e:	2206      	movs	r2, #6
 800c310:	f108 0701 	add.w	r7, r8, #1
 800c314:	f7f3 ff94 	bl	8000240 <memchr>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d037      	beq.n	800c38c <_vfiprintf_r+0x1f8>
 800c31c:	4b26      	ldr	r3, [pc, #152]	; (800c3b8 <_vfiprintf_r+0x224>)
 800c31e:	bb1b      	cbnz	r3, 800c368 <_vfiprintf_r+0x1d4>
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	3307      	adds	r3, #7
 800c324:	f023 0307 	bic.w	r3, r3, #7
 800c328:	3308      	adds	r3, #8
 800c32a:	9303      	str	r3, [sp, #12]
 800c32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32e:	444b      	add	r3, r9
 800c330:	9309      	str	r3, [sp, #36]	; 0x24
 800c332:	e750      	b.n	800c1d6 <_vfiprintf_r+0x42>
 800c334:	fb05 3202 	mla	r2, r5, r2, r3
 800c338:	2001      	movs	r0, #1
 800c33a:	4688      	mov	r8, r1
 800c33c:	e78a      	b.n	800c254 <_vfiprintf_r+0xc0>
 800c33e:	2300      	movs	r3, #0
 800c340:	f108 0801 	add.w	r8, r8, #1
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	4619      	mov	r1, r3
 800c348:	250a      	movs	r5, #10
 800c34a:	4640      	mov	r0, r8
 800c34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c350:	3a30      	subs	r2, #48	; 0x30
 800c352:	2a09      	cmp	r2, #9
 800c354:	d903      	bls.n	800c35e <_vfiprintf_r+0x1ca>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0c3      	beq.n	800c2e2 <_vfiprintf_r+0x14e>
 800c35a:	9105      	str	r1, [sp, #20]
 800c35c:	e7c1      	b.n	800c2e2 <_vfiprintf_r+0x14e>
 800c35e:	fb05 2101 	mla	r1, r5, r1, r2
 800c362:	2301      	movs	r3, #1
 800c364:	4680      	mov	r8, r0
 800c366:	e7f0      	b.n	800c34a <_vfiprintf_r+0x1b6>
 800c368:	ab03      	add	r3, sp, #12
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	4622      	mov	r2, r4
 800c36e:	4b13      	ldr	r3, [pc, #76]	; (800c3bc <_vfiprintf_r+0x228>)
 800c370:	a904      	add	r1, sp, #16
 800c372:	4630      	mov	r0, r6
 800c374:	f3af 8000 	nop.w
 800c378:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c37c:	4681      	mov	r9, r0
 800c37e:	d1d5      	bne.n	800c32c <_vfiprintf_r+0x198>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	065b      	lsls	r3, r3, #25
 800c384:	f53f af7e 	bmi.w	800c284 <_vfiprintf_r+0xf0>
 800c388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c38a:	e77d      	b.n	800c288 <_vfiprintf_r+0xf4>
 800c38c:	ab03      	add	r3, sp, #12
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	4622      	mov	r2, r4
 800c392:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <_vfiprintf_r+0x228>)
 800c394:	a904      	add	r1, sp, #16
 800c396:	4630      	mov	r0, r6
 800c398:	f000 f888 	bl	800c4ac <_printf_i>
 800c39c:	e7ec      	b.n	800c378 <_vfiprintf_r+0x1e4>
 800c39e:	bf00      	nop
 800c3a0:	0800cb68 	.word	0x0800cb68
 800c3a4:	0800cba8 	.word	0x0800cba8
 800c3a8:	0800cb88 	.word	0x0800cb88
 800c3ac:	0800cb48 	.word	0x0800cb48
 800c3b0:	0800cbae 	.word	0x0800cbae
 800c3b4:	0800cbb2 	.word	0x0800cbb2
 800c3b8:	00000000 	.word	0x00000000
 800c3bc:	0800c16f 	.word	0x0800c16f

0800c3c0 <_printf_common>:
 800c3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c4:	4691      	mov	r9, r2
 800c3c6:	461f      	mov	r7, r3
 800c3c8:	688a      	ldr	r2, [r1, #8]
 800c3ca:	690b      	ldr	r3, [r1, #16]
 800c3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	bfb8      	it	lt
 800c3d4:	4613      	movlt	r3, r2
 800c3d6:	f8c9 3000 	str.w	r3, [r9]
 800c3da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	b112      	cbz	r2, 800c3ea <_printf_common+0x2a>
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	f8c9 3000 	str.w	r3, [r9]
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	0699      	lsls	r1, r3, #26
 800c3ee:	bf42      	ittt	mi
 800c3f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c3f4:	3302      	addmi	r3, #2
 800c3f6:	f8c9 3000 	strmi.w	r3, [r9]
 800c3fa:	6825      	ldr	r5, [r4, #0]
 800c3fc:	f015 0506 	ands.w	r5, r5, #6
 800c400:	d107      	bne.n	800c412 <_printf_common+0x52>
 800c402:	f104 0a19 	add.w	sl, r4, #25
 800c406:	68e3      	ldr	r3, [r4, #12]
 800c408:	f8d9 2000 	ldr.w	r2, [r9]
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	42ab      	cmp	r3, r5
 800c410:	dc28      	bgt.n	800c464 <_printf_common+0xa4>
 800c412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c416:	6822      	ldr	r2, [r4, #0]
 800c418:	3300      	adds	r3, #0
 800c41a:	bf18      	it	ne
 800c41c:	2301      	movne	r3, #1
 800c41e:	0692      	lsls	r2, r2, #26
 800c420:	d42d      	bmi.n	800c47e <_printf_common+0xbe>
 800c422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c426:	4639      	mov	r1, r7
 800c428:	4630      	mov	r0, r6
 800c42a:	47c0      	blx	r8
 800c42c:	3001      	adds	r0, #1
 800c42e:	d020      	beq.n	800c472 <_printf_common+0xb2>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	68e5      	ldr	r5, [r4, #12]
 800c434:	f8d9 2000 	ldr.w	r2, [r9]
 800c438:	f003 0306 	and.w	r3, r3, #6
 800c43c:	2b04      	cmp	r3, #4
 800c43e:	bf08      	it	eq
 800c440:	1aad      	subeq	r5, r5, r2
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	6922      	ldr	r2, [r4, #16]
 800c446:	bf0c      	ite	eq
 800c448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c44c:	2500      	movne	r5, #0
 800c44e:	4293      	cmp	r3, r2
 800c450:	bfc4      	itt	gt
 800c452:	1a9b      	subgt	r3, r3, r2
 800c454:	18ed      	addgt	r5, r5, r3
 800c456:	f04f 0900 	mov.w	r9, #0
 800c45a:	341a      	adds	r4, #26
 800c45c:	454d      	cmp	r5, r9
 800c45e:	d11a      	bne.n	800c496 <_printf_common+0xd6>
 800c460:	2000      	movs	r0, #0
 800c462:	e008      	b.n	800c476 <_printf_common+0xb6>
 800c464:	2301      	movs	r3, #1
 800c466:	4652      	mov	r2, sl
 800c468:	4639      	mov	r1, r7
 800c46a:	4630      	mov	r0, r6
 800c46c:	47c0      	blx	r8
 800c46e:	3001      	adds	r0, #1
 800c470:	d103      	bne.n	800c47a <_printf_common+0xba>
 800c472:	f04f 30ff 	mov.w	r0, #4294967295
 800c476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47a:	3501      	adds	r5, #1
 800c47c:	e7c3      	b.n	800c406 <_printf_common+0x46>
 800c47e:	18e1      	adds	r1, r4, r3
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	2030      	movs	r0, #48	; 0x30
 800c484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c488:	4422      	add	r2, r4
 800c48a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c48e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c492:	3302      	adds	r3, #2
 800c494:	e7c5      	b.n	800c422 <_printf_common+0x62>
 800c496:	2301      	movs	r3, #1
 800c498:	4622      	mov	r2, r4
 800c49a:	4639      	mov	r1, r7
 800c49c:	4630      	mov	r0, r6
 800c49e:	47c0      	blx	r8
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d0e6      	beq.n	800c472 <_printf_common+0xb2>
 800c4a4:	f109 0901 	add.w	r9, r9, #1
 800c4a8:	e7d8      	b.n	800c45c <_printf_common+0x9c>
	...

0800c4ac <_printf_i>:
 800c4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	7e09      	ldrb	r1, [r1, #24]
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	296e      	cmp	r1, #110	; 0x6e
 800c4bc:	4617      	mov	r7, r2
 800c4be:	4606      	mov	r6, r0
 800c4c0:	4698      	mov	r8, r3
 800c4c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4c4:	f000 80b3 	beq.w	800c62e <_printf_i+0x182>
 800c4c8:	d822      	bhi.n	800c510 <_printf_i+0x64>
 800c4ca:	2963      	cmp	r1, #99	; 0x63
 800c4cc:	d036      	beq.n	800c53c <_printf_i+0x90>
 800c4ce:	d80a      	bhi.n	800c4e6 <_printf_i+0x3a>
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	f000 80b9 	beq.w	800c648 <_printf_i+0x19c>
 800c4d6:	2958      	cmp	r1, #88	; 0x58
 800c4d8:	f000 8083 	beq.w	800c5e2 <_printf_i+0x136>
 800c4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c4e4:	e032      	b.n	800c54c <_printf_i+0xa0>
 800c4e6:	2964      	cmp	r1, #100	; 0x64
 800c4e8:	d001      	beq.n	800c4ee <_printf_i+0x42>
 800c4ea:	2969      	cmp	r1, #105	; 0x69
 800c4ec:	d1f6      	bne.n	800c4dc <_printf_i+0x30>
 800c4ee:	6820      	ldr	r0, [r4, #0]
 800c4f0:	6813      	ldr	r3, [r2, #0]
 800c4f2:	0605      	lsls	r5, r0, #24
 800c4f4:	f103 0104 	add.w	r1, r3, #4
 800c4f8:	d52a      	bpl.n	800c550 <_printf_i+0xa4>
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6011      	str	r1, [r2, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	da03      	bge.n	800c50a <_printf_i+0x5e>
 800c502:	222d      	movs	r2, #45	; 0x2d
 800c504:	425b      	negs	r3, r3
 800c506:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c50a:	486f      	ldr	r0, [pc, #444]	; (800c6c8 <_printf_i+0x21c>)
 800c50c:	220a      	movs	r2, #10
 800c50e:	e039      	b.n	800c584 <_printf_i+0xd8>
 800c510:	2973      	cmp	r1, #115	; 0x73
 800c512:	f000 809d 	beq.w	800c650 <_printf_i+0x1a4>
 800c516:	d808      	bhi.n	800c52a <_printf_i+0x7e>
 800c518:	296f      	cmp	r1, #111	; 0x6f
 800c51a:	d020      	beq.n	800c55e <_printf_i+0xb2>
 800c51c:	2970      	cmp	r1, #112	; 0x70
 800c51e:	d1dd      	bne.n	800c4dc <_printf_i+0x30>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	f043 0320 	orr.w	r3, r3, #32
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	e003      	b.n	800c532 <_printf_i+0x86>
 800c52a:	2975      	cmp	r1, #117	; 0x75
 800c52c:	d017      	beq.n	800c55e <_printf_i+0xb2>
 800c52e:	2978      	cmp	r1, #120	; 0x78
 800c530:	d1d4      	bne.n	800c4dc <_printf_i+0x30>
 800c532:	2378      	movs	r3, #120	; 0x78
 800c534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c538:	4864      	ldr	r0, [pc, #400]	; (800c6cc <_printf_i+0x220>)
 800c53a:	e055      	b.n	800c5e8 <_printf_i+0x13c>
 800c53c:	6813      	ldr	r3, [r2, #0]
 800c53e:	1d19      	adds	r1, r3, #4
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6011      	str	r1, [r2, #0]
 800c544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c54c:	2301      	movs	r3, #1
 800c54e:	e08c      	b.n	800c66a <_printf_i+0x1be>
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6011      	str	r1, [r2, #0]
 800c554:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c558:	bf18      	it	ne
 800c55a:	b21b      	sxthne	r3, r3
 800c55c:	e7cf      	b.n	800c4fe <_printf_i+0x52>
 800c55e:	6813      	ldr	r3, [r2, #0]
 800c560:	6825      	ldr	r5, [r4, #0]
 800c562:	1d18      	adds	r0, r3, #4
 800c564:	6010      	str	r0, [r2, #0]
 800c566:	0628      	lsls	r0, r5, #24
 800c568:	d501      	bpl.n	800c56e <_printf_i+0xc2>
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	e002      	b.n	800c574 <_printf_i+0xc8>
 800c56e:	0668      	lsls	r0, r5, #25
 800c570:	d5fb      	bpl.n	800c56a <_printf_i+0xbe>
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	4854      	ldr	r0, [pc, #336]	; (800c6c8 <_printf_i+0x21c>)
 800c576:	296f      	cmp	r1, #111	; 0x6f
 800c578:	bf14      	ite	ne
 800c57a:	220a      	movne	r2, #10
 800c57c:	2208      	moveq	r2, #8
 800c57e:	2100      	movs	r1, #0
 800c580:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c584:	6865      	ldr	r5, [r4, #4]
 800c586:	60a5      	str	r5, [r4, #8]
 800c588:	2d00      	cmp	r5, #0
 800c58a:	f2c0 8095 	blt.w	800c6b8 <_printf_i+0x20c>
 800c58e:	6821      	ldr	r1, [r4, #0]
 800c590:	f021 0104 	bic.w	r1, r1, #4
 800c594:	6021      	str	r1, [r4, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d13d      	bne.n	800c616 <_printf_i+0x16a>
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	f040 808e 	bne.w	800c6bc <_printf_i+0x210>
 800c5a0:	4665      	mov	r5, ip
 800c5a2:	2a08      	cmp	r2, #8
 800c5a4:	d10b      	bne.n	800c5be <_printf_i+0x112>
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	07db      	lsls	r3, r3, #31
 800c5aa:	d508      	bpl.n	800c5be <_printf_i+0x112>
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	6862      	ldr	r2, [r4, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	bfde      	ittt	le
 800c5b4:	2330      	movle	r3, #48	; 0x30
 800c5b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5be:	ebac 0305 	sub.w	r3, ip, r5
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	f8cd 8000 	str.w	r8, [sp]
 800c5c8:	463b      	mov	r3, r7
 800c5ca:	aa03      	add	r2, sp, #12
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7ff fef6 	bl	800c3c0 <_printf_common>
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d14d      	bne.n	800c674 <_printf_i+0x1c8>
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	b005      	add	sp, #20
 800c5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	4839      	ldr	r0, [pc, #228]	; (800c6c8 <_printf_i+0x21c>)
 800c5e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c5e8:	6813      	ldr	r3, [r2, #0]
 800c5ea:	6821      	ldr	r1, [r4, #0]
 800c5ec:	1d1d      	adds	r5, r3, #4
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6015      	str	r5, [r2, #0]
 800c5f2:	060a      	lsls	r2, r1, #24
 800c5f4:	d50b      	bpl.n	800c60e <_printf_i+0x162>
 800c5f6:	07ca      	lsls	r2, r1, #31
 800c5f8:	bf44      	itt	mi
 800c5fa:	f041 0120 	orrmi.w	r1, r1, #32
 800c5fe:	6021      	strmi	r1, [r4, #0]
 800c600:	b91b      	cbnz	r3, 800c60a <_printf_i+0x15e>
 800c602:	6822      	ldr	r2, [r4, #0]
 800c604:	f022 0220 	bic.w	r2, r2, #32
 800c608:	6022      	str	r2, [r4, #0]
 800c60a:	2210      	movs	r2, #16
 800c60c:	e7b7      	b.n	800c57e <_printf_i+0xd2>
 800c60e:	064d      	lsls	r5, r1, #25
 800c610:	bf48      	it	mi
 800c612:	b29b      	uxthmi	r3, r3
 800c614:	e7ef      	b.n	800c5f6 <_printf_i+0x14a>
 800c616:	4665      	mov	r5, ip
 800c618:	fbb3 f1f2 	udiv	r1, r3, r2
 800c61c:	fb02 3311 	mls	r3, r2, r1, r3
 800c620:	5cc3      	ldrb	r3, [r0, r3]
 800c622:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c626:	460b      	mov	r3, r1
 800c628:	2900      	cmp	r1, #0
 800c62a:	d1f5      	bne.n	800c618 <_printf_i+0x16c>
 800c62c:	e7b9      	b.n	800c5a2 <_printf_i+0xf6>
 800c62e:	6813      	ldr	r3, [r2, #0]
 800c630:	6825      	ldr	r5, [r4, #0]
 800c632:	6961      	ldr	r1, [r4, #20]
 800c634:	1d18      	adds	r0, r3, #4
 800c636:	6010      	str	r0, [r2, #0]
 800c638:	0628      	lsls	r0, r5, #24
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	d501      	bpl.n	800c642 <_printf_i+0x196>
 800c63e:	6019      	str	r1, [r3, #0]
 800c640:	e002      	b.n	800c648 <_printf_i+0x19c>
 800c642:	066a      	lsls	r2, r5, #25
 800c644:	d5fb      	bpl.n	800c63e <_printf_i+0x192>
 800c646:	8019      	strh	r1, [r3, #0]
 800c648:	2300      	movs	r3, #0
 800c64a:	6123      	str	r3, [r4, #16]
 800c64c:	4665      	mov	r5, ip
 800c64e:	e7b9      	b.n	800c5c4 <_printf_i+0x118>
 800c650:	6813      	ldr	r3, [r2, #0]
 800c652:	1d19      	adds	r1, r3, #4
 800c654:	6011      	str	r1, [r2, #0]
 800c656:	681d      	ldr	r5, [r3, #0]
 800c658:	6862      	ldr	r2, [r4, #4]
 800c65a:	2100      	movs	r1, #0
 800c65c:	4628      	mov	r0, r5
 800c65e:	f7f3 fdef 	bl	8000240 <memchr>
 800c662:	b108      	cbz	r0, 800c668 <_printf_i+0x1bc>
 800c664:	1b40      	subs	r0, r0, r5
 800c666:	6060      	str	r0, [r4, #4]
 800c668:	6863      	ldr	r3, [r4, #4]
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	2300      	movs	r3, #0
 800c66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c672:	e7a7      	b.n	800c5c4 <_printf_i+0x118>
 800c674:	6923      	ldr	r3, [r4, #16]
 800c676:	462a      	mov	r2, r5
 800c678:	4639      	mov	r1, r7
 800c67a:	4630      	mov	r0, r6
 800c67c:	47c0      	blx	r8
 800c67e:	3001      	adds	r0, #1
 800c680:	d0aa      	beq.n	800c5d8 <_printf_i+0x12c>
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	079b      	lsls	r3, r3, #30
 800c686:	d413      	bmi.n	800c6b0 <_printf_i+0x204>
 800c688:	68e0      	ldr	r0, [r4, #12]
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	4298      	cmp	r0, r3
 800c68e:	bfb8      	it	lt
 800c690:	4618      	movlt	r0, r3
 800c692:	e7a3      	b.n	800c5dc <_printf_i+0x130>
 800c694:	2301      	movs	r3, #1
 800c696:	464a      	mov	r2, r9
 800c698:	4639      	mov	r1, r7
 800c69a:	4630      	mov	r0, r6
 800c69c:	47c0      	blx	r8
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d09a      	beq.n	800c5d8 <_printf_i+0x12c>
 800c6a2:	3501      	adds	r5, #1
 800c6a4:	68e3      	ldr	r3, [r4, #12]
 800c6a6:	9a03      	ldr	r2, [sp, #12]
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	42ab      	cmp	r3, r5
 800c6ac:	dcf2      	bgt.n	800c694 <_printf_i+0x1e8>
 800c6ae:	e7eb      	b.n	800c688 <_printf_i+0x1dc>
 800c6b0:	2500      	movs	r5, #0
 800c6b2:	f104 0919 	add.w	r9, r4, #25
 800c6b6:	e7f5      	b.n	800c6a4 <_printf_i+0x1f8>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1ac      	bne.n	800c616 <_printf_i+0x16a>
 800c6bc:	7803      	ldrb	r3, [r0, #0]
 800c6be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6c6:	e76c      	b.n	800c5a2 <_printf_i+0xf6>
 800c6c8:	0800cbb9 	.word	0x0800cbb9
 800c6cc:	0800cbca 	.word	0x0800cbca

0800c6d0 <__sread>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d8:	f000 f894 	bl	800c804 <_read_r>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	bfab      	itete	ge
 800c6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c6e4:	181b      	addge	r3, r3, r0
 800c6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6ea:	bfac      	ite	ge
 800c6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6ee:	81a3      	strhlt	r3, [r4, #12]
 800c6f0:	bd10      	pop	{r4, pc}

0800c6f2 <__swrite>:
 800c6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	461f      	mov	r7, r3
 800c6f8:	898b      	ldrh	r3, [r1, #12]
 800c6fa:	05db      	lsls	r3, r3, #23
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	4616      	mov	r6, r2
 800c702:	d505      	bpl.n	800c710 <__swrite+0x1e>
 800c704:	2302      	movs	r3, #2
 800c706:	2200      	movs	r2, #0
 800c708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70c:	f000 f868 	bl	800c7e0 <_lseek_r>
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	4632      	mov	r2, r6
 800c71e:	463b      	mov	r3, r7
 800c720:	4628      	mov	r0, r5
 800c722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c726:	f000 b817 	b.w	800c758 <_write_r>

0800c72a <__sseek>:
 800c72a:	b510      	push	{r4, lr}
 800c72c:	460c      	mov	r4, r1
 800c72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c732:	f000 f855 	bl	800c7e0 <_lseek_r>
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	bf15      	itete	ne
 800c73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c746:	81a3      	strheq	r3, [r4, #12]
 800c748:	bf18      	it	ne
 800c74a:	81a3      	strhne	r3, [r4, #12]
 800c74c:	bd10      	pop	{r4, pc}

0800c74e <__sclose>:
 800c74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c752:	f000 b813 	b.w	800c77c <_close_r>
	...

0800c758 <_write_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4c07      	ldr	r4, [pc, #28]	; (800c778 <_write_r+0x20>)
 800c75c:	4605      	mov	r5, r0
 800c75e:	4608      	mov	r0, r1
 800c760:	4611      	mov	r1, r2
 800c762:	2200      	movs	r2, #0
 800c764:	6022      	str	r2, [r4, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	f7f4 fb59 	bl	8000e1e <_write>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	d102      	bne.n	800c776 <_write_r+0x1e>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	b103      	cbz	r3, 800c776 <_write_r+0x1e>
 800c774:	602b      	str	r3, [r5, #0]
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	20009408 	.word	0x20009408

0800c77c <_close_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4c06      	ldr	r4, [pc, #24]	; (800c798 <_close_r+0x1c>)
 800c780:	2300      	movs	r3, #0
 800c782:	4605      	mov	r5, r0
 800c784:	4608      	mov	r0, r1
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	f7f4 fb65 	bl	8000e56 <_close>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_close_r+0x1a>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	b103      	cbz	r3, 800c796 <_close_r+0x1a>
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	20009408 	.word	0x20009408

0800c79c <_fstat_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4c07      	ldr	r4, [pc, #28]	; (800c7bc <_fstat_r+0x20>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	f7f4 fb60 	bl	8000e6e <_fstat>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d102      	bne.n	800c7b8 <_fstat_r+0x1c>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	b103      	cbz	r3, 800c7b8 <_fstat_r+0x1c>
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20009408 	.word	0x20009408

0800c7c0 <_isatty_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4c06      	ldr	r4, [pc, #24]	; (800c7dc <_isatty_r+0x1c>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	f7f4 fb5f 	bl	8000e8e <_isatty>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d102      	bne.n	800c7da <_isatty_r+0x1a>
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	b103      	cbz	r3, 800c7da <_isatty_r+0x1a>
 800c7d8:	602b      	str	r3, [r5, #0]
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	20009408 	.word	0x20009408

0800c7e0 <_lseek_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4c07      	ldr	r4, [pc, #28]	; (800c800 <_lseek_r+0x20>)
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	6022      	str	r2, [r4, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f7f4 fb58 	bl	8000ea4 <_lseek>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_lseek_r+0x1e>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_lseek_r+0x1e>
 800c7fc:	602b      	str	r3, [r5, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	20009408 	.word	0x20009408

0800c804 <_read_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4c07      	ldr	r4, [pc, #28]	; (800c824 <_read_r+0x20>)
 800c808:	4605      	mov	r5, r0
 800c80a:	4608      	mov	r0, r1
 800c80c:	4611      	mov	r1, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	6022      	str	r2, [r4, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	f7f4 fae6 	bl	8000de4 <_read>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <_read_r+0x1e>
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	b103      	cbz	r3, 800c822 <_read_r+0x1e>
 800c820:	602b      	str	r3, [r5, #0]
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	20009408 	.word	0x20009408

0800c828 <_init>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr

0800c834 <_fini>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	bf00      	nop
 800c838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83a:	bc08      	pop	{r3}
 800c83c:	469e      	mov	lr, r3
 800c83e:	4770      	bx	lr
