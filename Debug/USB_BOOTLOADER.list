
USB_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800c4d0  0800c4d0  0001c4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c848  0800c848  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c848  0800c848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c850  0800c850  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c850  0800c850  0001c850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000112fc  20000090  0800c8e8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001138c  0800c8e8  0002138c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e15  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000508e  00000000  00000000  00046ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  0004bf68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  0004d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e88d  00000000  00000000  0004e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001719b  00000000  00000000  0007cc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010179b  00000000  00000000  00093df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  00195610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c4b8 	.word	0x0800c4b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	0800c4b8 	.word	0x0800c4b8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <BootAppImage>:
#include "bootloader.h"
#include "stm32f7xx_hal.h"
#include "log.h"

void BootAppImage(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
	BOOT_LOG("EXECUTING APPLICATION IMAGE\r\n");
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <BootAppImage+0x80>)
 80005e8:	f00b f8c6 	bl	800b778 <iprintf>
	uint8_t i = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	75fb      	strb	r3, [r7, #23]
	uint32_t msp_value = *(volatile uint32_t *)0x8100000;
 80005f0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	613b      	str	r3, [r7, #16]
	if(msp_value == 0xFFFFFFFF)
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fe:	d02a      	beq.n	8000656 <BootAppImage+0x76>
	{
		return;
	}
	uint32_t resest_address = *(volatile uint32_t *)0x8100004;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <BootAppImage+0x84>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f383 8808 	msr	MSP, r3
	__set_MSP(msp_value);
	AppEntry Jump = (void *)resest_address;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
	/* Disable all interrupts */
	__disable_irq();
	/* Disable Systick timer */
	SysTick->CTRL = 0;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <BootAppImage+0x88>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]

	/* Set the clock to the default state */
	HAL_RCC_DeInit();
 800061c:	f003 f8b8 	bl	8003790 <HAL_RCC_DeInit>
	/* Clear Interrupt Enable Register & Interrupt Pending Register */
	for (i=0;i<5;i++)
 8000620:	2300      	movs	r3, #0
 8000622:	75fb      	strb	r3, [r7, #23]
 8000624:	e010      	b.n	8000648 <BootAppImage+0x68>
	{
		NVIC->ICER[i]=0xFFFFFFFF;
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <BootAppImage+0x8c>)
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	3320      	adds	r3, #32
 800062c:	f04f 31ff 	mov.w	r1, #4294967295
 8000630:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i]=0xFFFFFFFF;
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <BootAppImage+0x8c>)
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	3360      	adds	r3, #96	; 0x60
 800063a:	f04f 31ff 	mov.w	r1, #4294967295
 800063e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<5;i++)
 8000642:	7dfb      	ldrb	r3, [r7, #23]
 8000644:	3301      	adds	r3, #1
 8000646:	75fb      	strb	r3, [r7, #23]
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d9eb      	bls.n	8000626 <BootAppImage+0x46>
  __ASM volatile ("cpsie i" : : : "memory");
 800064e:	b662      	cpsie	i
	}

	/* Re-enable all interrupts */
	__enable_irq();

	Jump();
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4798      	blx	r3
 8000654:	e000      	b.n	8000658 <BootAppImage+0x78>
		return;
 8000656:	bf00      	nop
}
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	0800c4d0 	.word	0x0800c4d0
 8000664:	08100004 	.word	0x08100004
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000e100 	.word	0xe000e100

08000670 <no_usb_detected>:
extern FIL fileR;
extern DIR dir;
extern FILINFO fno;

unsigned char no_usb_detected(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	if((overflow >= 15000) && (detetcted_flag == 0))
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <no_usb_detected+0x28>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	f643 2297 	movw	r2, #14999	; 0x3a97
 800067c:	4293      	cmp	r3, r2
 800067e:	d905      	bls.n	800068c <no_usb_detected+0x1c>
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <no_usb_detected+0x2c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <no_usb_detected+0x1c>
	{
		return 1;
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <no_usb_detected+0x1e>
	}
	else
	{
		return 0;
 800068c:	2300      	movs	r3, #0
	}
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	2001085c 	.word	0x2001085c
 800069c:	200100ac 	.word	0x200100ac

080006a0 <COMMAND_PREPARE_USB>:

char COMMAND_PREPARE_USB(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if(f_mount(&myUsbFatFS, (TCHAR const*)USBH_Path, 0) == FR_OK)
 80006a4:	2200      	movs	r2, #0
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <COMMAND_PREPARE_USB+0x20>)
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <COMMAND_PREPARE_USB+0x24>)
 80006aa:	f009 ffb7 	bl	800a61c <f_mount>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <COMMAND_PREPARE_USB+0x18>
	{
		return 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e000      	b.n	80006ba <COMMAND_PREPARE_USB+0x1a>
	}
	else
	{
		return -1;
 80006b8:	23ff      	movs	r3, #255	; 0xff
	}
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20010ce4 	.word	0x20010ce4
 80006c4:	20010560 	.word	0x20010560

080006c8 <COMMAND_DOWNLOAD>:
void COMMAND_DOWNLOAD(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
	FILINFO file_info;
	if (f_open(&fileR, DOWNLOAD_FILENAME, FA_READ) == FR_OK)
 80006ce:	2201      	movs	r2, #1
 80006d0:	4917      	ldr	r1, [pc, #92]	; (8000730 <COMMAND_DOWNLOAD+0x68>)
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <COMMAND_DOWNLOAD+0x6c>)
 80006d4:	f009 ffe8 	bl	800a6a8 <f_open>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d123      	bne.n	8000726 <COMMAND_DOWNLOAD+0x5e>
	{
		detetcted_flag = 1;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <COMMAND_DOWNLOAD+0x70>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
		memset(&file_info, 0 , sizeof(file_info));
 80006e4:	463b      	mov	r3, r7
 80006e6:	2218      	movs	r2, #24
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00a ff93 	bl	800b616 <memset>
		if(f_stat(DOWNLOAD_FILENAME, &file_info) == FR_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <COMMAND_DOWNLOAD+0x68>)
 80006f6:	f00a fb7c 	bl	800adf2 <f_stat>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d112      	bne.n	8000726 <COMMAND_DOWNLOAD+0x5e>
		{
			if (file_info.fsize > (0x81FFFFF - 0x8100000))
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000706:	d20e      	bcs.n	8000726 <COMMAND_DOWNLOAD+0x5e>
			{
				;
			}
			else
			{
				Erase_Flash();
 8000708:	f000 f844 	bl	8000794 <Erase_Flash>
				COMMAND_ProgramFlashMemory();
 800070c:	f000 f818 	bl	8000740 <COMMAND_ProgramFlashMemory>
				BootAppImage();
 8000710:	f7ff ff66 	bl	80005e0 <BootAppImage>
				f_close (&fileR);
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <COMMAND_DOWNLOAD+0x6c>)
 8000716:	f00a fb42 	bl	800ad9e <f_close>
				f_mount(NULL, (TCHAR const*)USBH_Path, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <COMMAND_DOWNLOAD+0x74>)
 800071e:	2000      	movs	r0, #0
 8000720:	f009 ff7c 	bl	800a61c <f_mount>
		{
			;
		}
	}

	return;
 8000724:	bf00      	nop
 8000726:	bf00      	nop

}
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	0800c4f8 	.word	0x0800c4f8
 8000734:	200100f8 	.word	0x200100f8
 8000738:	200100ac 	.word	0x200100ac
 800073c:	20010ce4 	.word	0x20010ce4

08000740 <COMMAND_ProgramFlashMemory>:
  * @brief  Programs the internal Flash memory
  * @param  None
  * @retval None
  */
void COMMAND_ProgramFlashMemory(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
	uint16_t BytesRead;

	struct flash_write_config wconfig;
    f_read (&fileR, RAM_Buf, BUFFER_SIZE, (void *)&BytesRead);
 8000746:	f107 030e 	add.w	r3, r7, #14
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <COMMAND_ProgramFlashMemory+0x48>)
 8000750:	480e      	ldr	r0, [pc, #56]	; (800078c <COMMAND_ProgramFlashMemory+0x4c>)
 8000752:	f00a f967 	bl	800aa24 <f_read>
    if (BytesRead < BUFFER_SIZE)
    {
    		BOOT_LOG("TRANSFERING APPLICATION IMAGE\r\n");
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <COMMAND_ProgramFlashMemory+0x50>)
 8000758:	f00b f80e 	bl	800b778 <iprintf>
			memset(&wconfig, 0, sizeof(wconfig));
 800075c:	463b      	mov	r3, r7
 800075e:	220c      	movs	r2, #12
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00a ff57 	bl	800b616 <memset>
			wconfig.address = 0x08100000;
 8000768:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800076c:	603b      	str	r3, [r7, #0]
			wconfig.data = RAM_Buf;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <COMMAND_ProgramFlashMemory+0x48>)
 8000770:	607b      	str	r3, [r7, #4]
			wconfig.data_length = BytesRead;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	60bb      	str	r3, [r7, #8]
			Write_To_Flash(&wconfig);
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f83f 	bl	80007fc <Write_To_Flash>
    }
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000ac 	.word	0x200000ac
 800078c:	200100f8 	.word	0x200100f8
 8000790:	0800c504 	.word	0x0800c504

08000794 <Erase_Flash>:
#include "flash_if.h"

static FLASH_OBProgramInitTypeDef    OBInit;

HAL_StatusTypeDef Erase_Flash(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
	uint32_t FirstSector = 0, NbOfSectors = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800079e:	2300      	movs	r3, #0
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
uint32_t Address = 0, SECTORError = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
 80007a6:	2300      	movs	r3, #0
 80007a8:	643b      	str	r3, [r7, #64]	; 0x40
__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
FLASH_OBProgramInitTypeDef    OBInit;
	/*Variable used for Erase procedure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80007b2:	f000 fdaf 	bl	8001314 <HAL_FLASH_Unlock>
	   /* Allow Access to option bytes sector */
	   HAL_FLASH_OB_Unlock();
 80007b6:	f000 fddf 	bl	8001378 <HAL_FLASH_OB_Unlock>
	   /* Get the Dual bank configuration status */
	   HAL_FLASHEx_OBGetConfig(&OBInit);
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 ff9e 	bl	8001700 <HAL_FLASHEx_OBGetConfig>

	   /* Erase the user Flash area
	     (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   /* Get the 1st sector to erase */
	   FirstSector = 8;//GetSector(FLASH_USER_START_ADDR);
 80007c4:	2308      	movs	r3, #8
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	   /* Get the number of sector to erase from 1st sector*/
	   NbOfSectors = 3;//GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 80007c8:	2303      	movs	r3, #3
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
	   EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
	   EraseInitStruct.Sector        = FirstSector;
 80007d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d6:	60fb      	str	r3, [r7, #12]
	   EraseInitStruct.NbSectors     = NbOfSectors;
 80007d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007da:	613b      	str	r3, [r7, #16]

	   /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	      you have to make sure that these data are rewritten before they are accessed during code
	      execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	      DCRST and ICRST bits in the FLASH_CR register. */
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80007dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 ff1b 	bl	8001620 <HAL_FLASHEx_Erase>
	   {
		   ;
	   }
	   /* Allow Access to option bytes sector */
	   HAL_FLASH_OB_Lock();
 80007ea:	f000 fde1 	bl	80013b0 <HAL_FLASH_OB_Lock>
	   HAL_FLASH_Lock();
 80007ee:	f000 fdb3 	bl	8001358 <HAL_FLASH_Lock>
	return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Write_To_Flash>:


HAL_StatusTypeDef Write_To_Flash(struct flash_write_config * configuration)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef flashRetStatus = HAL_OK;
 8000804:	2300      	movs	r3, #0
 8000806:	75fb      	strb	r3, [r7, #23]
	uint32_t len = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	uint32_t data = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
	uint8_t data_filler = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(configuration)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d034      	beq.n	8000884 <Write_To_Flash+0x88>
	{

		if(Erase_Flash() == HAL_OK)
 800081a:	f7ff ffbb 	bl	8000794 <Erase_Flash>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d12c      	bne.n	800087e <Write_To_Flash+0x82>
		{
			HAL_FLASH_Unlock();
 8000824:	f000 fd76 	bl	8001314 <HAL_FLASH_Unlock>
			while(len < configuration->data_length)
 8000828:	e023      	b.n	8000872 <Write_To_Flash+0x76>
			{
				memcpy(&data, configuration->data, 4);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60bb      	str	r3, [r7, #8]

				len += sizeof(uint32_t); //len raised by 4 // 16
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	3304      	adds	r3, #4
 8000836:	613b      	str	r3, [r7, #16]
				configuration->data = configuration->data + 4;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	1d1a      	adds	r2, r3, #4
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, configuration->address, data) == HAL_OK)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f04f 0400 	mov.w	r4, #0
 800084c:	461a      	mov	r2, r3
 800084e:	4623      	mov	r3, r4
 8000850:	2002      	movs	r0, #2
 8000852:	f000 fd03 	bl	800125c <HAL_FLASH_Program>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <Write_To_Flash+0x6c>
				{
					configuration->address += 4;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	1d1a      	adds	r2, r3, #4
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e004      	b.n	8000872 <Write_To_Flash+0x76>
				}
				else
				{
					printf("flash write error\r\n");
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <Write_To_Flash+0x9c>)
 800086a:	f00a fff9 	bl	800b860 <puts>
					flashRetStatus = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	75fb      	strb	r3, [r7, #23]
			while(len < configuration->data_length)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d3d6      	bcc.n	800082a <Write_To_Flash+0x2e>
 800087c:	e004      	b.n	8000888 <Write_To_Flash+0x8c>
				}
			}
		}
		else
		{
			flashRetStatus = HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	75fb      	strb	r3, [r7, #23]
 8000882:	e001      	b.n	8000888 <Write_To_Flash+0x8c>
		}
	}
	else
	{
		flashRetStatus = HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	75fb      	strb	r3, [r7, #23]
	}

	HAL_FLASH_Lock();
 8000888:	f000 fd66 	bl	8001358 <HAL_FLASH_Lock>

	return flashRetStatus;
 800088c:	7dfb      	ldrb	r3, [r7, #23]
}
 800088e:	4618      	mov	r0, r3
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	0800c590 	.word	0x0800c590

0800089c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80008a4:	1d39      	adds	r1, r7, #4
 80008a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008aa:	2201      	movs	r2, #1
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <__io_putchar+0x20>)
 80008ae:	f003 fd43 	bl	8004338 <HAL_UART_Transmit>

  return ch;
 80008b2:	687b      	ldr	r3, [r7, #4]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20010794 	.word	0x20010794

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80008c4:	f000 fb39 	bl	8000f3a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008c8:	f000 f82a 	bl	8000920 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008cc:	f000 f89a 	bl	8000a04 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80008d0:	f000 f868 	bl	80009a4 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 80008d4:	f005 f904 	bl	8005ae0 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 80008d8:	f00a fb20 	bl	800af1c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */
	BOOT_LOG("HW PERIPHERALS ARE INITIALIZED..\r\n");
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <main+0x50>)
 80008de:	f00a ff4b 	bl	800b778 <iprintf>
	BOOT_LOG("ENTERING USB EVENT LOOP..\r\n");
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <main+0x54>)
 80008e4:	f00a ff48 	bl	800b778 <iprintf>
//	BOOT_LOG("THIS SECOND APP\r\n");
	while(1)
	{
		MX_USB_HOST_Process();
 80008e8:	f00a fb3e 	bl	800af68 <MX_USB_HOST_Process>
		USBEventHandler();
 80008ec:	f000 f934 	bl	8000b58 <USBEventHandler>
		if(no_usb_detected())
 80008f0:	f7ff febe 	bl	8000670 <no_usb_detected>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f6      	beq.n	80008e8 <main+0x28>
		{
			//uint32_t msp_value = *(volatile uint32_t *)0x08010000;
			//if(msp_value != 0xFFFFFFFF)
			//{
			//	printf("New app-2 image is available.. Booting App2\r\n");
				BootAppImage();
 80008fa:	f7ff fe71 	bl	80005e0 <BootAppImage>
			//}
			printf("starting user application\r\n");
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <main+0x58>)
 8000900:	f00a ffae 	bl	800b860 <puts>
			break;
 8000904:	bf00      	nop
		}
	}
	printf("About to start user app now\r\n");
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <main+0x5c>)
 8000908:	f00a ffaa 	bl	800b860 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800090c:	e7fe      	b.n	800090c <main+0x4c>
 800090e:	bf00      	nop
 8000910:	0800c5a4 	.word	0x0800c5a4
 8000914:	0800c5d4 	.word	0x0800c5d4
 8000918:	0800c5fc 	.word	0x0800c5fc
 800091c:	0800c618 	.word	0x0800c618

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b092      	sub	sp, #72	; 0x48
 8000924:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	603b      	str	r3, [r7, #0]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092e:	607b      	str	r3, [r7, #4]
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093c:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.PLL.PLLM = 8;
 800093e:	2308      	movs	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.PLL.PLLN = 432;
 8000942:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 800094c:	2309      	movs	r3, #9
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLR = 7;
 8000950:	2307      	movs	r3, #7
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fffa 	bl	8003950 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d000      	beq.n	8000964 <SystemClock_Config+0x44>
	  {
	    while (1)
 8000962:	e7fe      	b.n	8000962 <SystemClock_Config+0x42>
	    {
	    };
	  }

	  /* Activate the OverDrive to reach the 216 Mhz Frequency */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000964:	f002 fec4 	bl	80036f0 <HAL_PWREx_EnableOverDrive>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d000      	beq.n	8000970 <SystemClock_Config+0x50>
	  {
	    while (1)
 800096e:	e7fe      	b.n	800096e <SystemClock_Config+0x4e>
	    };
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	   * clocks dividers */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000970:	230f      	movs	r3, #15
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
	                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800097c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800098c:	2107      	movs	r1, #7
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fa8c 	bl	8003eac <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d000      	beq.n	800099c <SystemClock_Config+0x7c>
	  {
	    while (1)
 800099a:	e7fe      	b.n	800099a <SystemClock_Config+0x7a>
	    {
	    };
	  }
}
 800099c:	bf00      	nop
 800099e:	3748      	adds	r7, #72	; 0x48
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART3_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e8:	f003 fc58 	bl	800429c <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f8eb 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20010794 	.word	0x20010794
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a43      	ldr	r2, [pc, #268]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a3d      	ldr	r2, [pc, #244]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a37      	ldr	r2, [pc, #220]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ab0:	4825      	ldr	r0, [pc, #148]	; (8000b48 <MX_GPIO_Init+0x144>)
 8000ab2:	f001 f8ef 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	4824      	ldr	r0, [pc, #144]	; (8000b4c <MX_GPIO_Init+0x148>)
 8000abc:	f001 f8ea 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_GPIO_Init+0x14c>)
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <MX_GPIO_Init+0x150>)
 8000ad6:	f000 ff33 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ada:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4815      	ldr	r0, [pc, #84]	; (8000b48 <MX_GPIO_Init+0x144>)
 8000af4:	f000 ff24 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <MX_GPIO_Init+0x148>)
 8000b10:	f000 ff16 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_GPIO_Init+0x148>)
 8000b28:	f000 ff0a 	bl	8001940 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2028      	movs	r0, #40	; 0x28
 8000b32:	f000 fb5c 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f000 fb75 	bl	8001226 <HAL_NVIC_EnableIRQ>
}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	10110000 	.word	0x10110000
 8000b54:	40020800 	.word	0x40020800

08000b58 <USBEventHandler>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void USBEventHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	switch(Appli_state)
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <USBEventHandler+0x64>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d828      	bhi.n	8000bb6 <USBEventHandler+0x5e>
 8000b64:	a201      	add	r2, pc, #4	; (adr r2, 8000b6c <USBEventHandler+0x14>)
 8000b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6a:	bf00      	nop
 8000b6c:	08000bb1 	.word	0x08000bb1
 8000b70:	08000b7d 	.word	0x08000b7d
 8000b74:	08000b93 	.word	0x08000b93
 8000b78:	08000b9f 	.word	0x08000b9f
	{
		case APPLICATION_IDLE:
			break;

		case APPLICATION_START:
			if(COMMAND_PREPARE_USB() == 0)
 8000b7c:	f7ff fd90 	bl	80006a0 <COMMAND_PREPARE_USB>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d116      	bne.n	8000bb4 <USBEventHandler+0x5c>
			{
				//Turn Green LED ON
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2101      	movs	r1, #1
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <USBEventHandler+0x68>)
 8000b8c:	f001 f882 	bl	8001c94 <HAL_GPIO_WritePin>
			}
			break;
 8000b90:	e010      	b.n	8000bb4 <USBEventHandler+0x5c>

		case APPLICATION_READY:
			BOOT_LOG("PREPARING TO DOWNLOAD APPLICATION IMAGE\r\n");
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <USBEventHandler+0x6c>)
 8000b94:	f00a fdf0 	bl	800b778 <iprintf>
			COMMAND_DOWNLOAD();
 8000b98:	f7ff fd96 	bl	80006c8 <COMMAND_DOWNLOAD>
			break;
 8000b9c:	e00b      	b.n	8000bb6 <USBEventHandler+0x5e>

		case APPLICATION_DISCONNECT:
			BOOT_LOG("APPLICATION DISCONNECT\r\n");
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <USBEventHandler+0x70>)
 8000ba0:	f00a fdea 	bl	800b778 <iprintf>
			//Turn Green LED OFF
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <USBEventHandler+0x68>)
 8000baa:	f001 f873 	bl	8001c94 <HAL_GPIO_WritePin>
			break;
 8000bae:	e002      	b.n	8000bb6 <USBEventHandler+0x5e>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e000      	b.n	8000bb6 <USBEventHandler+0x5e>
			break;
 8000bb4:	bf00      	nop
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200100ec 	.word	0x200100ec
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	0800c638 	.word	0x0800c638
 8000bc8:	0800c66c 	.word	0x0800c66c

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0x7c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d128      	bne.n	8000c98 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c94:	f000 fe54 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f958 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static uint16_t i = 0;

  i++;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <SysTick_Handler+0x48>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <SysTick_Handler+0x48>)
 8000d0e:	801a      	strh	r2, [r3, #0]
  if(overflow < 15000)
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <SysTick_Handler+0x4c>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d805      	bhi.n	8000d28 <SysTick_Handler+0x2c>
  {
	  overflow++;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <SysTick_Handler+0x4c>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <SysTick_Handler+0x4c>)
 8000d26:	801a      	strh	r2, [r3, #0]
  }
  if(i == 500)
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SysTick_Handler+0x48>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d30:	d105      	bne.n	8000d3e <SysTick_Handler+0x42>
  {
	  APP_LOG("This dummy App-1 is not blinking any LED\r\n");
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <SysTick_Handler+0x50>)
 8000d34:	f00a fd94 	bl	800b860 <puts>
	  i = 0;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <SysTick_Handler+0x48>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200100ae 	.word	0x200100ae
 8000d48:	2001085c 	.word	0x2001085c
 8000d4c:	0800c690 	.word	0x0800c690

08000d50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <OTG_FS_IRQHandler+0x10>)
 8000d56:	f001 fa69 	bl	800222c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200110c4 	.word	0x200110c4

08000d64 <EXTI15_10_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 ffac 	bl	8001cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e009      	b.n	8000dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fd67 	bl	800089c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf1      	blt.n	8000dc0 <_write+0x12>
	}
	return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f00a fb84 	bl	800b58c <__errno>
 8000e84:	4602      	mov	r2, r0
 8000e86:	230c      	movs	r3, #12
 8000e88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20080000 	.word	0x20080000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200100b0 	.word	0x200100b0
 8000eb8:	20011390 	.word	0x20011390

08000ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <SystemInit+0x28>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <SystemInit+0x28>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SystemInit+0x28>)
 8000ed2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eee:	e003      	b.n	8000ef8 <LoopCopyDataInit>

08000ef0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ef2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ef4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ef6:	3104      	adds	r1, #4

08000ef8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000efc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f00:	d3f6      	bcc.n	8000ef0 <CopyDataInit>
  ldr  r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f04:	e002      	b.n	8000f0c <LoopFillZerobss>

08000f06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f08:	f842 3b04 	str.w	r3, [r2], #4

08000f0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f10:	d3f9      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffd3 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f00a fb3f 	bl	800b598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fcd1 	bl	80008c0 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f24:	0800c858 	.word	0x0800c858
  ldr  r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f2c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f30:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f34:	2001138c 	.word	0x2001138c

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>

08000f3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f94a 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f805 	bl	8000f54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fe47 	bl	8000bdc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f965 	bl	8001242 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f92d 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20010860 	.word	0x20010860

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20010860 	.word	0x20010860

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_Delay+0x40>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <__NVIC_SetPriorityGrouping+0x40>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	4313      	orrs	r3, r2
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x40>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00
 800107c:	05fa0000 	.word	0x05fa0000

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff3e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff31 	bl	800109c <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_FLASH_Program+0xb0>)
 8001270:	7d1b      	ldrb	r3, [r3, #20]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_FLASH_Program+0x1e>
 8001276:	2302      	movs	r3, #2
 8001278:	e043      	b.n	8001302 <HAL_FLASH_Program+0xa6>
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_FLASH_Program+0xb0>)
 800127c:	2201      	movs	r2, #1
 800127e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001280:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001284:	f000 f8a4 	bl	80013d0 <FLASH_WaitForLastOperation>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d133      	bne.n	80012fa <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d823      	bhi.n	80012e0 <HAL_FLASH_Program+0x84>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_FLASH_Program+0x44>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012bd 	.word	0x080012bd
 80012a8:	080012c9 	.word	0x080012c9
 80012ac:	080012d5 	.word	0x080012d5
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80012b0:	783b      	ldrb	r3, [r7, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f000 f945 	bl	8001544 <FLASH_Program_Byte>
        break;
 80012ba:	e012      	b.n	80012e2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012bc:	883b      	ldrh	r3, [r7, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	68b8      	ldr	r0, [r7, #8]
 80012c2:	f000 f919 	bl	80014f8 <FLASH_Program_HalfWord>
        break;
 80012c6:	e00c      	b.n	80012e2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f000 f8ef 	bl	80014b0 <FLASH_Program_Word>
        break;
 80012d2:	e006      	b.n	80012e2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80012d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f000 f8b9 	bl	8001450 <FLASH_Program_DoubleWord>
        break;
 80012de:	e000      	b.n	80012e2 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80012e0:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012e6:	f000 f873 	bl	80013d0 <FLASH_WaitForLastOperation>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_FLASH_Program+0xb4>)
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_FLASH_Program+0xb4>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_FLASH_Program+0xb0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	751a      	strb	r2, [r3, #20]

  return status;
 8001300:	7dfb      	ldrb	r3, [r7, #23]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20010864 	.word	0x20010864
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_FLASH_Unlock+0x38>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	da0b      	bge.n	800133e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_FLASH_Unlock+0x38>)
 8001328:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_FLASH_Unlock+0x3c>)
 800132a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_FLASH_Unlock+0x38>)
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_FLASH_Unlock+0x40>)
 8001330:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_FLASH_Unlock+0x38>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	da01      	bge.n	800133e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800133e:	79fb      	ldrb	r3, [r7, #7]
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023c00 	.word	0x40023c00
 8001350:	45670123 	.word	0x45670123
 8001354:	cdef89ab 	.word	0xcdef89ab

08001358 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_FLASH_Lock+0x1c>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_FLASH_Lock+0x1c>)
 8001362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001366:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_FLASH_OB_Unlock+0x2c>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_FLASH_OB_Unlock+0x2c>)
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_FLASH_OB_Unlock+0x30>)
 800138c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_FLASH_OB_Unlock+0x34>)
 8001392:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40023c00 	.word	0x40023c00
 80013a8:	08192a3b 	.word	0x08192a3b
 80013ac:	4c5d6e7f 	.word	0x4c5d6e7f

080013b0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_FLASH_OB_Lock+0x1c>)
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_FLASH_OB_Lock+0x1c>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <FLASH_WaitForLastOperation+0x78>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013e2:	f7ff fdfb 	bl	8000fdc <HAL_GetTick>
 80013e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013e8:	e010      	b.n	800140c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d00c      	beq.n	800140c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <FLASH_WaitForLastOperation+0x38>
 80013f8:	f7ff fdf0 	bl	8000fdc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d201      	bcs.n	800140c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e019      	b.n	8001440 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <FLASH_WaitForLastOperation+0x7c>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e8      	bne.n	80013ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <FLASH_WaitForLastOperation+0x7c>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001424:	f000 f8b2 	bl	800158c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e009      	b.n	8001440 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <FLASH_WaitForLastOperation+0x7c>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <FLASH_WaitForLastOperation+0x7c>)
 800143a:	2201      	movs	r2, #1
 800143c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
  
}  
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20010864 	.word	0x20010864
 800144c:	40023c00 	.word	0x40023c00

08001450 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001450:	b490      	push	{r4, r7}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <FLASH_Program_DoubleWord+0x5c>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <FLASH_Program_DoubleWord+0x5c>)
 8001462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <FLASH_Program_DoubleWord+0x5c>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <FLASH_Program_DoubleWord+0x5c>)
 800146e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <FLASH_Program_DoubleWord+0x5c>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <FLASH_Program_DoubleWord+0x5c>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001486:	e9d7 1200 	ldrd	r1, r2, [r7]
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f04f 0400 	mov.w	r4, #0
 8001492:	0013      	movs	r3, r2
 8001494:	2400      	movs	r4, #0
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	3204      	adds	r2, #4
 800149a:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800149c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc90      	pop	{r4, r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <FLASH_Program_Word+0x44>)
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <FLASH_Program_Word+0x44>)
 80014c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <FLASH_Program_Word+0x44>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <FLASH_Program_Word+0x44>)
 80014cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <FLASH_Program_Word+0x44>)
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <FLASH_Program_Word+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <FLASH_Program_HalfWord+0x48>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <FLASH_Program_HalfWord+0x48>)
 800150a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <FLASH_Program_HalfWord+0x48>)
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <FLASH_Program_HalfWord+0x48>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <FLASH_Program_HalfWord+0x48>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <FLASH_Program_HalfWord+0x48>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00

08001544 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <FLASH_Program_Byte+0x44>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <FLASH_Program_Byte+0x44>)
 8001556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800155a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <FLASH_Program_Byte+0x44>)
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <FLASH_Program_Byte+0x44>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <FLASH_Program_Byte+0x44>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <FLASH_Program_Byte+0x44>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <FLASH_SetErrorCode+0x8c>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <FLASH_SetErrorCode+0x90>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015a6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <FLASH_SetErrorCode+0x8c>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015be:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <FLASH_SetErrorCode+0x8c>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015d6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <FLASH_SetErrorCode+0x8c>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <FLASH_SetErrorCode+0x8c>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <FLASH_SetErrorCode+0x90>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <FLASH_SetErrorCode+0x90>)
 8001606:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <FLASH_SetErrorCode+0x8c>)
 800160a:	22f2      	movs	r2, #242	; 0xf2
 800160c:	60da      	str	r2, [r3, #12]
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40023c00 	.word	0x40023c00
 800161c:	20010864 	.word	0x20010864

08001620 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_FLASHEx_Erase+0xd4>)
 8001634:	7d1b      	ldrb	r3, [r3, #20]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_FLASHEx_Erase+0x1e>
 800163a:	2302      	movs	r3, #2
 800163c:	e056      	b.n	80016ec <HAL_FLASHEx_Erase+0xcc>
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_FLASHEx_Erase+0xd4>)
 8001640:	2201      	movs	r2, #1
 8001642:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001648:	f7ff fec2 	bl	80013d0 <FLASH_WaitForLastOperation>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d146      	bne.n	80016e4 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d115      	bne.n	8001692 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f000 f870 	bl	8001758 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001678:	f24c 3050 	movw	r0, #50000	; 0xc350
 800167c:	f7ff fea8 	bl	80013d0 <FLASH_WaitForLastOperation>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_FLASHEx_Erase+0xdc>)
 800168c:	4013      	ands	r3, r2
 800168e:	610b      	str	r3, [r1, #16]
 8001690:	e028      	b.n	80016e4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	e01c      	b.n	80016d4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	68b8      	ldr	r0, [r7, #8]
 80016a4:	f000 f892 	bl	80017cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ac:	f7ff fe90 	bl	80013d0 <FLASH_WaitForLastOperation>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 80016ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80016be:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	601a      	str	r2, [r3, #0]
          break;
 80016cc:	e00a      	b.n	80016e4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d3da      	bcc.n	800169a <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_FLASHEx_Erase+0xd4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	751a      	strb	r2, [r3, #20]

  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20010864 	.word	0x20010864
 80016f8:	40023c00 	.word	0x40023c00
 80016fc:	ffff7ffb 	.word	0xffff7ffb

08001700 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	223f      	movs	r2, #63	; 0x3f
 800170c:	601a      	str	r2, [r3, #0]
	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;

  /*Get WRP*/
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800170e:	f000 f8ad 	bl	800186c <FLASH_OB_GetWRP>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001718:	f000 f8c8 	bl	80018ac <FLASH_OB_GetRDP>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001724:	f000 f8b2 	bl	800188c <FLASH_OB_GetUser>
 8001728:	4602      	mov	r2, r0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	615a      	str	r2, [r3, #20]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800172e:	f000 f8dd 	bl	80018ec <FLASH_OB_GetBOR>
 8001732:	4602      	mov	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
  
  /*Get Boot Address when Boot pin = 0 */
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8001738:	2010      	movs	r0, #16
 800173a:	f000 f8e5 	bl	8001908 <FLASH_OB_GetBootAddress>
 800173e:	4602      	mov	r2, r0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  
  /*Get Boot Address when Boot pin = 1 */
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 8001744:	2020      	movs	r0, #32
 8001746:	f000 f8df 	bl	8001908 <FLASH_OB_GetBootAddress>
 800174a:	4602      	mov	r2, r0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	61da      	str	r2, [r3, #28]
  pOBInit->PCROPSector = FLASH_OB_GetPCROP();
  
  /*Get PCROP_RDP Value */
  pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
#endif /* FLASH_OPTCR2_PCROP */
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <FLASH_MassErase+0x70>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <FLASH_MassErase+0x70>)
 800176a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800176e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <FLASH_MassErase+0x70>)
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	4913      	ldr	r1, [pc, #76]	; (80017c8 <FLASH_MassErase+0x70>)
 800177c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001780:	4313      	orrs	r3, r2
 8001782:	610b      	str	r3, [r1, #16]
 8001784:	e00f      	b.n	80017a6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d106      	bne.n	800179a <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <FLASH_MassErase+0x70>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <FLASH_MassErase+0x70>)
 8001792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001796:	6113      	str	r3, [r2, #16]
 8001798:	e005      	b.n	80017a6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <FLASH_MassErase+0x70>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <FLASH_MassErase+0x70>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <FLASH_MassErase+0x70>)
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	4313      	orrs	r3, r2
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <FLASH_MassErase+0x70>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6113      	str	r3, [r2, #16]
 80017b8:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40023c00 	.word	0x40023c00

080017cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e010      	b.n	800180a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d103      	bne.n	80017f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e009      	b.n	800180a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d103      	bne.n	8001804 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80017fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e002      	b.n	800180a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001804:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001808:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0b      	cmp	r3, #11
 800180e:	d902      	bls.n	8001816 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3304      	adds	r3, #4
 8001814:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 800181c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	4910      	ldr	r1, [pc, #64]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001834:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001838:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4313      	orrs	r3, r2
 8001844:	4a08      	ldr	r2, [pc, #32]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <FLASH_Erase_Sector+0x9c>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6113      	str	r3, [r2, #16]
 8001858:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40023c00 	.word	0x40023c00

0800186c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <FLASH_OB_GetWRP+0x18>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <FLASH_OB_GetWRP+0x1c>)
 8001876:	4013      	ands	r3, r2
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	0fff0000 	.word	0x0fff0000

0800188c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6), 
  *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <FLASH_OB_GetUser+0x18>)
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <FLASH_OB_GetUser+0x1c>)
 8001896:	4013      	ands	r3, r2
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	f00000f0 	.word	0xf00000f0

080018ac <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80018b2:	23aa      	movs	r3, #170	; 0xaa
 80018b4:	71fb      	strb	r3, [r7, #7]
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <FLASH_OB_GetRDP+0x3c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2baa      	cmp	r3, #170	; 0xaa
 80018be:	d102      	bne.n	80018c6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80018c0:	23aa      	movs	r3, #170	; 0xaa
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	e009      	b.n	80018da <FLASH_OB_GetRDP+0x2e>
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <FLASH_OB_GetRDP+0x3c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2bcc      	cmp	r3, #204	; 0xcc
 80018ce:	d102      	bne.n	80018d6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80018d0:	23cc      	movs	r3, #204	; 0xcc
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	e001      	b.n	80018da <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 80018d6:	2355      	movs	r3, #85	; 0x55
 80018d8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80018da:	79fb      	ldrb	r3, [r7, #7]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40023c15 	.word	0x40023c15

080018ec <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <FLASH_OB_GetBOR+0x18>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f003 030c 	and.w	r3, r3, #12
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <FLASH_OB_GetBootAddress>:
  *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
  *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
  *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
  */
static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
{  
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t Address = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d104      	bne.n	8001924 <FLASH_OB_GetBootAddress+0x1c>
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <FLASH_OB_GetBootAddress+0x34>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	b29b      	uxth	r3, r3
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e004      	b.n	800192e <FLASH_OB_GetBootAddress+0x26>
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <FLASH_OB_GetBootAddress+0x34>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	b29b      	uxth	r3, r3
 800192c:	60fb      	str	r3, [r7, #12]
	}

  return Address;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e175      	b.n	8001c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8164 	bne.w	8001c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d00b      	beq.n	800199e <HAL_GPIO_Init+0x5e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001992:	2b11      	cmp	r3, #17
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b12      	cmp	r3, #18
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x100>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80be 	beq.w	8001c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a64      	ldr	r2, [pc, #400]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ae2:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_GPIO_Init+0x328>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d037      	beq.n	8001b7e <HAL_GPIO_Init+0x23e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a56      	ldr	r2, [pc, #344]	; (8001c6c <HAL_GPIO_Init+0x32c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d031      	beq.n	8001b7a <HAL_GPIO_Init+0x23a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_GPIO_Init+0x330>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_GPIO_Init+0x236>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_GPIO_Init+0x334>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x232>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a53      	ldr	r2, [pc, #332]	; (8001c78 <HAL_GPIO_Init+0x338>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x22e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_GPIO_Init+0x33c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x22a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a51      	ldr	r2, [pc, #324]	; (8001c80 <HAL_GPIO_Init+0x340>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x226>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_GPIO_Init+0x344>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x222>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	; (8001c88 <HAL_GPIO_Init+0x348>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x21e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_GPIO_Init+0x34c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x21a>
 8001b56:	2309      	movs	r3, #9
 8001b58:	e012      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	e010      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b5e:	2308      	movs	r3, #8
 8001b60:	e00e      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b62:	2307      	movs	r3, #7
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b66:	2306      	movs	r3, #6
 8001b68:	e00a      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x240>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b90:	4934      	ldr	r1, [pc, #208]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc2:	4a33      	ldr	r2, [pc, #204]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bc8:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf2:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c16:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f ae86 	bls.w	8001960 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	3724      	adds	r7, #36	; 0x24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40021c00 	.word	0x40021c00
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40022400 	.word	0x40022400
 8001c90:	40013c00 	.word	0x40013c00

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cb0:	e003      	b.n	8001cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	041a      	lsls	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	619a      	str	r2, [r3, #24]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f806 	bl	8001cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d10:	b08f      	sub	sp, #60	; 0x3c
 8001d12:	af0a      	add	r7, sp, #40	; 0x28
 8001d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e054      	b.n	8001dca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f009 f94c 	bl	800afd8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fff1 	bl	8004d46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	687e      	ldr	r6, [r7, #4]
 8001d6c:	466d      	mov	r5, sp
 8001d6e:	f106 0410 	add.w	r4, r6, #16
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d82:	1d33      	adds	r3, r6, #4
 8001d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f002 ff74 	bl	8004c74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 ffe8 	bl	8004d68 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	687e      	ldr	r6, [r7, #4]
 8001da0:	466d      	mov	r5, sp
 8001da2:	f106 0410 	add.w	r4, r6, #16
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db6:	1d33      	adds	r3, r6, #4
 8001db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f003 f8fa 	bl	8004fb4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dd2:	b590      	push	{r4, r7, lr}
 8001dd4:	b089      	sub	sp, #36	; 0x24
 8001dd6:	af04      	add	r7, sp, #16
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	4608      	mov	r0, r1
 8001ddc:	4611      	mov	r1, r2
 8001dde:	461a      	mov	r2, r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	70fb      	strb	r3, [r7, #3]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70bb      	strb	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_HCD_HC_Init+0x28>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e07f      	b.n	8001efa <HAL_HCD_HC_Init+0x128>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	333d      	adds	r3, #61	; 0x3d
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	3338      	adds	r3, #56	; 0x38
 8001e26:	787a      	ldrb	r2, [r7, #1]
 8001e28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	3340      	adds	r3, #64	; 0x40
 8001e3a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e3c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3339      	adds	r3, #57	; 0x39
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	333f      	adds	r3, #63	; 0x3f
 8001e62:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	78bb      	ldrb	r3, [r7, #2]
 8001e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e70:	b2d8      	uxtb	r0, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	333a      	adds	r3, #58	; 0x3a
 8001e80:	4602      	mov	r2, r0
 8001e82:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da0a      	bge.n	8001ea2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	333b      	adds	r3, #59	; 0x3b
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e009      	b.n	8001eb6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	333b      	adds	r3, #59	; 0x3b
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	333c      	adds	r3, #60	; 0x3c
 8001ec6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eca:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	787c      	ldrb	r4, [r7, #1]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	78f9      	ldrb	r1, [r7, #3]
 8001ed6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	f003 f9da 	bl	80052a0 <USB_HC_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}

08001f02 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_HCD_HC_Halt+0x1e>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e00f      	b.n	8001f40 <HAL_HCD_HC_Halt+0x3e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fc14 	bl	800575e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	70fb      	strb	r3, [r7, #3]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70bb      	strb	r3, [r7, #2]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	333b      	adds	r3, #59	; 0x3b
 8001f72:	78ba      	ldrb	r2, [r7, #2]
 8001f74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	333f      	adds	r3, #63	; 0x3f
 8001f86:	787a      	ldrb	r2, [r7, #1]
 8001f88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f8a:	7c3b      	ldrb	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d114      	bne.n	8001fba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3342      	adds	r3, #66	; 0x42
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333d      	adds	r3, #61	; 0x3d
 8001fb4:	7f3a      	ldrb	r2, [r7, #28]
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e009      	b.n	8001fce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3342      	adds	r3, #66	; 0x42
 8001fca:	2202      	movs	r2, #2
 8001fcc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fce:	787b      	ldrb	r3, [r7, #1]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	f200 80d6 	bhi.w	8002182 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001fd6:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	0800216d 	.word	0x0800216d
 8001fe4:	08002059 	.word	0x08002059
 8001fe8:	080020e3 	.word	0x080020e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001fec:	7c3b      	ldrb	r3, [r7, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	f040 80c9 	bne.w	8002186 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001ff4:	78bb      	ldrb	r3, [r7, #2]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c5 	bne.w	8002186 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001ffc:	8b3b      	ldrh	r3, [r7, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3351      	adds	r3, #81	; 0x51
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3351      	adds	r3, #81	; 0x51
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	3342      	adds	r3, #66	; 0x42
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002040:	e0a1      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	3342      	adds	r3, #66	; 0x42
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
      break;
 8002056:	e096      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d120      	bne.n	80020a0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	3351      	adds	r3, #81	; 0x51
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3342      	adds	r3, #66	; 0x42
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002088:	e07e      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	3342      	adds	r3, #66	; 0x42
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
      break;
 800209e:	e073      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	3350      	adds	r3, #80	; 0x50
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3342      	adds	r3, #66	; 0x42
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
      break;
 80020ca:	e05d      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	3342      	adds	r3, #66	; 0x42
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
      break;
 80020e0:	e052      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d120      	bne.n	800212a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3351      	adds	r3, #81	; 0x51
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3342      	adds	r3, #66	; 0x42
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002112:	e039      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3342      	adds	r3, #66	; 0x42
 8002124:	2202      	movs	r2, #2
 8002126:	701a      	strb	r2, [r3, #0]
      break;
 8002128:	e02e      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3350      	adds	r3, #80	; 0x50
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3342      	adds	r3, #66	; 0x42
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
      break;
 8002154:	e018      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	3342      	adds	r3, #66	; 0x42
 8002166:	2202      	movs	r2, #2
 8002168:	701a      	strb	r2, [r3, #0]
      break;
 800216a:	e00d      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3342      	adds	r3, #66	; 0x42
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
      break;
 8002180:	e002      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002182:	bf00      	nop
 8002184:	e000      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002186:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3344      	adds	r3, #68	; 0x44
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	8b39      	ldrh	r1, [r7, #24]
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4403      	add	r3, r0
 80021ac:	3348      	adds	r3, #72	; 0x48
 80021ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	334c      	adds	r3, #76	; 0x4c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3339      	adds	r3, #57	; 0x39
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	335d      	adds	r3, #93	; 0x5d
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	3338      	adds	r3, #56	; 0x38
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	18d1      	adds	r1, r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	f003 f94a 	bl	80054b4 <USB_HC_StartXfer>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop

0800222c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fe73 	bl	8004f2e <USB_GetMode>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	f040 80ef 	bne.w	800242e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fe57 	bl	8004f08 <USB_ReadInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80e5 	beq.w	800242c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fe4e 	bl	8004f08 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002276:	d104      	bne.n	8002282 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fe3e 	bl	8004f08 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002296:	d104      	bne.n	80022a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fe2e 	bl	8004f08 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b6:	d104      	bne.n	80022c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fe1e 	bl	8004f08 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d103      	bne.n	80022de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2202      	movs	r2, #2
 80022dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fe10 	bl	8004f08 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f2:	d115      	bne.n	8002320 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022fc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f008 fee2 	bl	800b0d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fefa 	bl	8005114 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fdef 	bl	8004f08 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d102      	bne.n	800233c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f001 f966 	bl	8003608 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fde1 	bl	8004f08 <USB_ReadInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d106      	bne.n	800235e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f008 fea5 	bl	800b0a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2208      	movs	r2, #8
 800235c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fdd0 	bl	8004f08 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002372:	d138      	bne.n	80023e6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 f9df 	bl	800573c <USB_HC_ReadInterrupt>
 800237e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e025      	b.n	80023d2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d018      	beq.n	80023cc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b0:	d106      	bne.n	80023c0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8cf 	bl	800255c <HCD_HC_IN_IRQHandler>
 80023be:	e005      	b.n	80023cc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fcfd 	bl	8002dc6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3d4      	bcc.n	8002386 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fd8c 	bl	8004f08 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d101      	bne.n	80023fe <HAL_HCD_IRQHandler+0x1d2>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_HCD_IRQHandler+0x1d4>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d014      	beq.n	800242e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0210 	bic.w	r2, r2, #16
 8002412:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 f84b 	bl	80034b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0210 	orr.w	r2, r2, #16
 8002428:	619a      	str	r2, [r3, #24]
 800242a:	e000      	b.n	800242e <HAL_HCD_IRQHandler+0x202>
      return;
 800242c:	bf00      	nop
    }
  }
}
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_HCD_Start+0x16>
 8002446:	2302      	movs	r3, #2
 8002448:	e013      	b.n	8002472 <HAL_HCD_Start+0x3e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fc64 	bl	8004d24 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f002 feba 	bl	80051dc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_HCD_Stop+0x16>
 800248c:	2302      	movs	r3, #2
 800248e:	e00d      	b.n	80024ac <HAL_HCD_Stop+0x32>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fa99 	bl	80059d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fe61 	bl	8005188 <USB_ResetPort>
 80024c6:	4603      	mov	r3, r0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	335c      	adds	r3, #92	; 0x5c
 80024ec:	781b      	ldrb	r3, [r3, #0]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	334c      	adds	r3, #76	; 0x4c
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fea3 	bl	800527c <USB_GetCurrentFrame>
 8002536:	4603      	mov	r3, r0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fe7e 	bl	800524e <USB_GetHostSpeed>
 8002552:	4603      	mov	r3, r0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d119      	bne.n	80025c0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2304      	movs	r3, #4
 800259c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	0151      	lsls	r1, r2, #5
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	440a      	add	r2, r1
 80025b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	60d3      	str	r3, [r2, #12]
 80025be:	e0ce      	b.n	800275e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	d12c      	bne.n	8002632 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	335d      	adds	r3, #93	; 0x5d
 80025fc:	2207      	movs	r2, #7
 80025fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	0151      	lsls	r1, r2, #5
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	440a      	add	r2, r1
 8002616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f003 f897 	bl	800575e <USB_HC_Halt>
 8002630:	e095      	b.n	800275e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b20      	cmp	r3, #32
 8002646:	d109      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	2320      	movs	r3, #32
 8002658:	6093      	str	r3, [r2, #8]
 800265a:	e080      	b.n	800275e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	d134      	bne.n	80026dc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	440a      	add	r2, r1
 8002688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	335d      	adds	r3, #93	; 0x5d
 80026a2:	2205      	movs	r2, #5
 80026a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	2310      	movs	r3, #16
 80026b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2308      	movs	r3, #8
 80026c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 f842 	bl	800575e <USB_HC_Halt>
 80026da:	e040      	b.n	800275e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d134      	bne.n	800275e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	440a      	add	r2, r1
 800270a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f81d 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2310      	movs	r3, #16
 8002734:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	335d      	adds	r3, #93	; 0x5d
 8002746:	2208      	movs	r2, #8
 8002748:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002774:	d122      	bne.n	80027bc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	0151      	lsls	r1, r2, #5
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	440a      	add	r2, r1
 800278c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 ffdc 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	461a      	mov	r2, r3
 80027b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027ba:	e300      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f040 80fd 	bne.w	80029ce <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3348      	adds	r3, #72	; 0x48
 80027ec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0159      	lsls	r1, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002800:	1ad1      	subs	r1, r2, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4403      	add	r3, r0
 8002810:	334c      	adds	r3, #76	; 0x4c
 8002812:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	335d      	adds	r3, #93	; 0x5d
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3358      	adds	r3, #88	; 0x58
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	461a      	mov	r2, r3
 800284a:	2301      	movs	r3, #1
 800284c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	333f      	adds	r3, #63	; 0x3f
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	333f      	adds	r3, #63	; 0x3f
 8002874:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002876:	2b02      	cmp	r3, #2
 8002878:	d121      	bne.n	80028be <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	0151      	lsls	r1, r2, #5
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	440a      	add	r2, r1
 8002890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 ff5a 	bl	800575e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	2310      	movs	r3, #16
 80028ba:	6093      	str	r3, [r2, #8]
 80028bc:	e070      	b.n	80029a0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	333f      	adds	r3, #63	; 0x3f
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d12a      	bne.n	800292a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	0151      	lsls	r1, r2, #5
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	440a      	add	r2, r1
 80028ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028f2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	335c      	adds	r3, #92	; 0x5c
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	b2d8      	uxtb	r0, r3
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	335c      	adds	r3, #92	; 0x5c
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4601      	mov	r1, r0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f008 fbe6 	bl	800b0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002928:	e03a      	b.n	80029a0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	333f      	adds	r3, #63	; 0x3f
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d12f      	bne.n	80029a0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	335c      	adds	r3, #92	; 0x5c
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3350      	adds	r3, #80	; 0x50
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2d8      	uxtb	r0, r3
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3350      	adds	r3, #80	; 0x50
 800297c:	4602      	mov	r2, r0
 800297e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	b2d8      	uxtb	r0, r3
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4601      	mov	r1, r0
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f008 fbaa 	bl	800b0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	3350      	adds	r3, #80	; 0x50
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2d8      	uxtb	r0, r3
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3350      	adds	r3, #80	; 0x50
 80029c8:	4602      	mov	r2, r0
 80029ca:	701a      	strb	r2, [r3, #0]
}
 80029cc:	e1f7      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f040 811a 	bne.w	8002c1a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a00:	f023 0302 	bic.w	r3, r3, #2
 8002a04:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	335d      	adds	r3, #93	; 0x5d
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10a      	bne.n	8002a32 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	335c      	adds	r3, #92	; 0x5c
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e0d9      	b.n	8002be6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	335d      	adds	r3, #93	; 0x5d
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d10a      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	335c      	adds	r3, #92	; 0x5c
 8002a58:	2205      	movs	r2, #5
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e0c3      	b.n	8002be6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	335d      	adds	r3, #93	; 0x5d
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d00a      	beq.n	8002a8a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	335d      	adds	r3, #93	; 0x5d
 8002a84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d156      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	3358      	adds	r3, #88	; 0x58
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	1c59      	adds	r1, r3, #1
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4403      	add	r3, r0
 8002aac:	3358      	adds	r3, #88	; 0x58
 8002aae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	3358      	adds	r3, #88	; 0x58
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d914      	bls.n	8002af0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3358      	adds	r3, #88	; 0x58
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	335c      	adds	r3, #92	; 0x5c
 8002aea:	2204      	movs	r2, #4
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e009      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e056      	b.n	8002be6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	335d      	adds	r3, #93	; 0x5d
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d123      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	335c      	adds	r3, #92	; 0x5c
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b78:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b80:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e027      	b.n	8002be6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335d      	adds	r3, #93	; 0x5d
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b07      	cmp	r3, #7
 8002baa:	d11c      	bne.n	8002be6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	3358      	adds	r3, #88	; 0x58
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1c59      	adds	r1, r3, #1
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4403      	add	r3, r0
 8002bce:	3358      	adds	r3, #88	; 0x58
 8002bd0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	440b      	add	r3, r1
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	2204      	movs	r2, #4
 8002be4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	b2d8      	uxtb	r0, r3
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	335c      	adds	r3, #92	; 0x5c
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4601      	mov	r1, r0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f008 fa6e 	bl	800b0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c18:	e0d1      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d13e      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	0151      	lsls	r1, r2, #5
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	440a      	add	r2, r1
 8002c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3358      	adds	r3, #88	; 0x58
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1c59      	adds	r1, r3, #1
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4403      	add	r3, r0
 8002c72:	3358      	adds	r3, #88	; 0x58
 8002c74:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	335d      	adds	r3, #93	; 0x5d
 8002c86:	2206      	movs	r2, #6
 8002c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fd62 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	6093      	str	r3, [r2, #8]
}
 8002cac:	e087      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d17c      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	333f      	adds	r3, #63	; 0x3f
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d122      	bne.n	8002d20 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3358      	adds	r3, #88	; 0x58
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	0151      	lsls	r1, r2, #5
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	440a      	add	r2, r1
 8002d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fd20 	bl	800575e <USB_HC_Halt>
 8002d1e:	e045      	b.n	8002dac <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	333f      	adds	r3, #63	; 0x3f
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	333f      	adds	r3, #63	; 0x3f
 8002d46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d12f      	bne.n	8002dac <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3358      	adds	r3, #88	; 0x58
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d121      	bne.n	8002dac <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335d      	adds	r3, #93	; 0x5d
 8002d78:	2203      	movs	r2, #3
 8002d7a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	0151      	lsls	r1, r2, #5
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	440a      	add	r2, r1
 8002d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fcd9 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2310      	movs	r3, #16
 8002dbc:	6093      	str	r3, [r2, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d119      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	2304      	movs	r3, #4
 8002e06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	0151      	lsls	r1, r2, #5
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e28:	e33e      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d141      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2320      	movs	r3, #32
 8002e50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	333d      	adds	r3, #61	; 0x3d
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 831f 	bne.w	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	333d      	adds	r3, #61	; 0x3d
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	335c      	adds	r3, #92	; 0x5c
 8002e8e:	2202      	movs	r2, #2
 8002e90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	0151      	lsls	r1, r2, #5
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	440a      	add	r2, r1
 8002ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fc4e 	bl	800575e <USB_HC_Halt>
}
 8002ec2:	e2f1      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d13f      	bne.n	8002f5a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	335d      	adds	r3, #93	; 0x5d
 8002eea:	2204      	movs	r2, #4
 8002eec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	333d      	adds	r3, #61	; 0x3d
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3358      	adds	r3, #88	; 0x58
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fc0c 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	461a      	mov	r2, r3
 8002f54:	2340      	movs	r3, #64	; 0x40
 8002f56:	6093      	str	r3, [r2, #8]
}
 8002f58:	e2a6      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f70:	d122      	bne.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	0151      	lsls	r1, r2, #5
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	440a      	add	r2, r1
 8002f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 fbde 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb4:	6093      	str	r3, [r2, #8]
}
 8002fb6:	e277      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d135      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	3358      	adds	r3, #88	; 0x58
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fba6 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	2301      	movs	r3, #1
 8003022:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	335d      	adds	r3, #93	; 0x5d
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
}
 8003038:	e236      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d12b      	bne.n	80030a8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2308      	movs	r3, #8
 8003060:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	0151      	lsls	r1, r2, #5
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	440a      	add	r2, r1
 8003078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fb66 	bl	800575e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	335d      	adds	r3, #93	; 0x5d
 80030a2:	2205      	movs	r2, #5
 80030a4:	701a      	strb	r2, [r3, #0]
}
 80030a6:	e1ff      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d155      	bne.n	800316a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	3358      	adds	r3, #88	; 0x58
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	335d      	adds	r3, #93	; 0x5d
 80030e2:	2203      	movs	r2, #3
 80030e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	333d      	adds	r3, #61	; 0x3d
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d114      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	333c      	adds	r3, #60	; 0x3c
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	333d      	adds	r3, #61	; 0x3d
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	440a      	add	r2, r1
 800313c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f002 fb04 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	461a      	mov	r2, r3
 8003164:	2310      	movs	r3, #16
 8003166:	6093      	str	r3, [r2, #8]
}
 8003168:	e19e      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d12b      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	440a      	add	r2, r1
 8003196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f002 fad7 	bl	800575e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335d      	adds	r3, #93	; 0x5d
 80031c0:	2206      	movs	r2, #6
 80031c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	6093      	str	r3, [r2, #8]
}
 80031d6:	e167      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d135      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	0151      	lsls	r1, r2, #5
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	440a      	add	r2, r1
 8003206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fa9f 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	2310      	movs	r3, #16
 8003230:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	335d      	adds	r3, #93	; 0x5d
 8003256:	2208      	movs	r2, #8
 8003258:	701a      	strb	r2, [r3, #0]
}
 800325a:	e125      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	f040 811a 	bne.w	80034a8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	440a      	add	r2, r1
 800328a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328e:	f023 0302 	bic.w	r3, r3, #2
 8003292:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	335d      	adds	r3, #93	; 0x5d
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d137      	bne.n	800331a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	335c      	adds	r3, #92	; 0x5c
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	333f      	adds	r3, #63	; 0x3f
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d00b      	beq.n	80032ec <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	333f      	adds	r3, #63	; 0x3f
 80032e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	f040 80c5 	bne.w	8003476 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	3351      	adds	r3, #81	; 0x51
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2d8      	uxtb	r0, r3
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	3351      	adds	r3, #81	; 0x51
 8003314:	4602      	mov	r2, r0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e0ad      	b.n	8003476 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	335d      	adds	r3, #93	; 0x5d
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d10a      	bne.n	8003346 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	335c      	adds	r3, #92	; 0x5c
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e097      	b.n	8003476 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	335d      	adds	r3, #93	; 0x5d
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d10a      	bne.n	8003372 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	335c      	adds	r3, #92	; 0x5c
 800336c:	2202      	movs	r2, #2
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e081      	b.n	8003476 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	335d      	adds	r3, #93	; 0x5d
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b05      	cmp	r3, #5
 8003386:	d10a      	bne.n	800339e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	335c      	adds	r3, #92	; 0x5c
 8003398:	2205      	movs	r2, #5
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e06b      	b.n	8003476 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	335d      	adds	r3, #93	; 0x5d
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b06      	cmp	r3, #6
 80033b2:	d00a      	beq.n	80033ca <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	440b      	add	r3, r1
 80033c2:	335d      	adds	r3, #93	; 0x5d
 80033c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d155      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3358      	adds	r3, #88	; 0x58
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	1c59      	adds	r1, r3, #1
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4403      	add	r3, r0
 80033ec:	3358      	adds	r3, #88	; 0x58
 80033ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	3358      	adds	r3, #88	; 0x58
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d914      	bls.n	8003430 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	3358      	adds	r3, #88	; 0x58
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	335c      	adds	r3, #92	; 0x5c
 800342a:	2204      	movs	r2, #4
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e009      	b.n	8003444 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	335c      	adds	r3, #92	; 0x5c
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800345a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003462:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	461a      	mov	r2, r3
 8003484:	2302      	movs	r3, #2
 8003486:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	b2d8      	uxtb	r0, r3
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	335c      	adds	r3, #92	; 0x5c
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	4601      	mov	r1, r0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f007 fe26 	bl	800b0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	0c5b      	lsrs	r3, r3, #17
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d003      	beq.n	80034f4 <HCD_RXQLVL_IRQHandler+0x44>
 80034ec:	2b05      	cmp	r3, #5
 80034ee:	f000 8082 	beq.w	80035f6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034f2:	e083      	b.n	80035fc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07f      	beq.n	80035fa <HCD_RXQLVL_IRQHandler+0x14a>
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	3344      	adds	r3, #68	; 0x44
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d074      	beq.n	80035fa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3344      	adds	r3, #68	; 0x44
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	b292      	uxth	r2, r2
 800352a:	4619      	mov	r1, r3
 800352c:	f001 fcc3 	bl	8004eb6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	3344      	adds	r3, #68	; 0x44
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	18d1      	adds	r1, r2, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4403      	add	r3, r0
 8003554:	3344      	adds	r3, #68	; 0x44
 8003556:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	334c      	adds	r3, #76	; 0x4c
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	18d1      	adds	r1, r2, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4403      	add	r3, r0
 800357c:	334c      	adds	r3, #76	; 0x4c
 800357e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HCD_RXQLVL_IRQHandler+0x154>)
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d031      	beq.n	80035fa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	3350      	adds	r3, #80	; 0x50
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2d8      	uxtb	r0, r3
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	3350      	adds	r3, #80	; 0x50
 80035f0:	4602      	mov	r2, r0
 80035f2:	701a      	strb	r2, [r3, #0]
      break;
 80035f4:	e001      	b.n	80035fa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80035fa:	bf00      	nop
  }
}
 80035fc:	bf00      	nop
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	1ff80000 	.word	0x1ff80000

08003608 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003634:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d10b      	bne.n	8003658 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f007 fd36 	bl	800b0bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b08      	cmp	r3, #8
 8003660:	d132      	bne.n	80036c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f043 0308 	orr.w	r3, r3, #8
 8003668:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d126      	bne.n	80036c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d113      	bne.n	80036a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003682:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003686:	d106      	bne.n	8003696 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fd40 	bl	8005114 <USB_InitFSLSPClkSel>
 8003694:	e011      	b.n	80036ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fd39 	bl	8005114 <USB_InitFSLSPClkSel>
 80036a2:	e00a      	b.n	80036ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b2:	461a      	mov	r2, r3
 80036b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f007 fd28 	bl	800b110 <HAL_HCD_PortEnabled_Callback>
 80036c0:	e002      	b.n	80036c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f007 fd32 	bl	800b12c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d103      	bne.n	80036da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f043 0320 	orr.w	r3, r3, #32
 80036d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036e0:	461a      	mov	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6013      	str	r3, [r2, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <HAL_PWREx_EnableOverDrive+0x98>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a22      	ldr	r2, [pc, #136]	; (8003788 <HAL_PWREx_EnableOverDrive+0x98>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_PWREx_EnableOverDrive+0x98>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800371e:	f7fd fc5d 	bl	8000fdc <HAL_GetTick>
 8003722:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003724:	e009      	b.n	800373a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003726:	f7fd fc59 	bl	8000fdc <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003734:	d901      	bls.n	800373a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e022      	b.n	8003780 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d1ee      	bne.n	8003726 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003754:	f7fd fc42 	bl	8000fdc <HAL_GetTick>
 8003758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800375a:	e009      	b.n	8003770 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800375c:	f7fd fc3e 	bl	8000fdc <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800376a:	d901      	bls.n	8003770 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e007      	b.n	8003780 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800377c:	d1ee      	bne.n	800375c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003796:	f7fd fc21 	bl	8000fdc <HAL_GetTick>
 800379a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a65      	ldr	r2, [pc, #404]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fd fc17 	bl	8000fdc <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0b8      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80037bc:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5a      	ldr	r2, [pc, #360]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80037ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80037d4:	f7fd fc02 	bl	8000fdc <HAL_GetTick>
 80037d8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80037da:	4b57      	ldr	r3, [pc, #348]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fd fbfb 	bl	8000fdc <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e09a      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80037f8:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003804:	f7fd fbea 	bl	8000fdc <HAL_GetTick>
 8003808:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800380a:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a4a      	ldr	r2, [pc, #296]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003810:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003814:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fd fbe0 	bl	8000fdc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e081      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800382a:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003836:	f7fd fbd1 	bl	8000fdc <HAL_GetTick>
 800383a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800383c:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3d      	ldr	r2, [pc, #244]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003846:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fd fbc7 	bl	8000fdc <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e068      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003868:	f7fd fbb8 	bl	8000fdc <HAL_GetTick>
 800386c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800386e:	4b32      	ldr	r3, [pc, #200]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a31      	ldr	r2, [pc, #196]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003874:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003878:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800387c:	f7fd fbae 	bl	8000fdc <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04f      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800388e:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800389a:	f7fd fb9f 	bl	8000fdc <HAL_GetTick>
 800389e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038ae:	f7fd fb95 	bl	8000fdc <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b64      	cmp	r3, #100	; 0x64
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e036      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038ce:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_RCC_DeInit+0x1ac>)
 80038d0:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038d4:	4a1a      	ldr	r2, [pc, #104]	; (8003940 <HAL_RCC_DeInit+0x1b0>)
 80038d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_RCC_DeInit+0x1b0>)
 80038de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ec:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f8:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <HAL_RCC_DeInit+0x1a8>)
 800390c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003910:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCC_DeInit+0x1b4>)
 8003914:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <HAL_RCC_DeInit+0x1b8>)
 8003916:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_RCC_DeInit+0x1bc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fb19 	bl	8000f54 <HAL_InitTick>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 800392c:	2300      	movs	r3, #0
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	24003010 	.word	0x24003010
 8003940:	24003000 	.word	0x24003000
 8003944:	20000000 	.word	0x20000000
 8003948:	00f42400 	.word	0x00f42400
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e29b      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8087 	beq.w	8003a82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003974:	4b96      	ldr	r3, [pc, #600]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b04      	cmp	r3, #4
 800397e:	d00c      	beq.n	800399a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003980:	4b93      	ldr	r3, [pc, #588]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d112      	bne.n	80039b2 <HAL_RCC_OscConfig+0x62>
 800398c:	4b90      	ldr	r3, [pc, #576]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d10b      	bne.n	80039b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399a:	4b8d      	ldr	r3, [pc, #564]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d06c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x130>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d168      	bne.n	8003a80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e275      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x7a>
 80039bc:	4b84      	ldr	r3, [pc, #528]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a83      	ldr	r2, [pc, #524]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e02e      	b.n	8003a28 <HAL_RCC_OscConfig+0xd8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x9c>
 80039d2:	4b7f      	ldr	r3, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7e      	ldr	r2, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b7c      	ldr	r3, [pc, #496]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a7b      	ldr	r2, [pc, #492]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xd8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0xc0>
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a72      	ldr	r2, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xd8>
 8003a10:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b6c      	ldr	r3, [pc, #432]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a6b      	ldr	r2, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fad4 	bl	8000fdc <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fad0 	bl	8000fdc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e229      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xe8>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fac0 	bl	8000fdc <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fabc 	bl	8000fdc <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e215      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	4b57      	ldr	r3, [pc, #348]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x110>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d069      	beq.n	8003b62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8e:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b4d      	ldr	r3, [pc, #308]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d11c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x190>
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d116      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x17a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1e9      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	493d      	ldr	r1, [pc, #244]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	e040      	b.n	8003b62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d023      	beq.n	8003b30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fa72 	bl	8000fdc <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fd fa6e 	bl	8000fdc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1c7      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]
 8003b2e:	e018      	b.n	8003b62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b30:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fa4e 	bl	8000fdc <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b44:	f7fd fa4a 	bl	8000fdc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1a3      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d038      	beq.n	8003be0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d019      	beq.n	8003baa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd fa2b 	bl	8000fdc <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fd fa27 	bl	8000fdc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e180      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x23a>
 8003ba8:	e01a      	b.n	8003be0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb6:	f7fd fa11 	bl	8000fdc <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fa0d 	bl	8000fdc <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d903      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e166      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
 8003bd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ee      	bne.n	8003bbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80a4 	beq.w	8003d36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bee:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a88      	ldr	r2, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b86      	ldr	r3, [pc, #536]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c16:	4b83      	ldr	r3, [pc, #524]	; (8003e24 <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c22:	4b80      	ldr	r3, [pc, #512]	; (8003e24 <HAL_RCC_OscConfig+0x4d4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7f      	ldr	r2, [pc, #508]	; (8003e24 <HAL_RCC_OscConfig+0x4d4>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd f9d5 	bl	8000fdc <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fd f9d1 	bl	8000fdc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b64      	cmp	r3, #100	; 0x64
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e12a      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c48:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x4d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x31a>
 8003c5c:	4b70      	ldr	r3, [pc, #448]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a6f      	ldr	r2, [pc, #444]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	e02d      	b.n	8003cc6 <HAL_RCC_OscConfig+0x376>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x33c>
 8003c72:	4b6b      	ldr	r3, [pc, #428]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a6a      	ldr	r2, [pc, #424]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7e:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a67      	ldr	r2, [pc, #412]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	e01c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x376>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d10c      	bne.n	8003cae <HAL_RCC_OscConfig+0x35e>
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x376>
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d015      	beq.n	8003cfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd f985 	bl	8000fdc <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fd f981 	bl	8000fdc <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0d8      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ee      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x386>
 8003cf8:	e014      	b.n	8003d24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fd f96f 	bl	8000fdc <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fd f96b 	bl	8000fdc <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0c2      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ee      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80ae 	beq.w	8003e9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d40:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d06d      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d14b      	bne.n	8003dec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd f93c 	bl	8000fdc <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fd f938 	bl	8000fdc <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e091      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	071b      	lsls	r3, r3, #28
 8003db2:	491b      	ldr	r1, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd f90a 	bl	8000fdc <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd f906 	bl	8000fdc <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e05f      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x47c>
 8003dea:	e057      	b.n	8003e9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd f8f0 	bl	8000fdc <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd f8ec 	bl	8000fdc <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e045      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4b0>
 8003e1e:	e03d      	b.n	8003e9c <HAL_RCC_OscConfig+0x54c>
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e28:	4b1f      	ldr	r3, [pc, #124]	; (8003ea8 <HAL_RCC_OscConfig+0x558>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d030      	beq.n	8003e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d129      	bne.n	8003e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d122      	bne.n	8003e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d119      	bne.n	8003e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	3b01      	subs	r3, #1
 8003e72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d10f      	bne.n	8003e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800

08003eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0d0      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d910      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b67      	ldr	r3, [pc, #412]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 020f 	bic.w	r2, r3, #15
 8003eda:	4965      	ldr	r1, [pc, #404]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b63      	ldr	r3, [pc, #396]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0b8      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d020      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f0c:	4b59      	ldr	r3, [pc, #356]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a58      	ldr	r2, [pc, #352]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a52      	ldr	r2, [pc, #328]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	494d      	ldr	r1, [pc, #308]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d040      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d115      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07f      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e073      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7e:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06b      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8e:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 0203 	bic.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4936      	ldr	r1, [pc, #216]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa0:	f7fd f81c 	bl	8000fdc <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa8:	f7fd f818 	bl	8000fdc <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e053      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 020c 	and.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1eb      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d210      	bcs.n	8004000 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 020f 	bic.w	r2, r3, #15
 8003fe6:	4922      	ldr	r1, [pc, #136]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e032      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4916      	ldr	r1, [pc, #88]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	490e      	ldr	r1, [pc, #56]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800403e:	f000 f821 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004042:	4601      	mov	r1, r0
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_RCC_ClockConfig+0x1cc>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	fa21 f303 	lsr.w	r3, r1, r3
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x1d0>)
 8004058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc ff78 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00
 8004074:	40023800 	.word	0x40023800
 8004078:	0800c704 	.word	0x0800c704
 800407c:	20000000 	.word	0x20000000
 8004080:	20000004 	.word	0x20000004

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d007      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x32>
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d008      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x38>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 80b4 	bne.w	8004218 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b5e      	ldr	r3, [pc, #376]	; (800422c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040b2:	60bb      	str	r3, [r7, #8]
      break;
 80040b4:	e0b3      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b6:	4b5e      	ldr	r3, [pc, #376]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040b8:	60bb      	str	r3, [r7, #8]
      break;
 80040ba:	e0b0      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040c6:	4b58      	ldr	r3, [pc, #352]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04a      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b55      	ldr	r3, [pc, #340]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	ea03 0501 	and.w	r5, r3, r1
 80040e8:	ea04 0602 	and.w	r6, r4, r2
 80040ec:	4629      	mov	r1, r5
 80040ee:	4632      	mov	r2, r6
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	0154      	lsls	r4, r2, #5
 80040fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040fe:	014b      	lsls	r3, r1, #5
 8004100:	4619      	mov	r1, r3
 8004102:	4622      	mov	r2, r4
 8004104:	1b49      	subs	r1, r1, r5
 8004106:	eb62 0206 	sbc.w	r2, r2, r6
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	f04f 0400 	mov.w	r4, #0
 8004112:	0194      	lsls	r4, r2, #6
 8004114:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004118:	018b      	lsls	r3, r1, #6
 800411a:	1a5b      	subs	r3, r3, r1
 800411c:	eb64 0402 	sbc.w	r4, r4, r2
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	00e2      	lsls	r2, r4, #3
 800412a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800412e:	00d9      	lsls	r1, r3, #3
 8004130:	460b      	mov	r3, r1
 8004132:	4614      	mov	r4, r2
 8004134:	195b      	adds	r3, r3, r5
 8004136:	eb44 0406 	adc.w	r4, r4, r6
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	0262      	lsls	r2, r4, #9
 8004144:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004148:	0259      	lsls	r1, r3, #9
 800414a:	460b      	mov	r3, r1
 800414c:	4614      	mov	r4, r2
 800414e:	4618      	mov	r0, r3
 8004150:	4621      	mov	r1, r4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	461a      	mov	r2, r3
 800415a:	4623      	mov	r3, r4
 800415c:	f7fc f8c0 	bl	80002e0 <__aeabi_uldivmod>
 8004160:	4603      	mov	r3, r0
 8004162:	460c      	mov	r4, r1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e049      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004168:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	f04f 0400 	mov.w	r4, #0
 8004172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	ea03 0501 	and.w	r5, r3, r1
 800417e:	ea04 0602 	and.w	r6, r4, r2
 8004182:	4629      	mov	r1, r5
 8004184:	4632      	mov	r2, r6
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	f04f 0400 	mov.w	r4, #0
 800418e:	0154      	lsls	r4, r2, #5
 8004190:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004194:	014b      	lsls	r3, r1, #5
 8004196:	4619      	mov	r1, r3
 8004198:	4622      	mov	r2, r4
 800419a:	1b49      	subs	r1, r1, r5
 800419c:	eb62 0206 	sbc.w	r2, r2, r6
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	f04f 0400 	mov.w	r4, #0
 80041a8:	0194      	lsls	r4, r2, #6
 80041aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	1a5b      	subs	r3, r3, r1
 80041b2:	eb64 0402 	sbc.w	r4, r4, r2
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	00e2      	lsls	r2, r4, #3
 80041c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041c4:	00d9      	lsls	r1, r3, #3
 80041c6:	460b      	mov	r3, r1
 80041c8:	4614      	mov	r4, r2
 80041ca:	195b      	adds	r3, r3, r5
 80041cc:	eb44 0406 	adc.w	r4, r4, r6
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	02a2      	lsls	r2, r4, #10
 80041da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041de:	0299      	lsls	r1, r3, #10
 80041e0:	460b      	mov	r3, r1
 80041e2:	4614      	mov	r4, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	4621      	mov	r1, r4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4623      	mov	r3, r4
 80041f2:	f7fc f875 	bl	80002e0 <__aeabi_uldivmod>
 80041f6:	4603      	mov	r3, r0
 80041f8:	460c      	mov	r4, r1
 80041fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	3301      	adds	r3, #1
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	60bb      	str	r3, [r7, #8]
      break;
 8004216:	e002      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800421a:	60bb      	str	r3, [r7, #8]
      break;
 800421c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421e:	68bb      	ldr	r3, [r7, #8]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200

08004234 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_RCC_GetHCLKFreq+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff0 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004254:	4601      	mov	r1, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4a03      	ldr	r2, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	0800c714 	.word	0x0800c714

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffdc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800427c:	4601      	mov	r1, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0b5b      	lsrs	r3, r3, #13
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4a03      	ldr	r2, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	0800c714 	.word	0x0800c714

0800429c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e040      	b.n	8004330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fcb0 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f8be 	bl	800445c <UART_SetConfig>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e022      	b.n	8004330 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fb5c 	bl	80049b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fbe3 	bl	8004af4 <UART_CheckIdleState>
 800432e:	4603      	mov	r3, r0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	2b20      	cmp	r3, #32
 800434e:	d17f      	bne.n	8004450 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Transmit+0x24>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e078      	b.n	8004452 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit+0x36>
 800436a:	2302      	movs	r3, #2
 800436c:	e071      	b.n	8004452 <HAL_UART_Transmit+0x11a>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004382:	f7fc fe2b 	bl	8000fdc <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x7c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80043c4:	e02c      	b.n	8004420 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fbd4 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e038      	b.n	8004452 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e007      	b.n	800440e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1cc      	bne.n	80043c6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2200      	movs	r2, #0
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fba1 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e005      	b.n	8004452 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4bb1      	ldr	r3, [pc, #708]	; (8004750 <UART_SetConfig+0x2f4>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6939      	ldr	r1, [r7, #16]
 8004494:	430b      	orrs	r3, r1
 8004496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a9f      	ldr	r2, [pc, #636]	; (8004754 <UART_SetConfig+0x2f8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d121      	bne.n	8004520 <UART_SetConfig+0xc4>
 80044dc:	4b9e      	ldr	r3, [pc, #632]	; (8004758 <UART_SetConfig+0x2fc>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d816      	bhi.n	8004518 <UART_SetConfig+0xbc>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0x94>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004501 	.word	0x08004501
 80044f4:	0800450d 	.word	0x0800450d
 80044f8:	08004507 	.word	0x08004507
 80044fc:	08004513 	.word	0x08004513
 8004500:	2301      	movs	r3, #1
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e151      	b.n	80047aa <UART_SetConfig+0x34e>
 8004506:	2302      	movs	r3, #2
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e14e      	b.n	80047aa <UART_SetConfig+0x34e>
 800450c:	2304      	movs	r3, #4
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e14b      	b.n	80047aa <UART_SetConfig+0x34e>
 8004512:	2308      	movs	r3, #8
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e148      	b.n	80047aa <UART_SetConfig+0x34e>
 8004518:	2310      	movs	r3, #16
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	bf00      	nop
 800451e:	e144      	b.n	80047aa <UART_SetConfig+0x34e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a8d      	ldr	r2, [pc, #564]	; (800475c <UART_SetConfig+0x300>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d134      	bne.n	8004594 <UART_SetConfig+0x138>
 800452a:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <UART_SetConfig+0x2fc>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d829      	bhi.n	800458c <UART_SetConfig+0x130>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0xe4>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004575 	.word	0x08004575
 8004544:	0800458d 	.word	0x0800458d
 8004548:	0800458d 	.word	0x0800458d
 800454c:	0800458d 	.word	0x0800458d
 8004550:	08004581 	.word	0x08004581
 8004554:	0800458d 	.word	0x0800458d
 8004558:	0800458d 	.word	0x0800458d
 800455c:	0800458d 	.word	0x0800458d
 8004560:	0800457b 	.word	0x0800457b
 8004564:	0800458d 	.word	0x0800458d
 8004568:	0800458d 	.word	0x0800458d
 800456c:	0800458d 	.word	0x0800458d
 8004570:	08004587 	.word	0x08004587
 8004574:	2300      	movs	r3, #0
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e117      	b.n	80047aa <UART_SetConfig+0x34e>
 800457a:	2302      	movs	r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e114      	b.n	80047aa <UART_SetConfig+0x34e>
 8004580:	2304      	movs	r3, #4
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e111      	b.n	80047aa <UART_SetConfig+0x34e>
 8004586:	2308      	movs	r3, #8
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e10e      	b.n	80047aa <UART_SetConfig+0x34e>
 800458c:	2310      	movs	r3, #16
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	bf00      	nop
 8004592:	e10a      	b.n	80047aa <UART_SetConfig+0x34e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a71      	ldr	r2, [pc, #452]	; (8004760 <UART_SetConfig+0x304>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d120      	bne.n	80045e0 <UART_SetConfig+0x184>
 800459e:	4b6e      	ldr	r3, [pc, #440]	; (8004758 <UART_SetConfig+0x2fc>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d00f      	beq.n	80045cc <UART_SetConfig+0x170>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d802      	bhi.n	80045b6 <UART_SetConfig+0x15a>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <UART_SetConfig+0x164>
 80045b4:	e010      	b.n	80045d8 <UART_SetConfig+0x17c>
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d005      	beq.n	80045c6 <UART_SetConfig+0x16a>
 80045ba:	2b30      	cmp	r3, #48	; 0x30
 80045bc:	d009      	beq.n	80045d2 <UART_SetConfig+0x176>
 80045be:	e00b      	b.n	80045d8 <UART_SetConfig+0x17c>
 80045c0:	2300      	movs	r3, #0
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e0f1      	b.n	80047aa <UART_SetConfig+0x34e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e0ee      	b.n	80047aa <UART_SetConfig+0x34e>
 80045cc:	2304      	movs	r3, #4
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e0eb      	b.n	80047aa <UART_SetConfig+0x34e>
 80045d2:	2308      	movs	r3, #8
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0e8      	b.n	80047aa <UART_SetConfig+0x34e>
 80045d8:	2310      	movs	r3, #16
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	bf00      	nop
 80045de:	e0e4      	b.n	80047aa <UART_SetConfig+0x34e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5f      	ldr	r2, [pc, #380]	; (8004764 <UART_SetConfig+0x308>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d120      	bne.n	800462c <UART_SetConfig+0x1d0>
 80045ea:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <UART_SetConfig+0x2fc>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d00f      	beq.n	8004618 <UART_SetConfig+0x1bc>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d802      	bhi.n	8004602 <UART_SetConfig+0x1a6>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <UART_SetConfig+0x1b0>
 8004600:	e010      	b.n	8004624 <UART_SetConfig+0x1c8>
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d005      	beq.n	8004612 <UART_SetConfig+0x1b6>
 8004606:	2bc0      	cmp	r3, #192	; 0xc0
 8004608:	d009      	beq.n	800461e <UART_SetConfig+0x1c2>
 800460a:	e00b      	b.n	8004624 <UART_SetConfig+0x1c8>
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e0cb      	b.n	80047aa <UART_SetConfig+0x34e>
 8004612:	2302      	movs	r3, #2
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e0c8      	b.n	80047aa <UART_SetConfig+0x34e>
 8004618:	2304      	movs	r3, #4
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e0c5      	b.n	80047aa <UART_SetConfig+0x34e>
 800461e:	2308      	movs	r3, #8
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e0c2      	b.n	80047aa <UART_SetConfig+0x34e>
 8004624:	2310      	movs	r3, #16
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	bf00      	nop
 800462a:	e0be      	b.n	80047aa <UART_SetConfig+0x34e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <UART_SetConfig+0x30c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d124      	bne.n	8004680 <UART_SetConfig+0x224>
 8004636:	4b48      	ldr	r3, [pc, #288]	; (8004758 <UART_SetConfig+0x2fc>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004644:	d012      	beq.n	800466c <UART_SetConfig+0x210>
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d802      	bhi.n	8004652 <UART_SetConfig+0x1f6>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <UART_SetConfig+0x204>
 8004650:	e012      	b.n	8004678 <UART_SetConfig+0x21c>
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d006      	beq.n	8004666 <UART_SetConfig+0x20a>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d009      	beq.n	8004672 <UART_SetConfig+0x216>
 800465e:	e00b      	b.n	8004678 <UART_SetConfig+0x21c>
 8004660:	2300      	movs	r3, #0
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e0a1      	b.n	80047aa <UART_SetConfig+0x34e>
 8004666:	2302      	movs	r3, #2
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e09e      	b.n	80047aa <UART_SetConfig+0x34e>
 800466c:	2304      	movs	r3, #4
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e09b      	b.n	80047aa <UART_SetConfig+0x34e>
 8004672:	2308      	movs	r3, #8
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e098      	b.n	80047aa <UART_SetConfig+0x34e>
 8004678:	2310      	movs	r3, #16
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	bf00      	nop
 800467e:	e094      	b.n	80047aa <UART_SetConfig+0x34e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a39      	ldr	r2, [pc, #228]	; (800476c <UART_SetConfig+0x310>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d124      	bne.n	80046d4 <UART_SetConfig+0x278>
 800468a:	4b33      	ldr	r3, [pc, #204]	; (8004758 <UART_SetConfig+0x2fc>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004698:	d012      	beq.n	80046c0 <UART_SetConfig+0x264>
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d802      	bhi.n	80046a6 <UART_SetConfig+0x24a>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <UART_SetConfig+0x258>
 80046a4:	e012      	b.n	80046cc <UART_SetConfig+0x270>
 80046a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046aa:	d006      	beq.n	80046ba <UART_SetConfig+0x25e>
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b0:	d009      	beq.n	80046c6 <UART_SetConfig+0x26a>
 80046b2:	e00b      	b.n	80046cc <UART_SetConfig+0x270>
 80046b4:	2301      	movs	r3, #1
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e077      	b.n	80047aa <UART_SetConfig+0x34e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e074      	b.n	80047aa <UART_SetConfig+0x34e>
 80046c0:	2304      	movs	r3, #4
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e071      	b.n	80047aa <UART_SetConfig+0x34e>
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e06e      	b.n	80047aa <UART_SetConfig+0x34e>
 80046cc:	2310      	movs	r3, #16
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	bf00      	nop
 80046d2:	e06a      	b.n	80047aa <UART_SetConfig+0x34e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a25      	ldr	r2, [pc, #148]	; (8004770 <UART_SetConfig+0x314>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d124      	bne.n	8004728 <UART_SetConfig+0x2cc>
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <UART_SetConfig+0x2fc>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d012      	beq.n	8004714 <UART_SetConfig+0x2b8>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d802      	bhi.n	80046fa <UART_SetConfig+0x29e>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <UART_SetConfig+0x2ac>
 80046f8:	e012      	b.n	8004720 <UART_SetConfig+0x2c4>
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d006      	beq.n	800470e <UART_SetConfig+0x2b2>
 8004700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004704:	d009      	beq.n	800471a <UART_SetConfig+0x2be>
 8004706:	e00b      	b.n	8004720 <UART_SetConfig+0x2c4>
 8004708:	2300      	movs	r3, #0
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e04d      	b.n	80047aa <UART_SetConfig+0x34e>
 800470e:	2302      	movs	r3, #2
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e04a      	b.n	80047aa <UART_SetConfig+0x34e>
 8004714:	2304      	movs	r3, #4
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e047      	b.n	80047aa <UART_SetConfig+0x34e>
 800471a:	2308      	movs	r3, #8
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e044      	b.n	80047aa <UART_SetConfig+0x34e>
 8004720:	2310      	movs	r3, #16
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	bf00      	nop
 8004726:	e040      	b.n	80047aa <UART_SetConfig+0x34e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a11      	ldr	r2, [pc, #68]	; (8004774 <UART_SetConfig+0x318>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d139      	bne.n	80047a6 <UART_SetConfig+0x34a>
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <UART_SetConfig+0x2fc>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004740:	d027      	beq.n	8004792 <UART_SetConfig+0x336>
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004746:	d817      	bhi.n	8004778 <UART_SetConfig+0x31c>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01c      	beq.n	8004786 <UART_SetConfig+0x32a>
 800474c:	e027      	b.n	800479e <UART_SetConfig+0x342>
 800474e:	bf00      	nop
 8004750:	efff69f3 	.word	0xefff69f3
 8004754:	40011000 	.word	0x40011000
 8004758:	40023800 	.word	0x40023800
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	40011400 	.word	0x40011400
 8004770:	40007800 	.word	0x40007800
 8004774:	40007c00 	.word	0x40007c00
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477c:	d006      	beq.n	800478c <UART_SetConfig+0x330>
 800477e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004782:	d009      	beq.n	8004798 <UART_SetConfig+0x33c>
 8004784:	e00b      	b.n	800479e <UART_SetConfig+0x342>
 8004786:	2300      	movs	r3, #0
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e00e      	b.n	80047aa <UART_SetConfig+0x34e>
 800478c:	2302      	movs	r3, #2
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e00b      	b.n	80047aa <UART_SetConfig+0x34e>
 8004792:	2304      	movs	r3, #4
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e008      	b.n	80047aa <UART_SetConfig+0x34e>
 8004798:	2308      	movs	r3, #8
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e005      	b.n	80047aa <UART_SetConfig+0x34e>
 800479e:	2310      	movs	r3, #16
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	bf00      	nop
 80047a4:	e001      	b.n	80047aa <UART_SetConfig+0x34e>
 80047a6:	2310      	movs	r3, #16
 80047a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b2:	d17f      	bne.n	80048b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d85c      	bhi.n	8004874 <UART_SetConfig+0x418>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <UART_SetConfig+0x364>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	08004805 	.word	0x08004805
 80047c8:	08004825 	.word	0x08004825
 80047cc:	08004875 	.word	0x08004875
 80047d0:	0800483d 	.word	0x0800483d
 80047d4:	08004875 	.word	0x08004875
 80047d8:	08004875 	.word	0x08004875
 80047dc:	08004875 	.word	0x08004875
 80047e0:	0800485d 	.word	0x0800485d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e4:	f7ff fd32 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80047e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	b29b      	uxth	r3, r3
 8004800:	61bb      	str	r3, [r7, #24]
        break;
 8004802:	e03a      	b.n	800487a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7ff fd36 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	005a      	lsls	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	61bb      	str	r3, [r7, #24]
        break;
 8004822:	e02a      	b.n	800487a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	085a      	lsrs	r2, r3, #1
 800482a:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <UART_SetConfig+0x54c>)
 800482c:	4413      	add	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6852      	ldr	r2, [r2, #4]
 8004832:	fbb3 f3f2 	udiv	r3, r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	61bb      	str	r3, [r7, #24]
        break;
 800483a:	e01e      	b.n	800487a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483c:	f7ff fc22 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004840:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	005a      	lsls	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	441a      	add	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	61bb      	str	r3, [r7, #24]
        break;
 800485a:	e00e      	b.n	800487a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	b29b      	uxth	r3, r3
 8004870:	61bb      	str	r3, [r7, #24]
        break;
 8004872:	e002      	b.n	800487a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
        break;
 8004878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b0f      	cmp	r3, #15
 800487e:	d916      	bls.n	80048ae <UART_SetConfig+0x452>
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004886:	d212      	bcs.n	80048ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	b29b      	uxth	r3, r3
 800488c:	f023 030f 	bic.w	r3, r3, #15
 8004890:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	b29a      	uxth	r2, r3
 800489e:	897b      	ldrh	r3, [r7, #10]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	897a      	ldrh	r2, [r7, #10]
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	e070      	b.n	8004990 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
 80048b2:	e06d      	b.n	8004990 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80048b4:	7ffb      	ldrb	r3, [r7, #31]
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d859      	bhi.n	800496e <UART_SetConfig+0x512>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0x464>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	08004903 	.word	0x08004903
 80048c8:	08004921 	.word	0x08004921
 80048cc:	0800496f 	.word	0x0800496f
 80048d0:	08004939 	.word	0x08004939
 80048d4:	0800496f 	.word	0x0800496f
 80048d8:	0800496f 	.word	0x0800496f
 80048dc:	0800496f 	.word	0x0800496f
 80048e0:	08004957 	.word	0x08004957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7ff fcb2 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80048e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085a      	lsrs	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	61bb      	str	r3, [r7, #24]
        break;
 8004900:	e038      	b.n	8004974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004902:	f7ff fcb7 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004906:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	085a      	lsrs	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	61bb      	str	r3, [r7, #24]
        break;
 800491e:	e029      	b.n	8004974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085a      	lsrs	r2, r3, #1
 8004926:	4b21      	ldr	r3, [pc, #132]	; (80049ac <UART_SetConfig+0x550>)
 8004928:	4413      	add	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6852      	ldr	r2, [r2, #4]
 800492e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	61bb      	str	r3, [r7, #24]
        break;
 8004936:	e01d      	b.n	8004974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004938:	f7ff fba4 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 800493c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	085a      	lsrs	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	b29b      	uxth	r3, r3
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e00e      	b.n	8004974 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	b29b      	uxth	r3, r3
 800496a:	61bb      	str	r3, [r7, #24]
        break;
 800496c:	e002      	b.n	8004974 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
        break;
 8004972:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d908      	bls.n	800498c <UART_SetConfig+0x530>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d204      	bcs.n	800498c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	e001      	b.n	8004990 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	01e84800 	.word	0x01e84800
 80049ac:	00f42400 	.word	0x00f42400

080049b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aae:	d10a      	bne.n	8004ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b02:	f7fc fa6b 	bl	8000fdc <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d10e      	bne.n	8004b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f82a 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e020      	b.n	8004b76 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d10e      	bne.n	8004b60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f814 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e00a      	b.n	8004b76 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8e:	e05d      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d059      	beq.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fc fa20 	bl	8000fdc <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11b      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e042      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02b      	beq.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c02:	d123      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e00f      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d092      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c74:	b084      	sub	sp, #16
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	f107 001c 	add.w	r0, r7, #28
 8004c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d120      	bne.n	8004cce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <USB_CoreInit+0xac>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f942 	bl	8004f4c <USB_CoreReset>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	e010      	b.n	8004cf0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f936 	bl	8004f4c <USB_CoreReset>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d10b      	bne.n	8004d0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f043 0206 	orr.w	r2, r3, #6
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d1a:	b004      	add	sp, #16
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	ffbdffbf 	.word	0xffbdffbf

08004d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d106      	bne.n	8004d94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	e00b      	b.n	8004dac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e001      	b.n	8004dac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e003      	b.n	8004db4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004dac:	2032      	movs	r0, #50	; 0x32
 8004dae:	f7fc f921 	bl	8000ff4 <HAL_Delay>

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <USB_FlushTxFifo+0x48>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d0f0      	beq.n	8004dd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	00030d40 	.word	0x00030d40

08004e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2210      	movs	r2, #16
 8004e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <USB_FlushRxFifo+0x40>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e006      	b.n	8004e3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d0f0      	beq.n	8004e1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	00030d40 	.word	0x00030d40

08004e4c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	71fb      	strb	r3, [r7, #7]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d11a      	bne.n	8004ea8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e72:	88bb      	ldrh	r3, [r7, #4]
 8004e74:	3303      	adds	r3, #3
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e00f      	b.n	8004ea0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	031a      	lsls	r2, r3, #12
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3304      	adds	r3, #4
 8004e98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3eb      	bcc.n	8004e80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3724      	adds	r7, #36	; 0x24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b089      	sub	sp, #36	; 0x24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	3303      	adds	r3, #3
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e00b      	b.n	8004ef2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d3ef      	bcc.n	8004eda <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004efa:	69fb      	ldr	r3, [r7, #28]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3724      	adds	r7, #36	; 0x24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f20:	68fb      	ldr	r3, [r7, #12]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <USB_CoreReset+0x64>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e01b      	b.n	8004fa2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	daf2      	bge.n	8004f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3301      	adds	r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <USB_CoreReset+0x64>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d0f0      	beq.n	8004f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	00030d40 	.word	0x00030d40

08004fb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	f107 001c 	add.w	r0, r7, #28
 8004fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10a      	bne.n	800500a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005002:	f043 0304 	orr.w	r3, r3, #4
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	e014      	b.n	8005034 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e009      	b.n	8005034 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800502e:	f023 0304 	bic.w	r3, r3, #4
 8005032:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005034:	2110      	movs	r1, #16
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fec0 	bl	8004dbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff fee3 	bl	8004e08 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e015      	b.n	8005074 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005068:	461a      	mov	r2, r3
 800506a:	2300      	movs	r3, #0
 800506c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d3e5      	bcc.n	8005048 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800507c:	2101      	movs	r1, #1
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8ac 	bl	80051dc <USB_DriveVbus>

  HAL_Delay(200U);
 8005084:	20c8      	movs	r0, #200	; 0xc8
 8005086:	f7fb ffb5 	bl	8000ff4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f04f 32ff 	mov.w	r2, #4294967295
 8005096:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a14      	ldr	r2, [pc, #80]	; (8005100 <USB_HostInit+0x14c>)
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <USB_HostInit+0x150>)
 80050b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80050ba:	e009      	b.n	80050d0 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a10      	ldr	r2, [pc, #64]	; (8005108 <USB_HostInit+0x154>)
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a10      	ldr	r2, [pc, #64]	; (800510c <USB_HostInit+0x158>)
 80050cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f043 0210 	orr.w	r2, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <USB_HostInit+0x15c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fa:	b004      	add	sp, #16
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	01000200 	.word	0x01000200
 8005104:	00e00300 	.word	0x00e00300
 8005108:	00600080 	.word	0x00600080
 800510c:	004000e0 	.word	0x004000e0
 8005110:	a3200008 	.word	0xa3200008

08005114 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005132:	f023 0303 	bic.w	r3, r3, #3
 8005136:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515c:	461a      	mov	r2, r3
 800515e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005162:	6053      	str	r3, [r2, #4]
 8005164:	e009      	b.n	800517a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d106      	bne.n	800517a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005172:	461a      	mov	r2, r3
 8005174:	f241 7370 	movw	r3, #6000	; 0x1770
 8005178:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80051b8:	2064      	movs	r0, #100	; 0x64
 80051ba:	f7fb ff1b 	bl	8000ff4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80051cc:	200a      	movs	r0, #10
 80051ce:	f7fb ff11 	bl	8000ff4 <HAL_Delay>

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005200:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <USB_DriveVbus+0x44>
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d106      	bne.n	8005220 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800521a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800521e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	d109      	bne.n	8005240 <USB_DriveVbus+0x64>
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800523a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	0c5b      	lsrs	r3, r3, #17
 800526c:	f003 0303 	and.w	r3, r3, #3
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	b29b      	uxth	r3, r3
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	461a      	mov	r2, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	70fb      	strb	r3, [r7, #3]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70bb      	strb	r3, [r7, #2]
 80052b6:	4613      	mov	r3, r2
 80052b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ce:	461a      	mov	r2, r3
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295
 80052d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80052d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d87e      	bhi.n	80053dc <USB_HC_Init+0x13c>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <USB_HC_Init+0x44>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	0800539f 	.word	0x0800539f
 80052ec:	080052f5 	.word	0x080052f5
 80052f0:	08005361 	.word	0x08005361
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	461a      	mov	r2, r3
 8005302:	f240 439d 	movw	r3, #1181	; 0x49d
 8005306:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005308:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800530c:	2b00      	cmp	r3, #0
 800530e:	da10      	bge.n	8005332 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	440a      	add	r2, r1
 8005326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005330:	e057      	b.n	80053e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d051      	beq.n	80053e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005358:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800535c:	60d3      	str	r3, [r2, #12]
      break;
 800535e:	e040      	b.n	80053e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	461a      	mov	r2, r3
 800536e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005372:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005378:	2b00      	cmp	r3, #0
 800537a:	da34      	bge.n	80053e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	440a      	add	r2, r1
 8005392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800539c:	e023      	b.n	80053e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	461a      	mov	r2, r3
 80053ac:	f240 2325 	movw	r3, #549	; 0x225
 80053b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da17      	bge.n	80053ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80053d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80053da:	e006      	b.n	80053ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
      break;
 80053e0:	e004      	b.n	80053ec <USB_HC_Init+0x14c>
      break;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <USB_HC_Init+0x14c>
      break;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <USB_HC_Init+0x14c>
      break;
 80053ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005406:	4313      	orrs	r3, r2
 8005408:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005416:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800541a:	2b00      	cmp	r3, #0
 800541c:	da03      	bge.n	8005426 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800541e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e001      	b.n	800542a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800542a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d103      	bne.n	800543a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e001      	b.n	800543e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800543e:	787b      	ldrb	r3, [r7, #1]
 8005440:	059b      	lsls	r3, r3, #22
 8005442:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005446:	78bb      	ldrb	r3, [r7, #2]
 8005448:	02db      	lsls	r3, r3, #11
 800544a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800544e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005450:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005454:	049b      	lsls	r3, r3, #18
 8005456:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800545a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800545c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800545e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005462:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	0159      	lsls	r1, r3, #5
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	440b      	add	r3, r1
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800547a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800547c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005480:	2b03      	cmp	r3, #3
 8005482:	d10f      	bne.n	80054a4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	440a      	add	r2, r1
 800549a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054a2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop

080054b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08c      	sub	sp, #48	; 0x30
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	4613      	mov	r3, r2
 80054c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80054cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d028      	beq.n	8005530 <USB_HC_StartXfer+0x7c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	791b      	ldrb	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d124      	bne.n	8005530 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <USB_HC_StartXfer+0x50>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	795b      	ldrb	r3, [r3, #5]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d107      	bne.n	8005504 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	4619      	mov	r1, r3
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fa2e 	bl	800595c <USB_DoPing>
      return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e112      	b.n	800572a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d112      	bne.n	8005530 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	440a      	add	r2, r1
 8005520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005524:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005528:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d018      	beq.n	800556a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	8912      	ldrh	r2, [r2, #8]
 8005540:	4413      	add	r3, r2
 8005542:	3b01      	subs	r3, #1
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	8912      	ldrh	r2, [r2, #8]
 8005548:	fbb3 f3f2 	udiv	r3, r3, r2
 800554c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800554e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005550:	8b7b      	ldrh	r3, [r7, #26]
 8005552:	429a      	cmp	r2, r3
 8005554:	d90b      	bls.n	800556e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005556:	8b7b      	ldrh	r3, [r7, #26]
 8005558:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800555a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	8912      	ldrh	r2, [r2, #8]
 8005560:	fb02 f203 	mul.w	r2, r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	611a      	str	r2, [r3, #16]
 8005568:	e001      	b.n	800556e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800556a:	2301      	movs	r3, #1
 800556c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	78db      	ldrb	r3, [r3, #3]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d006      	beq.n	8005584 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	8912      	ldrh	r2, [r2, #8]
 800557c:	fb02 f203 	mul.w	r2, r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800558c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800558e:	04d9      	lsls	r1, r3, #19
 8005590:	4b68      	ldr	r3, [pc, #416]	; (8005734 <USB_HC_StartXfer+0x280>)
 8005592:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005594:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	7a9b      	ldrb	r3, [r3, #10]
 800559a:	075b      	lsls	r3, r3, #29
 800559c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80055a0:	69f9      	ldr	r1, [r7, #28]
 80055a2:	0148      	lsls	r0, r1, #5
 80055a4:	6a39      	ldr	r1, [r7, #32]
 80055a6:	4401      	add	r1, r0
 80055a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80055ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68d9      	ldr	r1, [r3, #12]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	460a      	mov	r2, r1
 80055c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005600:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	7e7b      	ldrb	r3, [r7, #25]
 8005612:	075b      	lsls	r3, r3, #29
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	6a39      	ldr	r1, [r7, #32]
 800561a:	4401      	add	r1, r0
 800561c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a41      	ldr	r2, [pc, #260]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005634:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005636:	4b40      	ldr	r3, [pc, #256]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800563e:	4a3e      	ldr	r2, [pc, #248]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005640:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	78db      	ldrb	r3, [r3, #3]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d006      	beq.n	8005658 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800564a:	4b3b      	ldr	r3, [pc, #236]	; (8005738 <USB_HC_StartXfer+0x284>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	4a39      	ldr	r2, [pc, #228]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e005      	b.n	8005664 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005658:	4b37      	ldr	r3, [pc, #220]	; (8005738 <USB_HC_StartXfer+0x284>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005660:	4a35      	ldr	r2, [pc, #212]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005662:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005664:	4b34      	ldr	r3, [pc, #208]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800566c:	4a32      	ldr	r2, [pc, #200]	; (8005738 <USB_HC_StartXfer+0x284>)
 800566e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567c:	461a      	mov	r2, r3
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <USB_HC_StartXfer+0x284>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d14e      	bne.n	8005728 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d14a      	bne.n	8005728 <USB_HC_StartXfer+0x274>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d046      	beq.n	8005728 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	79db      	ldrb	r3, [r3, #7]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d830      	bhi.n	8005704 <USB_HC_StartXfer+0x250>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <USB_HC_StartXfer+0x1f4>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056dd 	.word	0x080056dd
 80056b0:	080056b9 	.word	0x080056b9
 80056b4:	080056dd 	.word	0x080056dd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	3303      	adds	r3, #3
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80056c2:	8afa      	ldrh	r2, [r7, #22]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d91c      	bls.n	8005708 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	619a      	str	r2, [r3, #24]
          }
          break;
 80056da:	e015      	b.n	8005708 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	3303      	adds	r3, #3
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80056e6:	8afa      	ldrh	r2, [r7, #22]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d90a      	bls.n	800570c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]
          }
          break;
 8005702:	e003      	b.n	800570c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005704:	bf00      	nop
 8005706:	e002      	b.n	800570e <USB_HC_StartXfer+0x25a>
          break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <USB_HC_StartXfer+0x25a>
          break;
 800570c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	785a      	ldrb	r2, [r3, #1]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	b298      	uxth	r0, r3
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	4603      	mov	r3, r0
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fb92 	bl	8004e4c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	1ff80000 	.word	0x1ff80000
 8005738:	200100b4 	.word	0x200100b4

0800573c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	b29b      	uxth	r3, r3
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0c9b      	lsrs	r3, r3, #18
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <USB_HC_Halt+0x3a>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d16c      	bne.n	8005872 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d143      	bne.n	800584c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005802:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	440a      	add	r2, r1
 800581a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005822:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3301      	adds	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005830:	d81d      	bhi.n	800586e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005848:	d0ec      	beq.n	8005824 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800584a:	e080      	b.n	800594e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	440a      	add	r2, r1
 8005862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800586a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800586c:	e06f      	b.n	800594e <USB_HC_Halt+0x1f0>
          break;
 800586e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005870:	e06d      	b.n	800594e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005890:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d143      	bne.n	800592a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005900:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	3301      	adds	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800590e:	d81d      	bhi.n	800594c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005926:	d0ec      	beq.n	8005902 <USB_HC_Halt+0x1a4>
 8005928:	e011      	b.n	800594e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e000      	b.n	800594e <USB_HC_Halt+0x1f0>
          break;
 800594c:	bf00      	nop
    }
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005970:	2301      	movs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	04da      	lsls	r2, r3, #19
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <USB_DoPing+0x74>)
 800597a:	4013      	ands	r3, r2
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	440a      	add	r2, r1
 8005984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800598c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	1ff80000 	.word	0x1ff80000

080059d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff f9ae 	bl	8004d46 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80059ea:	2110      	movs	r1, #16
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff f9e5 	bl	8004dbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fa08 	bl	8004e08 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	e01f      	b.n	8005a3e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d9dc      	bls.n	80059fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e034      	b.n	8005ab4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a60:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	3301      	adds	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a90:	d80c      	bhi.n	8005aac <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa8:	d0ec      	beq.n	8005a84 <USB_StopHost+0xb0>
 8005aaa:	e000      	b.n	8005aae <USB_StopHost+0xda>
        break;
 8005aac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	d9c7      	bls.n	8005a4a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ace:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff f927 	bl	8004d24 <USB_EnableGlobalInt>

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
char USBH_Path[4];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <MX_FATFS_Init+0x18>)
 8005ae6:	4805      	ldr	r0, [pc, #20]	; (8005afc <MX_FATFS_Init+0x1c>)
 8005ae8:	f005 fa08 	bl	800aefc <FATFS_LinkDriver>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <MX_FATFS_Init+0x20>)
 8005af2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005af4:	bf00      	nop
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20010880 	.word	0x20010880
 8005afc:	0800c71c 	.word	0x0800c71c
 8005b00:	20010ce8 	.word	0x20010ce8

08005b04 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005b08:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4808      	ldr	r0, [pc, #32]	; (8005b60 <USBH_status+0x34>)
 8005b40:	f000 fe11 	bl	8006766 <USBH_MSC_UnitIsReady>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <USBH_status+0x24>
  {
    res = RES_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
 8005b4e:	e001      	b.n	8005b54 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20010cec 	.word	0x20010cec

08005b64 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b094      	sub	sp, #80	; 0x50
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005b7a:	7bf9      	ldrb	r1, [r7, #15]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4812      	ldr	r0, [pc, #72]	; (8005bd0 <USBH_read+0x6c>)
 8005b86:	f000 fe38 	bl	80067fa <USBH_MSC_Read>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <USBH_read+0x34>
  {
    res = RES_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b96:	e015      	b.n	8005bc4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005b98:	f107 0210 	add.w	r2, r7, #16
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	480b      	ldr	r0, [pc, #44]	; (8005bd0 <USBH_read+0x6c>)
 8005ba2:	f000 fe06 	bl	80067b2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005ba6:	7f7b      	ldrb	r3, [r7, #29]
 8005ba8:	2b28      	cmp	r3, #40	; 0x28
 8005baa:	d003      	beq.n	8005bb4 <USBH_read+0x50>
 8005bac:	2b3a      	cmp	r3, #58	; 0x3a
 8005bae:	d001      	beq.n	8005bb4 <USBH_read+0x50>
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d103      	bne.n	8005bbc <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005bba:	e003      	b.n	8005bc4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005bc2:	bf00      	nop
    }
  }

  return res;
 8005bc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3748      	adds	r7, #72	; 0x48
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20010cec 	.word	0x20010cec

08005bd4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b094      	sub	sp, #80	; 0x50
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005bea:	7bf9      	ldrb	r1, [r7, #15]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4817      	ldr	r0, [pc, #92]	; (8005c54 <USBH_write+0x80>)
 8005bf6:	f000 fe69 	bl	80068cc <USBH_MSC_Write>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d103      	bne.n	8005c08 <USBH_write+0x34>
  {
    res = RES_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c06:	e01f      	b.n	8005c48 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005c08:	f107 0210 	add.w	r2, r7, #16
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4810      	ldr	r0, [pc, #64]	; (8005c54 <USBH_write+0x80>)
 8005c12:	f000 fdce 	bl	80067b2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005c16:	7f7b      	ldrb	r3, [r7, #29]
 8005c18:	2b27      	cmp	r3, #39	; 0x27
 8005c1a:	d009      	beq.n	8005c30 <USBH_write+0x5c>
 8005c1c:	2b27      	cmp	r3, #39	; 0x27
 8005c1e:	dc02      	bgt.n	8005c26 <USBH_write+0x52>
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d009      	beq.n	8005c38 <USBH_write+0x64>
 8005c24:	e00c      	b.n	8005c40 <USBH_write+0x6c>
 8005c26:	2b28      	cmp	r3, #40	; 0x28
 8005c28:	d006      	beq.n	8005c38 <USBH_write+0x64>
 8005c2a:	2b3a      	cmp	r3, #58	; 0x3a
 8005c2c:	d004      	beq.n	8005c38 <USBH_write+0x64>
 8005c2e:	e007      	b.n	8005c40 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005c36:	e007      	b.n	8005c48 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005c3e:	e003      	b.n	8005c48 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005c46:	bf00      	nop
    }
  }

  return res;
 8005c48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3748      	adds	r7, #72	; 0x48
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20010cec 	.word	0x20010cec

08005c58 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b090      	sub	sp, #64	; 0x40
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	603a      	str	r2, [r7, #0]
 8005c62:	71fb      	strb	r3, [r7, #7]
 8005c64:	460b      	mov	r3, r1
 8005c66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005c6e:	79bb      	ldrb	r3, [r7, #6]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d852      	bhi.n	8005d1a <USBH_ioctl+0xc2>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <USBH_ioctl+0x24>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005c95 	.word	0x08005c95
 8005c84:	08005cbf 	.word	0x08005cbf
 8005c88:	08005ceb 	.word	0x08005ceb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c92:	e045      	b.n	8005d20 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c94:	f107 0208 	add.w	r2, r7, #8
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4823      	ldr	r0, [pc, #140]	; (8005d2c <USBH_ioctl+0xd4>)
 8005c9e:	f000 fd88 	bl	80067b2 <USBH_MSC_GetLUNInfo>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005cb4:	e034      	b.n	8005d20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005cbc:	e030      	b.n	8005d20 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005cbe:	f107 0208 	add.w	r2, r7, #8
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4819      	ldr	r0, [pc, #100]	; (8005d2c <USBH_ioctl+0xd4>)
 8005cc8:	f000 fd73 	bl	80067b2 <USBH_MSC_GetLUNInfo>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005cd2:	8a3b      	ldrh	r3, [r7, #16]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005ce0:	e01e      	b.n	8005d20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005ce8:	e01a      	b.n	8005d20 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005cea:	f107 0208 	add.w	r2, r7, #8
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	480e      	ldr	r0, [pc, #56]	; (8005d2c <USBH_ioctl+0xd4>)
 8005cf4:	f000 fd5d 	bl	80067b2 <USBH_MSC_GetLUNInfo>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005cfe:	8a3b      	ldrh	r3, [r7, #16]
 8005d00:	0a5b      	lsrs	r3, r3, #9
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005d10:	e006      	b.n	8005d20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005d18:	e002      	b.n	8005d20 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005d20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3740      	adds	r7, #64	; 0x40
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20010cec 	.word	0x20010cec

08005d30 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af04      	add	r7, sp, #16
 8005d36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d3e:	7919      	ldrb	r1, [r3, #4]
 8005d40:	2350      	movs	r3, #80	; 0x50
 8005d42:	2206      	movs	r2, #6
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fc4f 	bl	80075e8 <USBH_FindInterface>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2bff      	cmp	r3, #255	; 0xff
 8005d52:	d002      	beq.n	8005d5a <USBH_MSC_InterfaceInit+0x2a>
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d901      	bls.n	8005d5e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e0ef      	b.n	8005f3e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 fc24 	bl	80075b0 <USBH_SelectInterface>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0e3      	b.n	8005f3e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d80:	f005 fc2e 	bl	800b5e0 <malloc>
 8005d84:	4603      	mov	r3, r0
 8005d86:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e0d0      	b.n	8005f3e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005da0:	2100      	movs	r1, #0
 8005da2:	68b8      	ldr	r0, [r7, #8]
 8005da4:	f005 fc37 	bl	800b616 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	211a      	movs	r1, #26
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	da16      	bge.n	8005dee <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	211a      	movs	r1, #26
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	211a      	movs	r1, #26
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005de6:	881a      	ldrh	r2, [r3, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	815a      	strh	r2, [r3, #10]
 8005dec:	e015      	b.n	8005e1a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	211a      	movs	r1, #26
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	4413      	add	r3, r2
 8005dfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	211a      	movs	r1, #26
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e14:	881a      	ldrh	r2, [r3, #0]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	211a      	movs	r1, #26
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b25b      	sxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	da16      	bge.n	8005e60 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	211a      	movs	r1, #26
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	211a      	movs	r1, #26
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e58:	881a      	ldrh	r2, [r3, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	815a      	strh	r2, [r3, #10]
 8005e5e:	e015      	b.n	8005e8c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	211a      	movs	r1, #26
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	211a      	movs	r1, #26
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2200      	movs	r2, #0
 8005e96:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	799b      	ldrb	r3, [r3, #6]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f002 fdc2 	bl	8008a2e <USBH_AllocPipe>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	461a      	mov	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	79db      	ldrb	r3, [r3, #7]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f002 fdb8 	bl	8008a2e <USBH_AllocPipe>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fda4 	bl	8006a14 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	7959      	ldrb	r1, [r3, #5]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	7998      	ldrb	r0, [r3, #6]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	8912      	ldrh	r2, [r2, #8]
 8005ee4:	9202      	str	r2, [sp, #8]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	9201      	str	r2, [sp, #4]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	4623      	mov	r3, r4
 8005eee:	4602      	mov	r2, r0
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f002 fd6d 	bl	80089d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	7919      	ldrb	r1, [r3, #4]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	79d8      	ldrb	r0, [r3, #7]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	8952      	ldrh	r2, [r2, #10]
 8005f0e:	9202      	str	r2, [sp, #8]
 8005f10:	2202      	movs	r2, #2
 8005f12:	9201      	str	r2, [sp, #4]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4623      	mov	r3, r4
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f002 fd58 	bl	80089d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	791b      	ldrb	r3, [r3, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f005 fa7b 	bl	800b424 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	795b      	ldrb	r3, [r3, #5]
 8005f32:	2200      	movs	r2, #0
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f005 fa74 	bl	800b424 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}

08005f46 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	795b      	ldrb	r3, [r3, #5]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	795b      	ldrb	r3, [r3, #5]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f002 fd51 	bl	8008a0e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	795b      	ldrb	r3, [r3, #5]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fd7c 	bl	8008a70 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	791b      	ldrb	r3, [r3, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00e      	beq.n	8005fa4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	791b      	ldrb	r3, [r3, #4]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 fd3e 	bl	8008a0e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	791b      	ldrb	r3, [r3, #4]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f002 fd69 	bl	8008a70 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f005 fb19 	bl	800b5f0 <free>
    phost->pActiveClass->pData = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	7b9b      	ldrb	r3, [r3, #14]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d004      	beq.n	8005ffa <USBH_MSC_ClassRequest+0x28>
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d03e      	beq.n	8006072 <USBH_MSC_ClassRequest+0xa0>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d000      	beq.n	8005ffa <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8005ff8:	e04a      	b.n	8006090 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fcea 	bl	80069d8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d104      	bne.n	8006018 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d135      	bne.n	800608a <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d804      	bhi.n	8006030 <USBH_MSC_ClassRequest+0x5e>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	e000      	b.n	8006032 <USBH_MSC_ClassRequest+0x60>
 8006030:	2202      	movs	r2, #2
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	73bb      	strb	r3, [r7, #14]
 800603a:	e014      	b.n	8006066 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	2134      	movs	r1, #52	; 0x34
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	4413      	add	r3, r2
 8006048:	3392      	adds	r3, #146	; 0x92
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	2134      	movs	r1, #52	; 0x34
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	33c1      	adds	r3, #193	; 0xc1
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	3301      	adds	r3, #1
 8006064:	73bb      	strb	r3, [r7, #14]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	7bba      	ldrb	r2, [r7, #14]
 800606c:	429a      	cmp	r2, r3
 800606e:	d3e5      	bcc.n	800603c <USBH_MSC_ClassRequest+0x6a>
      break;
 8006070:	e00b      	b.n	800608a <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006072:	2100      	movs	r1, #0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f002 f878 	bl	800816a <USBH_ClrFeature>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	7bda      	ldrb	r2, [r3, #15]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	739a      	strb	r2, [r3, #14]
      break;
 8006088:	e001      	b.n	800608e <USBH_MSC_ClassRequest+0xbc>
      break;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <USBH_MSC_ClassRequest+0xbe>
      break;
 800608e:	bf00      	nop
  }

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	7b1b      	ldrb	r3, [r3, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <USBH_MSC_Process+0x2e>
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	f000 8271 	beq.w	80065aa <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80060c8:	e272      	b.n	80065b0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	429a      	cmp	r2, r3
 80060d8:	f080 824f 	bcs.w	800657a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060e2:	4619      	mov	r1, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	2334      	movs	r3, #52	; 0x34
 80060e8:	fb03 f301 	mul.w	r3, r3, r1
 80060ec:	4413      	add	r3, r2
 80060ee:	3391      	adds	r3, #145	; 0x91
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060fa:	4619      	mov	r1, r3
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	2334      	movs	r3, #52	; 0x34
 8006100:	fb03 f301 	mul.w	r3, r3, r1
 8006104:	4413      	add	r3, r2
 8006106:	3390      	adds	r3, #144	; 0x90
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b08      	cmp	r3, #8
 800610c:	f200 8243 	bhi.w	8006596 <USBH_MSC_Process+0x4fa>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <USBH_MSC_Process+0x7c>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006597 	.word	0x08006597
 8006120:	08006205 	.word	0x08006205
 8006124:	08006389 	.word	0x08006389
 8006128:	08006163 	.word	0x08006163
 800612c:	08006455 	.word	0x08006455
 8006130:	08006597 	.word	0x08006597
 8006134:	08006597 	.word	0x08006597
 8006138:	08006569 	.word	0x08006569
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006142:	4619      	mov	r1, r3
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	2334      	movs	r3, #52	; 0x34
 8006148:	fb03 f301 	mul.w	r3, r3, r1
 800614c:	4413      	add	r3, r2
 800614e:	3390      	adds	r3, #144	; 0x90
 8006150:	2204      	movs	r2, #4
 8006152:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006160:	e222      	b.n	80065a8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006168:	b2d9      	uxtb	r1, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006170:	461a      	mov	r2, r3
 8006172:	2334      	movs	r3, #52	; 0x34
 8006174:	fb03 f302 	mul.w	r3, r3, r2
 8006178:	3398      	adds	r3, #152	; 0x98
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	3307      	adds	r3, #7
 8006180:	461a      	mov	r2, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 ff68 	bl	8007058 <USBH_MSC_SCSI_Inquiry>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006198:	4619      	mov	r1, r3
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	2334      	movs	r3, #52	; 0x34
 800619e:	fb03 f301 	mul.w	r3, r3, r1
 80061a2:	4413      	add	r3, r2
 80061a4:	3390      	adds	r3, #144	; 0x90
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d10c      	bne.n	80061ca <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061b6:	4619      	mov	r1, r3
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	2334      	movs	r3, #52	; 0x34
 80061bc:	fb03 f301 	mul.w	r3, r3, r1
 80061c0:	4413      	add	r3, r2
 80061c2:	3390      	adds	r3, #144	; 0x90
 80061c4:	2205      	movs	r2, #5
 80061c6:	701a      	strb	r2, [r3, #0]
            break;
 80061c8:	e1e7      	b.n	800659a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	f040 81e4 	bne.w	800659a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061d8:	4619      	mov	r1, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	2334      	movs	r3, #52	; 0x34
 80061de:	fb03 f301 	mul.w	r3, r3, r1
 80061e2:	4413      	add	r3, r2
 80061e4:	3390      	adds	r3, #144	; 0x90
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061f0:	4619      	mov	r1, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	2334      	movs	r3, #52	; 0x34
 80061f6:	fb03 f301 	mul.w	r3, r3, r1
 80061fa:	4413      	add	r3, r2
 80061fc:	3391      	adds	r3, #145	; 0x91
 80061fe:	2202      	movs	r2, #2
 8006200:	701a      	strb	r2, [r3, #0]
            break;
 8006202:	e1ca      	b.n	800659a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620a:	b2db      	uxtb	r3, r3
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fe64 	bl	8006edc <USBH_MSC_SCSI_TestUnitReady>
 8006214:	4603      	mov	r3, r0
 8006216:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d149      	bne.n	80062b2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006224:	4619      	mov	r1, r3
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	2334      	movs	r3, #52	; 0x34
 800622a:	fb03 f301 	mul.w	r3, r3, r1
 800622e:	4413      	add	r3, r2
 8006230:	3392      	adds	r3, #146	; 0x92
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00c      	beq.n	8006252 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800623e:	4619      	mov	r1, r3
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	2334      	movs	r3, #52	; 0x34
 8006244:	fb03 f301 	mul.w	r3, r3, r1
 8006248:	4413      	add	r3, r2
 800624a:	33c1      	adds	r3, #193	; 0xc1
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e00b      	b.n	800626a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006258:	4619      	mov	r1, r3
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	2334      	movs	r3, #52	; 0x34
 800625e:	fb03 f301 	mul.w	r3, r3, r1
 8006262:	4413      	add	r3, r2
 8006264:	33c1      	adds	r3, #193	; 0xc1
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006270:	4619      	mov	r1, r3
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	2334      	movs	r3, #52	; 0x34
 8006276:	fb03 f301 	mul.w	r3, r3, r1
 800627a:	4413      	add	r3, r2
 800627c:	3390      	adds	r3, #144	; 0x90
 800627e:	2203      	movs	r2, #3
 8006280:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006288:	4619      	mov	r1, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	2334      	movs	r3, #52	; 0x34
 800628e:	fb03 f301 	mul.w	r3, r3, r1
 8006292:	4413      	add	r3, r2
 8006294:	3391      	adds	r3, #145	; 0x91
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062a0:	4619      	mov	r1, r3
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	2334      	movs	r3, #52	; 0x34
 80062a6:	fb03 f301 	mul.w	r3, r3, r1
 80062aa:	4413      	add	r3, r2
 80062ac:	3392      	adds	r3, #146	; 0x92
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d14a      	bne.n	800634e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062be:	4619      	mov	r1, r3
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	2334      	movs	r3, #52	; 0x34
 80062c4:	fb03 f301 	mul.w	r3, r3, r1
 80062c8:	4413      	add	r3, r2
 80062ca:	3392      	adds	r3, #146	; 0x92
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d00c      	beq.n	80062ec <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062d8:	4619      	mov	r1, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	2334      	movs	r3, #52	; 0x34
 80062de:	fb03 f301 	mul.w	r3, r3, r1
 80062e2:	4413      	add	r3, r2
 80062e4:	33c1      	adds	r3, #193	; 0xc1
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e00b      	b.n	8006304 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f2:	4619      	mov	r1, r3
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	2334      	movs	r3, #52	; 0x34
 80062f8:	fb03 f301 	mul.w	r3, r3, r1
 80062fc:	4413      	add	r3, r2
 80062fe:	33c1      	adds	r3, #193	; 0xc1
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800630a:	4619      	mov	r1, r3
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	2334      	movs	r3, #52	; 0x34
 8006310:	fb03 f301 	mul.w	r3, r3, r1
 8006314:	4413      	add	r3, r2
 8006316:	3390      	adds	r3, #144	; 0x90
 8006318:	2205      	movs	r2, #5
 800631a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006322:	4619      	mov	r1, r3
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	2334      	movs	r3, #52	; 0x34
 8006328:	fb03 f301 	mul.w	r3, r3, r1
 800632c:	4413      	add	r3, r2
 800632e:	3391      	adds	r3, #145	; 0x91
 8006330:	2201      	movs	r2, #1
 8006332:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800633a:	4619      	mov	r1, r3
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	2334      	movs	r3, #52	; 0x34
 8006340:	fb03 f301 	mul.w	r3, r3, r1
 8006344:	4413      	add	r3, r2
 8006346:	3392      	adds	r3, #146	; 0x92
 8006348:	2202      	movs	r2, #2
 800634a:	701a      	strb	r2, [r3, #0]
            break;
 800634c:	e127      	b.n	800659e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	2b04      	cmp	r3, #4
 8006352:	f040 8124 	bne.w	800659e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800635c:	4619      	mov	r1, r3
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	2334      	movs	r3, #52	; 0x34
 8006362:	fb03 f301 	mul.w	r3, r3, r1
 8006366:	4413      	add	r3, r2
 8006368:	3390      	adds	r3, #144	; 0x90
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006374:	4619      	mov	r1, r3
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	2334      	movs	r3, #52	; 0x34
 800637a:	fb03 f301 	mul.w	r3, r3, r1
 800637e:	4413      	add	r3, r2
 8006380:	3391      	adds	r3, #145	; 0x91
 8006382:	2202      	movs	r2, #2
 8006384:	701a      	strb	r2, [r3, #0]
            break;
 8006386:	e10a      	b.n	800659e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800638e:	b2d9      	uxtb	r1, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006396:	461a      	mov	r2, r3
 8006398:	2334      	movs	r3, #52	; 0x34
 800639a:	fb03 f302 	mul.w	r3, r3, r2
 800639e:	3390      	adds	r3, #144	; 0x90
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4413      	add	r3, r2
 80063a4:	3304      	adds	r3, #4
 80063a6:	461a      	mov	r2, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fdda 	bl	8006f62 <USBH_MSC_SCSI_ReadCapacity>
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d120      	bne.n	80063fa <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063be:	4619      	mov	r1, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	2334      	movs	r3, #52	; 0x34
 80063c4:	fb03 f301 	mul.w	r3, r3, r1
 80063c8:	4413      	add	r3, r2
 80063ca:	3390      	adds	r3, #144	; 0x90
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063d6:	4619      	mov	r1, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	2334      	movs	r3, #52	; 0x34
 80063dc:	fb03 f301 	mul.w	r3, r3, r1
 80063e0:	4413      	add	r3, r2
 80063e2:	3391      	adds	r3, #145	; 0x91
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063ee:	3301      	adds	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80063f8:	e0d3      	b.n	80065a2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d10c      	bne.n	800641a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006406:	4619      	mov	r1, r3
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	2334      	movs	r3, #52	; 0x34
 800640c:	fb03 f301 	mul.w	r3, r3, r1
 8006410:	4413      	add	r3, r2
 8006412:	3390      	adds	r3, #144	; 0x90
 8006414:	2205      	movs	r2, #5
 8006416:	701a      	strb	r2, [r3, #0]
            break;
 8006418:	e0c3      	b.n	80065a2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b04      	cmp	r3, #4
 800641e:	f040 80c0 	bne.w	80065a2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006428:	4619      	mov	r1, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	2334      	movs	r3, #52	; 0x34
 800642e:	fb03 f301 	mul.w	r3, r3, r1
 8006432:	4413      	add	r3, r2
 8006434:	3390      	adds	r3, #144	; 0x90
 8006436:	2201      	movs	r2, #1
 8006438:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006440:	4619      	mov	r1, r3
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	2334      	movs	r3, #52	; 0x34
 8006446:	fb03 f301 	mul.w	r3, r3, r1
 800644a:	4413      	add	r3, r2
 800644c:	3391      	adds	r3, #145	; 0x91
 800644e:	2202      	movs	r2, #2
 8006450:	701a      	strb	r2, [r3, #0]
            break;
 8006452:	e0a6      	b.n	80065a2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800645a:	b2d9      	uxtb	r1, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006462:	461a      	mov	r2, r3
 8006464:	2334      	movs	r3, #52	; 0x34
 8006466:	fb03 f302 	mul.w	r3, r3, r2
 800646a:	3398      	adds	r3, #152	; 0x98
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	3304      	adds	r3, #4
 8006472:	461a      	mov	r2, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fe94 	bl	80071a2 <USBH_MSC_SCSI_RequestSense>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d145      	bne.n	8006510 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800648a:	4619      	mov	r1, r3
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	2334      	movs	r3, #52	; 0x34
 8006490:	fb03 f301 	mul.w	r3, r3, r1
 8006494:	4413      	add	r3, r2
 8006496:	339c      	adds	r3, #156	; 0x9c
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b06      	cmp	r3, #6
 800649c:	d00c      	beq.n	80064b8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064a4:	4619      	mov	r1, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	2334      	movs	r3, #52	; 0x34
 80064aa:	fb03 f301 	mul.w	r3, r3, r1
 80064ae:	4413      	add	r3, r2
 80064b0:	339c      	adds	r3, #156	; 0x9c
 80064b2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d117      	bne.n	80064e8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d80c      	bhi.n	80064e8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064d4:	4619      	mov	r1, r3
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	2334      	movs	r3, #52	; 0x34
 80064da:	fb03 f301 	mul.w	r3, r3, r1
 80064de:	4413      	add	r3, r2
 80064e0:	3390      	adds	r3, #144	; 0x90
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
                  break;
 80064e6:	e05f      	b.n	80065a8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ee:	4619      	mov	r1, r3
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	2334      	movs	r3, #52	; 0x34
 80064f4:	fb03 f301 	mul.w	r3, r3, r1
 80064f8:	4413      	add	r3, r2
 80064fa:	3390      	adds	r3, #144	; 0x90
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006506:	3301      	adds	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d10c      	bne.n	8006530 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800651c:	4619      	mov	r1, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2334      	movs	r3, #52	; 0x34
 8006522:	fb03 f301 	mul.w	r3, r3, r1
 8006526:	4413      	add	r3, r2
 8006528:	3390      	adds	r3, #144	; 0x90
 800652a:	2208      	movs	r2, #8
 800652c:	701a      	strb	r2, [r3, #0]
            break;
 800652e:	e03a      	b.n	80065a6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d137      	bne.n	80065a6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800653c:	4619      	mov	r1, r3
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	2334      	movs	r3, #52	; 0x34
 8006542:	fb03 f301 	mul.w	r3, r3, r1
 8006546:	4413      	add	r3, r2
 8006548:	3390      	adds	r3, #144	; 0x90
 800654a:	2201      	movs	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006554:	4619      	mov	r1, r3
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	2334      	movs	r3, #52	; 0x34
 800655a:	fb03 f301 	mul.w	r3, r3, r1
 800655e:	4413      	add	r3, r2
 8006560:	3391      	adds	r3, #145	; 0x91
 8006562:	2202      	movs	r2, #2
 8006564:	701a      	strb	r2, [r3, #0]
            break;
 8006566:	e01e      	b.n	80065a6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800656e:	3301      	adds	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006578:	e016      	b.n	80065a8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2200      	movs	r2, #0
 800657e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2201      	movs	r2, #1
 8006586:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800658e:	2102      	movs	r1, #2
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
      break;
 8006594:	e00c      	b.n	80065b0 <USBH_MSC_Process+0x514>
            break;
 8006596:	bf00      	nop
 8006598:	e00a      	b.n	80065b0 <USBH_MSC_Process+0x514>
            break;
 800659a:	bf00      	nop
 800659c:	e008      	b.n	80065b0 <USBH_MSC_Process+0x514>
            break;
 800659e:	bf00      	nop
 80065a0:	e006      	b.n	80065b0 <USBH_MSC_Process+0x514>
            break;
 80065a2:	bf00      	nop
 80065a4:	e004      	b.n	80065b0 <USBH_MSC_Process+0x514>
            break;
 80065a6:	bf00      	nop
      break;
 80065a8:	e002      	b.n	80065b0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
      break;
 80065ae:	bf00      	nop
  }
  return error;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b088      	sub	sp, #32
 80065d6:	af02      	add	r7, sp, #8
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	2134      	movs	r1, #52	; 0x34
 80065f6:	fb01 f303 	mul.w	r3, r1, r3
 80065fa:	4413      	add	r3, r2
 80065fc:	3390      	adds	r3, #144	; 0x90
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b06      	cmp	r3, #6
 8006602:	d004      	beq.n	800660e <USBH_MSC_RdWrProcess+0x3c>
 8006604:	2b07      	cmp	r3, #7
 8006606:	d037      	beq.n	8006678 <USBH_MSC_RdWrProcess+0xa6>
 8006608:	2b05      	cmp	r3, #5
 800660a:	d06a      	beq.n	80066e2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800660c:	e0a6      	b.n	800675c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800660e:	78f9      	ldrb	r1, [r7, #3]
 8006610:	2300      	movs	r3, #0
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fea6 	bl	800736a <USBH_MSC_SCSI_Read>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	2134      	movs	r1, #52	; 0x34
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	4413      	add	r3, r2
 8006634:	3390      	adds	r3, #144	; 0x90
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]
      break;
 800663e:	e088      	b.n	8006752 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d109      	bne.n	800665a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	2134      	movs	r1, #52	; 0x34
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	3390      	adds	r3, #144	; 0x90
 8006654:	2205      	movs	r2, #5
 8006656:	701a      	strb	r2, [r3, #0]
      break;
 8006658:	e07b      	b.n	8006752 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d178      	bne.n	8006752 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	2134      	movs	r1, #52	; 0x34
 8006666:	fb01 f303 	mul.w	r3, r1, r3
 800666a:	4413      	add	r3, r2
 800666c:	3390      	adds	r3, #144	; 0x90
 800666e:	2208      	movs	r2, #8
 8006670:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006672:	2302      	movs	r3, #2
 8006674:	75fb      	strb	r3, [r7, #23]
      break;
 8006676:	e06c      	b.n	8006752 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006678:	78f9      	ldrb	r1, [r7, #3]
 800667a:	2300      	movs	r3, #0
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	2300      	movs	r3, #0
 8006680:	2200      	movs	r2, #0
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fe06 	bl	8007294 <USBH_MSC_SCSI_Write>
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	2134      	movs	r1, #52	; 0x34
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	3390      	adds	r3, #144	; 0x90
 80066a0:	2201      	movs	r2, #1
 80066a2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	e055      	b.n	8006756 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d109      	bne.n	80066c4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	2134      	movs	r1, #52	; 0x34
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	4413      	add	r3, r2
 80066bc:	3390      	adds	r3, #144	; 0x90
 80066be:	2205      	movs	r2, #5
 80066c0:	701a      	strb	r2, [r3, #0]
      break;
 80066c2:	e048      	b.n	8006756 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d145      	bne.n	8006756 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	2134      	movs	r1, #52	; 0x34
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	3390      	adds	r3, #144	; 0x90
 80066d8:	2208      	movs	r2, #8
 80066da:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80066dc:	2302      	movs	r3, #2
 80066de:	75fb      	strb	r3, [r7, #23]
      break;
 80066e0:	e039      	b.n	8006756 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	2234      	movs	r2, #52	; 0x34
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	3398      	adds	r3, #152	; 0x98
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fd53 	bl	80071a2 <USBH_MSC_SCSI_RequestSense>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d113      	bne.n	800672e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	2134      	movs	r1, #52	; 0x34
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	4413      	add	r3, r2
 8006712:	3390      	adds	r3, #144	; 0x90
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	2134      	movs	r1, #52	; 0x34
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	4413      	add	r3, r2
 8006724:	3391      	adds	r3, #145	; 0x91
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800672a:	2302      	movs	r3, #2
 800672c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d012      	beq.n	800675a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b04      	cmp	r3, #4
 8006738:	d10f      	bne.n	800675a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	2134      	movs	r1, #52	; 0x34
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	4413      	add	r3, r2
 8006746:	3390      	adds	r3, #144	; 0x90
 8006748:	2208      	movs	r2, #8
 800674a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800674c:	2302      	movs	r3, #2
 800674e:	75fb      	strb	r3, [r7, #23]
      break;
 8006750:	e003      	b.n	800675a <USBH_MSC_RdWrProcess+0x188>
      break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800675a:	bf00      	nop

  }
  return error;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b0b      	cmp	r3, #11
 8006784:	d10c      	bne.n	80067a0 <USBH_MSC_UnitIsReady+0x3a>
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	2134      	movs	r1, #52	; 0x34
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	4413      	add	r3, r2
 8006792:	3391      	adds	r3, #145	; 0x91
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800679a:	2301      	movs	r3, #1
 800679c:	73fb      	strb	r3, [r7, #15]
 800679e:	e001      	b.n	80067a4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	460b      	mov	r3, r1
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b0b      	cmp	r3, #11
 80067d2:	d10d      	bne.n	80067f0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	2234      	movs	r2, #52	; 0x34
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	3390      	adds	r3, #144	; 0x90
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	2234      	movs	r2, #52	; 0x34
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f004 ff0a 	bl	800b600 <memcpy>
    return USBH_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e000      	b.n	80067f2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80067f0:	2302      	movs	r3, #2
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b088      	sub	sp, #32
 80067fe:	af02      	add	r7, sp, #8
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	460b      	mov	r3, r1
 8006808:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006826:	2b0b      	cmp	r3, #11
 8006828:	d109      	bne.n	800683e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	2134      	movs	r1, #52	; 0x34
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	4413      	add	r3, r2
 8006836:	3390      	adds	r3, #144	; 0x90
 8006838:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800683a:	2b01      	cmp	r3, #1
 800683c:	d001      	beq.n	8006842 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800683e:	2302      	movs	r3, #2
 8006840:	e040      	b.n	80068c4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2206      	movs	r2, #6
 8006846:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	2134      	movs	r1, #52	; 0x34
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	4413      	add	r3, r2
 8006854:	3390      	adds	r3, #144	; 0x90
 8006856:	2206      	movs	r2, #6
 8006858:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	b29a      	uxth	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006864:	7af9      	ldrb	r1, [r7, #11]
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fd7b 	bl	800736a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800687a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800687c:	e016      	b.n	80068ac <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	f242 7110 	movw	r1, #10000	; 0x2710
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	429a      	cmp	r2, r3
 8006894:	d805      	bhi.n	80068a2 <USBH_MSC_Read+0xa8>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2201      	movs	r2, #1
 80068a6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80068a8:	2302      	movs	r3, #2
 80068aa:	e00b      	b.n	80068c4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fe8e 	bl	80065d2 <USBH_MSC_RdWrProcess>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d0e0      	beq.n	800687e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2201      	movs	r2, #1
 80068c0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	460b      	mov	r3, r1
 80068da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00e      	beq.n	8006910 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80068f8:	2b0b      	cmp	r3, #11
 80068fa:	d109      	bne.n	8006910 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	2134      	movs	r1, #52	; 0x34
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	3390      	adds	r3, #144	; 0x90
 800690a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800690c:	2b01      	cmp	r3, #1
 800690e:	d001      	beq.n	8006914 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006910:	2302      	movs	r3, #2
 8006912:	e040      	b.n	8006996 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2207      	movs	r2, #7
 8006918:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	2134      	movs	r1, #52	; 0x34
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	4413      	add	r3, r2
 8006926:	3390      	adds	r3, #144	; 0x90
 8006928:	2207      	movs	r2, #7
 800692a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	b29a      	uxth	r2, r3
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006936:	7af9      	ldrb	r1, [r7, #11]
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fca7 	bl	8007294 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800694c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800694e:	e016      	b.n	800697e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad2      	subs	r2, r2, r3
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	429a      	cmp	r2, r3
 8006966:	d805      	bhi.n	8006974 <USBH_MSC_Write+0xa8>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2201      	movs	r2, #1
 8006978:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800697a:	2302      	movs	r3, #2
 800697c:	e00b      	b.n	8006996 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	4619      	mov	r1, r3
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fe25 	bl	80065d2 <USBH_MSC_RdWrProcess>
 8006988:	4603      	mov	r3, r0
 800698a:	2b01      	cmp	r3, #1
 800698c:	d0e0      	beq.n	8006950 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2201      	movs	r2, #1
 8006992:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2221      	movs	r2, #33	; 0x21
 80069aa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	22ff      	movs	r2, #255	; 0xff
 80069b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fdae 	bl	800852a <USBH_CtlReq>
 80069ce:	4603      	mov	r3, r0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	22a1      	movs	r2, #161	; 0xa1
 80069e6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	22fe      	movs	r2, #254	; 0xfe
 80069ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006a00:	2201      	movs	r2, #1
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fd90 	bl	800852a <USBH_CtlReq>
 8006a0a:	4603      	mov	r3, r0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <USBH_MSC_BOT_Init+0x3c>)
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <USBH_MSC_BOT_Init+0x40>)
 8006a30:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	43425355 	.word	0x43425355
 8006a54:	20304050 	.word	0x20304050

08006a58 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	2b0a      	cmp	r3, #10
 8006a8c:	f200 81a1 	bhi.w	8006dd2 <USBH_MSC_BOT_Process+0x37a>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <USBH_MSC_BOT_Process+0x40>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	08006aef 	.word	0x08006aef
 8006aa0:	08006b59 	.word	0x08006b59
 8006aa4:	08006b77 	.word	0x08006b77
 8006aa8:	08006bfb 	.word	0x08006bfb
 8006aac:	08006c1f 	.word	0x08006c1f
 8006ab0:	08006cb9 	.word	0x08006cb9
 8006ab4:	08006cd5 	.word	0x08006cd5
 8006ab8:	08006d27 	.word	0x08006d27
 8006abc:	08006d57 	.word	0x08006d57
 8006ac0:	08006db9 	.word	0x08006db9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	795a      	ldrb	r2, [r3, #5]
 8006ade:	2301      	movs	r3, #1
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	221f      	movs	r2, #31
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 ff2f 	bl	800894a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006aec:	e180      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	795b      	ldrb	r3, [r3, #5]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f004 fc6b 	bl	800b3d0 <USBH_LL_GetURBState>
 8006afa:	4603      	mov	r3, r0
 8006afc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006afe:	7d3b      	ldrb	r3, [r7, #20]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d118      	bne.n	8006b36 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00f      	beq.n	8006b2c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da04      	bge.n	8006b22 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b20:	e159      	b.n	8006dd6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2205      	movs	r2, #5
 8006b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b2a:	e154      	b.n	8006dd6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2207      	movs	r2, #7
 8006b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b34:	e14f      	b.n	8006dd6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b36:	7d3b      	ldrb	r3, [r7, #20]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d104      	bne.n	8006b46 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b44:	e147      	b.n	8006dd6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006b46:	7d3b      	ldrb	r3, [r7, #20]
 8006b48:	2b05      	cmp	r3, #5
 8006b4a:	f040 8144 	bne.w	8006dd6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	220a      	movs	r2, #10
 8006b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b56:	e13e      	b.n	8006dd6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	895a      	ldrh	r2, [r3, #10]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	791b      	ldrb	r3, [r3, #4]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 ff14 	bl	8008994 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006b74:	e13c      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	791b      	ldrb	r3, [r3, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f004 fc27 	bl	800b3d0 <USBH_LL_GetURBState>
 8006b82:	4603      	mov	r3, r0
 8006b84:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006b86:	7d3b      	ldrb	r3, [r7, #20]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d12d      	bne.n	8006be8 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	8952      	ldrh	r2, [r2, #10]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d910      	bls.n	8006bba <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	8952      	ldrh	r2, [r2, #10]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	8952      	ldrh	r2, [r2, #10]
 8006bb2:	1a9a      	subs	r2, r3, r2
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bb8:	e002      	b.n	8006bc0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	895a      	ldrh	r2, [r3, #10]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fedc 	bl	8008994 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006bdc:	e0fd      	b.n	8006dda <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2207      	movs	r2, #7
 8006be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006be6:	e0f8      	b.n	8006dda <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8006be8:	7d3b      	ldrb	r3, [r7, #20]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	f040 80f5 	bne.w	8006dda <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2209      	movs	r2, #9
 8006bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bf8:	e0ef      	b.n	8006dda <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	891a      	ldrh	r2, [r3, #8]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	7958      	ldrb	r0, [r3, #5]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 fe9b 	bl	800894a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2206      	movs	r2, #6
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c1c:	e0e8      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	795b      	ldrb	r3, [r3, #5]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f004 fbd3 	bl	800b3d0 <USBH_LL_GetURBState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006c2e:	7d3b      	ldrb	r3, [r7, #20]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d130      	bne.n	8006c96 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	8912      	ldrh	r2, [r2, #8]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d910      	bls.n	8006c62 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	8912      	ldrh	r2, [r2, #8]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	8912      	ldrh	r2, [r2, #8]
 8006c5a:	1a9a      	subs	r2, r3, r2
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c60:	e002      	b.n	8006c68 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2200      	movs	r2, #0
 8006c66:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00d      	beq.n	8006c8c <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	891a      	ldrh	r2, [r3, #8]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	7958      	ldrb	r0, [r3, #5]
 8006c7e:	2301      	movs	r3, #1
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	4603      	mov	r3, r0
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fe60 	bl	800894a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006c8a:	e0a8      	b.n	8006dde <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2207      	movs	r2, #7
 8006c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c94:	e0a3      	b.n	8006dde <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c96:	7d3b      	ldrb	r3, [r7, #20]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d104      	bne.n	8006ca6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2205      	movs	r2, #5
 8006ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ca4:	e09b      	b.n	8006dde <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8006ca6:	7d3b      	ldrb	r3, [r7, #20]
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	f040 8098 	bne.w	8006dde <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cb6:	e092      	b.n	8006dde <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	791b      	ldrb	r3, [r3, #4]
 8006cc2:	220d      	movs	r2, #13
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fe65 	bl	8008994 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cd2:	e08d      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	791b      	ldrb	r3, [r3, #4]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f004 fb78 	bl	800b3d0 <USBH_LL_GetURBState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006ce4:	7d3b      	ldrb	r3, [r7, #20]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d115      	bne.n	8006d16 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8aa 	bl	8006e54 <USBH_MSC_DecodeCSW>
 8006d00:	4603      	mov	r3, r0
 8006d02:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006d04:	7d7b      	ldrb	r3, [r7, #21]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006d0e:	e068      	b.n	8006de2 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8006d10:	2302      	movs	r3, #2
 8006d12:	75fb      	strb	r3, [r7, #23]
      break;
 8006d14:	e065      	b.n	8006de2 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8006d16:	7d3b      	ldrb	r3, [r7, #20]
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d162      	bne.n	8006de2 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2209      	movs	r2, #9
 8006d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d24:	e05d      	b.n	8006de2 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f865 	bl	8006dfc <USBH_MSC_BOT_Abort>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006d36:	7dbb      	ldrb	r3, [r7, #22]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2207      	movs	r2, #7
 8006d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006d44:	e04f      	b.n	8006de6 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006d46:	7dbb      	ldrb	r3, [r7, #22]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d14c      	bne.n	8006de6 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	220b      	movs	r2, #11
 8006d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d54:	e047      	b.n	8006de6 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f84d 	bl	8006dfc <USBH_MSC_BOT_Abort>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006d66:	7dbb      	ldrb	r3, [r7, #22]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11d      	bne.n	8006da8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	795b      	ldrb	r3, [r3, #5]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f004 fb89 	bl	800b48a <USBH_LL_GetToggle>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	7959      	ldrb	r1, [r3, #5]
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	f1c3 0301 	rsb	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f004 fb4a 	bl	800b424 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	791b      	ldrb	r3, [r3, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f004 fb43 	bl	800b424 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2209      	movs	r2, #9
 8006da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006da6:	e020      	b.n	8006dea <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8006da8:	7dbb      	ldrb	r3, [r7, #22]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d11d      	bne.n	8006dea <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	220b      	movs	r2, #11
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006db6:	e018      	b.n	8006dea <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fdf0 	bl	800699e <USBH_MSC_BOT_REQ_Reset>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d112      	bne.n	8006dee <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006dd0:	e00d      	b.n	8006dee <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8006dd2:	bf00      	nop
 8006dd4:	e00c      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e00a      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e008      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006dde:	bf00      	nop
 8006de0:	e006      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006de2:	bf00      	nop
 8006de4:	e004      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006de6:	bf00      	nop
 8006de8:	e002      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <USBH_MSC_BOT_Process+0x398>
      break;
 8006dee:	bf00      	nop
  }
  return status;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006e1a:	78bb      	ldrb	r3, [r7, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <USBH_MSC_BOT_Abort+0x2a>
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d009      	beq.n	8006e38 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006e24:	e011      	b.n	8006e4a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	79db      	ldrb	r3, [r3, #7]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f99c 	bl	800816a <USBH_ClrFeature>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
      break;
 8006e36:	e008      	b.n	8006e4a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	799b      	ldrb	r3, [r3, #6]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f993 	bl	800816a <USBH_ClrFeature>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]
      break;
 8006e48:	bf00      	nop
  }
  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f004 fa1b 	bl	800b2ac <USBH_LL_GetLastXferSize>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b0d      	cmp	r3, #13
 8006e7a:	d002      	beq.n	8006e82 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e024      	b.n	8006ecc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e86:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <USBH_MSC_DecodeCSW+0x84>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d11d      	bne.n	8006ec8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d119      	bne.n	8006ecc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	e011      	b.n	8006ecc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d102      	bne.n	8006eb8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	e009      	b.n	8006ecc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d104      	bne.n	8006ecc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e001      	b.n	8006ecc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	53425355 	.word	0x53425355

08006edc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d002      	beq.n	8006f06 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d021      	beq.n	8006f48 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006f04:	e028      	b.n	8006f58 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	220a      	movs	r2, #10
 8006f18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3363      	adds	r3, #99	; 0x63
 8006f20:	2210      	movs	r2, #16
 8006f22:	2100      	movs	r1, #0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f004 fb76 	bl	800b616 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006f42:	2301      	movs	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
      break;
 8006f46:	e007      	b.n	8006f58 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fd83 	bl	8006a58 <USBH_MSC_BOT_Process>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
      break;
 8006f56:	bf00      	nop
  }

  return error;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006f70:	2301      	movs	r3, #1
 8006f72:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d002      	beq.n	8006f8e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d027      	beq.n	8006fdc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006f8c:	e05f      	b.n	800704e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2208      	movs	r2, #8
 8006f92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	3363      	adds	r3, #99	; 0x63
 8006fa8:	2210      	movs	r2, #16
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f004 fb32 	bl	800b616 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2225      	movs	r2, #37	; 0x25
 8006fb6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f103 0210 	add.w	r2, r3, #16
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fda:	e038      	b.n	800704e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff fd39 	bl	8006a58 <USBH_MSC_BOT_Process>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d12d      	bne.n	800704c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff6:	3303      	adds	r3, #3
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007002:	3302      	adds	r3, #2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007010:	3301      	adds	r3, #1
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007016:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	061b      	lsls	r3, r3, #24
 8007022:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702e:	3307      	adds	r3, #7
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800703a:	3306      	adds	r3, #6
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	b29b      	uxth	r3, r3
 8007044:	4313      	orrs	r3, r2
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	809a      	strh	r2, [r3, #4]
      break;
 800704c:	bf00      	nop
  }

  return error;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	460b      	mov	r3, r1
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007066:	2302      	movs	r3, #2
 8007068:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800707a:	2b01      	cmp	r3, #1
 800707c:	d002      	beq.n	8007084 <USBH_MSC_SCSI_Inquiry+0x2c>
 800707e:	2b02      	cmp	r3, #2
 8007080:	d03d      	beq.n	80070fe <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007082:	e089      	b.n	8007198 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2224      	movs	r2, #36	; 0x24
 8007088:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2280      	movs	r2, #128	; 0x80
 800708e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	220a      	movs	r2, #10
 8007096:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	3363      	adds	r3, #99	; 0x63
 800709e:	220a      	movs	r2, #10
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f004 fab7 	bl	800b616 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2212      	movs	r2, #18
 80070ac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	015b      	lsls	r3, r3, #5
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2224      	movs	r2, #36	; 0x24
 80070d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f103 0210 	add.w	r2, r3, #16
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80070f8:	2301      	movs	r3, #1
 80070fa:	75fb      	strb	r3, [r7, #23]
      break;
 80070fc:	e04c      	b.n	8007198 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fca8 	bl	8006a58 <USBH_MSC_BOT_Process>
 8007108:	4603      	mov	r3, r0
 800710a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d141      	bne.n	8007196 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007112:	2222      	movs	r2, #34	; 0x22
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f004 fa7d 	bl	800b616 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 031f 	and.w	r3, r3, #31
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007144:	3301      	adds	r3, #1
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	b25b      	sxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	da03      	bge.n	8007156 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	709a      	strb	r2, [r3, #2]
 8007154:	e002      	b.n	800715c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1cd8      	adds	r0, r3, #3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007166:	3308      	adds	r3, #8
 8007168:	2208      	movs	r2, #8
 800716a:	4619      	mov	r1, r3
 800716c:	f004 fa48 	bl	800b600 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 000c 	add.w	r0, r3, #12
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800717c:	3310      	adds	r3, #16
 800717e:	2210      	movs	r2, #16
 8007180:	4619      	mov	r1, r3
 8007182:	f004 fa3d 	bl	800b600 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	331d      	adds	r3, #29
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007190:	3220      	adds	r2, #32
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	601a      	str	r2, [r3, #0]
      break;
 8007196:	bf00      	nop
  }

  return error;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	460b      	mov	r3, r1
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80071b0:	2302      	movs	r3, #2
 80071b2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d002      	beq.n	80071ce <USBH_MSC_SCSI_RequestSense+0x2c>
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d03d      	beq.n	8007248 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80071cc:	e05d      	b.n	800728a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	220e      	movs	r2, #14
 80071d2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2280      	movs	r2, #128	; 0x80
 80071d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	220a      	movs	r2, #10
 80071e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3363      	adds	r3, #99	; 0x63
 80071e8:	2210      	movs	r2, #16
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f004 fa12 	bl	800b616 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2203      	movs	r2, #3
 80071f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	015b      	lsls	r3, r3, #5
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	220e      	movs	r2, #14
 800721a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f103 0210 	add.w	r2, r3, #16
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007242:	2301      	movs	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
      break;
 8007246:	e020      	b.n	800728a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fc03 	bl	8006a58 <USBH_MSC_BOT_Process>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d115      	bne.n	8007288 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007262:	3302      	adds	r3, #2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	b2da      	uxtb	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	7b1a      	ldrb	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007282:	7b5a      	ldrb	r2, [r3, #13]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	709a      	strb	r2, [r3, #2]
      break;
 8007288:	bf00      	nop
  }

  return error;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	460b      	mov	r3, r1
 80072a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80072a4:	2302      	movs	r3, #2
 80072a6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d002      	beq.n	80072c2 <USBH_MSC_SCSI_Write+0x2e>
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d047      	beq.n	8007350 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80072c0:	e04e      	b.n	8007360 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80072c8:	461a      	mov	r2, r3
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	fb03 f202 	mul.w	r2, r3, r2
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	220a      	movs	r2, #10
 80072e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3363      	adds	r3, #99	; 0x63
 80072e8:	2210      	movs	r2, #16
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f004 f992 	bl	800b616 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	222a      	movs	r2, #42	; 0x2a
 80072f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80072fa:	79fa      	ldrb	r2, [r7, #7]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007302:	79ba      	ldrb	r2, [r7, #6]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800730a:	797a      	ldrb	r2, [r7, #5]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007312:	1d3b      	adds	r3, r7, #4
 8007314:	781a      	ldrb	r2, [r3, #0]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800731c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007326:	f107 0320 	add.w	r3, r7, #32
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
      break;
 800734e:	e007      	b.n	8007360 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007350:	7afb      	ldrb	r3, [r7, #11]
 8007352:	4619      	mov	r1, r3
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fb7f 	bl	8006a58 <USBH_MSC_BOT_Process>
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]
      break;
 800735e:	bf00      	nop
  }

  return error;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	460b      	mov	r3, r1
 8007378:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800737a:	2302      	movs	r3, #2
 800737c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800738e:	2b01      	cmp	r3, #1
 8007390:	d002      	beq.n	8007398 <USBH_MSC_SCSI_Read+0x2e>
 8007392:	2b02      	cmp	r3, #2
 8007394:	d047      	beq.n	8007426 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007396:	e04e      	b.n	8007436 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800739e:	461a      	mov	r2, r3
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	fb03 f202 	mul.w	r2, r3, r2
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	220a      	movs	r2, #10
 80073b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3363      	adds	r3, #99	; 0x63
 80073be:	2210      	movs	r2, #16
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f004 f927 	bl	800b616 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2228      	movs	r2, #40	; 0x28
 80073cc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80073d8:	79ba      	ldrb	r2, [r7, #6]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80073e0:	797a      	ldrb	r2, [r7, #5]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80073f2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80073fc:	f107 0320 	add.w	r3, r7, #32
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	e007      	b.n	8007436 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	4619      	mov	r1, r3
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fb14 	bl	8006a58 <USBH_MSC_BOT_Process>
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	bf00      	nop
  }

  return error;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007454:	2302      	movs	r3, #2
 8007456:	e029      	b.n	80074ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	79fa      	ldrb	r2, [r7, #7]
 800745c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f81f 	bl	80074b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f003 fe4f 	bl	800b148 <USBH_LL_Init>

  return USBH_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e009      	b.n	80074da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	33e0      	adds	r3, #224	; 0xe0
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	2200      	movs	r2, #0
 80074d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b0e      	cmp	r3, #14
 80074de:	d9f2      	bls.n	80074c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e009      	b.n	80074fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007500:	d3f1      	bcc.n	80074e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2240      	movs	r2, #64	; 0x40
 8007526:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d016      	beq.n	800759e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10e      	bne.n	8007598 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007580:	1c59      	adds	r1, r3, #1
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	33de      	adds	r3, #222	; 0xde
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	e004      	b.n	80075a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007598:	2302      	movs	r3, #2
 800759a:	73fb      	strb	r3, [r7, #15]
 800759c:	e001      	b.n	80075a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800759e:	2302      	movs	r3, #2
 80075a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075c6:	78fa      	ldrb	r2, [r7, #3]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d204      	bcs.n	80075d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075d4:	e001      	b.n	80075da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075d6:	2302      	movs	r3, #2
 80075d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	70fb      	strb	r3, [r7, #3]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70bb      	strb	r3, [r7, #2]
 80075fe:	4613      	mov	r3, r2
 8007600:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007610:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007612:	e025      	b.n	8007660 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	221a      	movs	r2, #26
 8007618:	fb02 f303 	mul.w	r3, r2, r3
 800761c:	3308      	adds	r3, #8
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	3302      	adds	r3, #2
 8007624:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	795b      	ldrb	r3, [r3, #5]
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	429a      	cmp	r2, r3
 800762e:	d002      	beq.n	8007636 <USBH_FindInterface+0x4e>
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	2bff      	cmp	r3, #255	; 0xff
 8007634:	d111      	bne.n	800765a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800763a:	78ba      	ldrb	r2, [r7, #2]
 800763c:	429a      	cmp	r2, r3
 800763e:	d002      	beq.n	8007646 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007640:	78bb      	ldrb	r3, [r7, #2]
 8007642:	2bff      	cmp	r3, #255	; 0xff
 8007644:	d109      	bne.n	800765a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800764a:	787a      	ldrb	r2, [r7, #1]
 800764c:	429a      	cmp	r2, r3
 800764e:	d002      	beq.n	8007656 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007650:	787b      	ldrb	r3, [r7, #1]
 8007652:	2bff      	cmp	r3, #255	; 0xff
 8007654:	d101      	bne.n	800765a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	e006      	b.n	8007668 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	3301      	adds	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d9d6      	bls.n	8007614 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007666:	23ff      	movs	r3, #255	; 0xff
}
 8007668:	4618      	mov	r0, r3
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f003 fd9f 	bl	800b1c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007682:	2101      	movs	r1, #1
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f003 feb6 	bl	800b3f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af04      	add	r7, sp, #16
 800769a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800769c:	2302      	movs	r3, #2
 800769e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d102      	bne.n	80076b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2203      	movs	r2, #3
 80076b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b0b      	cmp	r3, #11
 80076be:	f200 81b3 	bhi.w	8007a28 <USBH_Process+0x394>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <USBH_Process+0x34>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	0800772b 	.word	0x0800772b
 80076d0:	08007793 	.word	0x08007793
 80076d4:	080079c3 	.word	0x080079c3
 80076d8:	08007a29 	.word	0x08007a29
 80076dc:	08007837 	.word	0x08007837
 80076e0:	08007969 	.word	0x08007969
 80076e4:	0800786d 	.word	0x0800786d
 80076e8:	0800788d 	.word	0x0800788d
 80076ec:	080078ad 	.word	0x080078ad
 80076f0:	080078db 	.word	0x080078db
 80076f4:	080079ab 	.word	0x080079ab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8193 	beq.w	8007a2c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800770c:	20c8      	movs	r0, #200	; 0xc8
 800770e:	f003 feef 	bl	800b4f0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f003 fdaf 	bl	800b276 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007728:	e180      	b.n	8007a2c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007730:	2b01      	cmp	r3, #1
 8007732:	d107      	bne.n	8007744 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007742:	e182      	b.n	8007a4a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800774a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800774e:	d914      	bls.n	800777a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007756:	3301      	adds	r3, #1
 8007758:	b2da      	uxtb	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007766:	2b03      	cmp	r3, #3
 8007768:	d903      	bls.n	8007772 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	220d      	movs	r2, #13
 800776e:	701a      	strb	r2, [r3, #0]
      break;
 8007770:	e16b      	b.n	8007a4a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
      break;
 8007778:	e167      	b.n	8007a4a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007780:	f103 020a 	add.w	r2, r3, #10
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800778a:	200a      	movs	r0, #10
 800778c:	f003 feb0 	bl	800b4f0 <USBH_Delay>
      break;
 8007790:	e15b      	b.n	8007a4a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077a2:	2104      	movs	r1, #4
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077a8:	2064      	movs	r0, #100	; 0x64
 80077aa:	f003 fea1 	bl	800b4f0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f003 fd3c 	bl	800b22c <USBH_LL_GetSpeed>
 80077b4:	4603      	mov	r3, r0
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2205      	movs	r2, #5
 80077c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f931 	bl	8008a2e <USBH_AllocPipe>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077d4:	2180      	movs	r1, #128	; 0x80
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f929 	bl	8008a2e <USBH_AllocPipe>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7919      	ldrb	r1, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077f8:	b292      	uxth	r2, r2
 80077fa:	9202      	str	r2, [sp, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	9201      	str	r2, [sp, #4]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	4603      	mov	r3, r0
 8007804:	2280      	movs	r2, #128	; 0x80
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 f8e2 	bl	80089d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7959      	ldrb	r1, [r3, #5]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007820:	b292      	uxth	r2, r2
 8007822:	9202      	str	r2, [sp, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	9201      	str	r2, [sp, #4]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	4603      	mov	r3, r0
 800782c:	2200      	movs	r2, #0
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 f8ce 	bl	80089d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007834:	e109      	b.n	8007a4a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f90c 	bl	8007a54 <USBH_HandleEnum>
 800783c:	4603      	mov	r3, r0
 800783e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 80f3 	bne.w	8007a30 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007858:	2b01      	cmp	r3, #1
 800785a:	d103      	bne.n	8007864 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2208      	movs	r2, #8
 8007860:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007862:	e0e5      	b.n	8007a30 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2207      	movs	r2, #7
 8007868:	701a      	strb	r2, [r3, #0]
      break;
 800786a:	e0e1      	b.n	8007a30 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80de 	beq.w	8007a34 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2208      	movs	r2, #8
 8007888:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800788a:	e0d3      	b.n	8007a34 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007892:	b29b      	uxth	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fc20 	bl	80080dc <USBH_SetCfg>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 80ca 	bne.w	8007a38 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2209      	movs	r2, #9
 80078a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078aa:	e0c5      	b.n	8007a38 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80078ba:	2101      	movs	r1, #1
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc30 	bl	8008122 <USBH_SetFeature>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 80b9 	bne.w	8007a3c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	220a      	movs	r2, #10
 80078ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078d0:	e0b4      	b.n	8007a3c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	220a      	movs	r2, #10
 80078d6:	701a      	strb	r2, [r3, #0]
      break;
 80078d8:	e0b0      	b.n	8007a3c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80ad 	beq.w	8007a40 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
 80078f2:	e016      	b.n	8007922 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078f4:	7bfa      	ldrb	r2, [r7, #15]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32de      	adds	r2, #222	; 0xde
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	791a      	ldrb	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007906:	429a      	cmp	r2, r3
 8007908:	d108      	bne.n	800791c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800790a:	7bfa      	ldrb	r2, [r7, #15]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	32de      	adds	r2, #222	; 0xde
 8007910:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800791a:	e005      	b.n	8007928 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	3301      	adds	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0e5      	beq.n	80078f4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d016      	beq.n	8007960 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2206      	movs	r2, #6
 8007948:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007950:	2103      	movs	r1, #3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007956:	e073      	b.n	8007a40 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	220d      	movs	r2, #13
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e06f      	b.n	8007a40 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220d      	movs	r2, #13
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e06b      	b.n	8007a40 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d017      	beq.n	80079a2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	220b      	movs	r2, #11
 800798e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007990:	e058      	b.n	8007a44 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d154      	bne.n	8007a44 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220d      	movs	r2, #13
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	e050      	b.n	8007a44 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	220d      	movs	r2, #13
 80079a6:	701a      	strb	r2, [r3, #0]
      break;
 80079a8:	e04c      	b.n	8007a44 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d049      	beq.n	8007a48 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	4798      	blx	r3
      }
      break;
 80079c0:	e042      	b.n	8007a48 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff fd72 	bl	80074b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079fe:	2105      	movs	r1, #5
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d107      	bne.n	8007a20 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff fe2b 	bl	8007674 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a1e:	e014      	b.n	8007a4a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f003 fbcd 	bl	800b1c0 <USBH_LL_Start>
      break;
 8007a26:	e010      	b.n	8007a4a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a28:	bf00      	nop
 8007a2a:	e00e      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e00c      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a30:	bf00      	nop
 8007a32:	e00a      	b.n	8007a4a <USBH_Process+0x3b6>
    break;
 8007a34:	bf00      	nop
 8007a36:	e008      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a38:	bf00      	nop
 8007a3a:	e006      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a3c:	bf00      	nop
 8007a3e:	e004      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a40:	bf00      	nop
 8007a42:	e002      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a44:	bf00      	nop
 8007a46:	e000      	b.n	8007a4a <USBH_Process+0x3b6>
      break;
 8007a48:	bf00      	nop
  }
  return USBH_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af04      	add	r7, sp, #16
 8007a5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b07      	cmp	r3, #7
 8007a6a:	f200 81c1 	bhi.w	8007df0 <USBH_HandleEnum+0x39c>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBH_HandleEnum+0x20>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a95 	.word	0x08007a95
 8007a78:	08007b53 	.word	0x08007b53
 8007a7c:	08007bbd 	.word	0x08007bbd
 8007a80:	08007c4b 	.word	0x08007c4b
 8007a84:	08007cb5 	.word	0x08007cb5
 8007a88:	08007d25 	.word	0x08007d25
 8007a8c:	08007d6b 	.word	0x08007d6b
 8007a90:	08007db1 	.word	0x08007db1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a94:	2108      	movs	r1, #8
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa50 	bl	8007f3c <USBH_Get_DevDesc>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d130      	bne.n	8007b08 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7919      	ldrb	r1, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007aca:	b292      	uxth	r2, r2
 8007acc:	9202      	str	r2, [sp, #8]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	9201      	str	r2, [sp, #4]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2280      	movs	r2, #128	; 0x80
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 ff79 	bl	80089d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7959      	ldrb	r1, [r3, #5]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007af2:	b292      	uxth	r2, r2
 8007af4:	9202      	str	r2, [sp, #8]
 8007af6:	2200      	movs	r2, #0
 8007af8:	9201      	str	r2, [sp, #4]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4603      	mov	r3, r0
 8007afe:	2200      	movs	r2, #0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 ff65 	bl	80089d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b06:	e175      	b.n	8007df4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	f040 8172 	bne.w	8007df4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d903      	bls.n	8007b32 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e160      	b.n	8007df4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	795b      	ldrb	r3, [r3, #5]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 ff99 	bl	8008a70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	791b      	ldrb	r3, [r3, #4]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 ff93 	bl	8008a70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
      break;
 8007b50:	e150      	b.n	8007df4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b52:	2112      	movs	r1, #18
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9f1 	bl	8007f3c <USBH_Get_DevDesc>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b6a:	e145      	b.n	8007df8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	f040 8142 	bne.w	8007df8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d903      	bls.n	8007b96 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	220d      	movs	r2, #13
 8007b92:	701a      	strb	r2, [r3, #0]
      break;
 8007b94:	e130      	b.n	8007df8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	795b      	ldrb	r3, [r3, #5]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 ff67 	bl	8008a70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	791b      	ldrb	r3, [r3, #4]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ff61 	bl	8008a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
      break;
 8007bba:	e11d      	b.n	8007df8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa68 	bl	8008094 <USBH_SetAddress>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d132      	bne.n	8007c34 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007bce:	2002      	movs	r0, #2
 8007bd0:	f003 fc8e 	bl	800b4f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2203      	movs	r2, #3
 8007be0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7919      	ldrb	r1, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	9202      	str	r2, [sp, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4603      	mov	r3, r0
 8007c02:	2280      	movs	r2, #128	; 0x80
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fee3 	bl	80089d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7959      	ldrb	r1, [r3, #5]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	9202      	str	r2, [sp, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	9201      	str	r2, [sp, #4]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fecf 	bl	80089d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c32:	e0e3      	b.n	8007dfc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	f040 80e0 	bne.w	8007dfc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	220d      	movs	r2, #13
 8007c40:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	705a      	strb	r2, [r3, #1]
      break;
 8007c48:	e0d8      	b.n	8007dfc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c4a:	2109      	movs	r1, #9
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f99d 	bl	8007f8c <USBH_Get_CfgDesc>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2204      	movs	r2, #4
 8007c60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c62:	e0cd      	b.n	8007e00 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	f040 80ca 	bne.w	8007e00 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c72:	3301      	adds	r3, #1
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d903      	bls.n	8007c8e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	220d      	movs	r2, #13
 8007c8a:	701a      	strb	r2, [r3, #0]
      break;
 8007c8c:	e0b8      	b.n	8007e00 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	795b      	ldrb	r3, [r3, #5]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 feeb 	bl	8008a70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fee5 	bl	8008a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
      break;
 8007cb2:	e0a5      	b.n	8007e00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f965 	bl	8007f8c <USBH_Get_CfgDesc>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2205      	movs	r2, #5
 8007cd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cd2:	e097      	b.n	8007e04 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	f040 8094 	bne.w	8007e04 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d903      	bls.n	8007cfe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	220d      	movs	r2, #13
 8007cfa:	701a      	strb	r2, [r3, #0]
      break;
 8007cfc:	e082      	b.n	8007e04 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	795b      	ldrb	r3, [r3, #5]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 feb3 	bl	8008a70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fead 	bl	8008a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
      break;
 8007d22:	e06f      	b.n	8007e04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d019      	beq.n	8007d62 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d3a:	23ff      	movs	r3, #255	; 0xff
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f949 	bl	8007fd4 <USBH_Get_StringDesc>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2206      	movs	r2, #6
 8007d50:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d52:	e059      	b.n	8007e08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d156      	bne.n	8007e08 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2206      	movs	r2, #6
 8007d5e:	705a      	strb	r2, [r3, #1]
      break;
 8007d60:	e052      	b.n	8007e08 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2206      	movs	r2, #6
 8007d66:	705a      	strb	r2, [r3, #1]
      break;
 8007d68:	e04e      	b.n	8007e08 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d019      	beq.n	8007da8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d80:	23ff      	movs	r3, #255	; 0xff
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f926 	bl	8007fd4 <USBH_Get_StringDesc>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2207      	movs	r2, #7
 8007d96:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d98:	e038      	b.n	8007e0c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d135      	bne.n	8007e0c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2207      	movs	r2, #7
 8007da4:	705a      	strb	r2, [r3, #1]
      break;
 8007da6:	e031      	b.n	8007e0c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2207      	movs	r2, #7
 8007dac:	705a      	strb	r2, [r3, #1]
      break;
 8007dae:	e02d      	b.n	8007e0c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d017      	beq.n	8007dea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dc6:	23ff      	movs	r3, #255	; 0xff
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f903 	bl	8007fd4 <USBH_Get_StringDesc>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007ddc:	e018      	b.n	8007e10 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d115      	bne.n	8007e10 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
      break;
 8007de8:	e012      	b.n	8007e10 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
      break;
 8007dee:	e00f      	b.n	8007e10 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007df0:	bf00      	nop
 8007df2:	e00e      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007df4:	bf00      	nop
 8007df6:	e00c      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e00a      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e008      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007e00:	bf00      	nop
 8007e02:	e006      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007e04:	bf00      	nop
 8007e06:	e004      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007e08:	bf00      	nop
 8007e0a:	e002      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <USBH_HandleEnum+0x3be>
      break;
 8007e10:	bf00      	nop
  }
  return Status;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f804 	bl	8007e5e <USBH_HandleSof>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b0b      	cmp	r3, #11
 8007e6e:	d10a      	bne.n	8007e86 <USBH_HandleSof+0x28>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
  }
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e9e:	bf00      	nop
}
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007eba:	bf00      	nop
}
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f003 f96e 	bl	800b1f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	791b      	ldrb	r3, [r3, #4]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fda5 	bl	8008a70 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	795b      	ldrb	r3, [r3, #5]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fd9f 	bl	8008a70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	4613      	mov	r3, r2
 8007f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f864 	bl	800802a <USBH_GetDescriptor>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	b292      	uxth	r2, r2
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	f000 f918 	bl	80081b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	331c      	adds	r3, #28
 8007f9c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f9e:	887b      	ldrh	r3, [r7, #2]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa8:	2100      	movs	r1, #0
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f83d 	bl	800802a <USBH_GetDescriptor>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	72fb      	strb	r3, [r7, #11]
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d107      	bne.n	8007fca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007fc0:	887a      	ldrh	r2, [r7, #2]
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f964 	bl	8008292 <USBH_ParseCfgDesc>
  }

  return status;
 8007fca:	7afb      	ldrb	r3, [r7, #11]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	72fb      	strb	r3, [r7, #11]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007ff0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ff8:	893b      	ldrh	r3, [r7, #8]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f812 	bl	800802a <USBH_GetDescriptor>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d107      	bne.n	8008020 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008016:	893a      	ldrh	r2, [r7, #8]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fa37 	bl	800848e <USBH_ParseStringDesc>
  }

  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	72fb      	strb	r3, [r7, #11]
 8008038:	4613      	mov	r3, r2
 800803a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	789b      	ldrb	r3, [r3, #2]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d11c      	bne.n	800807e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800804a:	b2da      	uxtb	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2206      	movs	r2, #6
 8008054:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	893a      	ldrh	r2, [r7, #8]
 800805a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800805c:	893b      	ldrh	r3, [r7, #8]
 800805e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008066:	d104      	bne.n	8008072 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f240 4209 	movw	r2, #1033	; 0x409
 800806e:	829a      	strh	r2, [r3, #20]
 8008070:	e002      	b.n	8008078 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8b3a      	ldrh	r2, [r7, #24]
 800807c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800807e:	8b3b      	ldrh	r3, [r7, #24]
 8008080:	461a      	mov	r2, r3
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fa50 	bl	800852a <USBH_CtlReq>
 800808a:	4603      	mov	r3, r0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	789b      	ldrb	r3, [r3, #2]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d10f      	bne.n	80080c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2205      	movs	r2, #5
 80080b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080c8:	2200      	movs	r2, #0
 80080ca:	2100      	movs	r1, #0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa2c 	bl	800852a <USBH_CtlReq>
 80080d2:	4603      	mov	r3, r0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	789b      	ldrb	r3, [r3, #2]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10e      	bne.n	800810e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2209      	movs	r2, #9
 80080fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	887a      	ldrh	r2, [r7, #2]
 8008100:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa09 	bl	800852a <USBH_CtlReq>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	789b      	ldrb	r3, [r3, #2]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d10f      	bne.n	8008156 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2203      	movs	r2, #3
 8008140:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008156:	2200      	movs	r2, #0
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f9e5 	bl	800852a <USBH_CtlReq>
 8008160:	4603      	mov	r3, r0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	789b      	ldrb	r3, [r3, #2]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d10f      	bne.n	800819e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	b29a      	uxth	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f9c1 	bl	800852a <USBH_CtlReq>
 80081a8:	4603      	mov	r3, r0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	4613      	mov	r3, r2
 80081be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	785a      	ldrb	r2, [r3, #1]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3302      	adds	r3, #2
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	3303      	adds	r3, #3
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	791a      	ldrb	r2, [r3, #4]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	795a      	ldrb	r2, [r3, #5]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	799a      	ldrb	r2, [r3, #6]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	79da      	ldrb	r2, [r3, #7]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	2b08      	cmp	r3, #8
 8008210:	d939      	bls.n	8008286 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	3308      	adds	r3, #8
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b29a      	uxth	r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3309      	adds	r3, #9
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	b29b      	uxth	r3, r3
 8008226:	4313      	orrs	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	330a      	adds	r3, #10
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	330b      	adds	r3, #11
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	b29a      	uxth	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	330c      	adds	r3, #12
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	b29a      	uxth	r2, r3
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	330d      	adds	r3, #13
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	b29b      	uxth	r3, r3
 800825e:	4313      	orrs	r3, r2
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	7b9a      	ldrb	r2, [r3, #14]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	7bda      	ldrb	r2, [r3, #15]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	7c1a      	ldrb	r2, [r3, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	7c5a      	ldrb	r2, [r3, #17]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	745a      	strb	r2, [r3, #17]
  }
}
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b08a      	sub	sp, #40	; 0x28
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	4613      	mov	r3, r2
 800829e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	785a      	ldrb	r2, [r3, #1]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	3302      	adds	r3, #2
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	3303      	adds	r3, #3
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	4313      	orrs	r3, r2
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	791a      	ldrb	r2, [r3, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	795a      	ldrb	r2, [r3, #5]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	799a      	ldrb	r2, [r3, #6]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	79da      	ldrb	r2, [r3, #7]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	7a1a      	ldrb	r2, [r3, #8]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	2b09      	cmp	r3, #9
 800830c:	d95f      	bls.n	80083ce <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800830e:	2309      	movs	r3, #9
 8008310:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008316:	e051      	b.n	80083bc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008318:	f107 0316 	add.w	r3, r7, #22
 800831c:	4619      	mov	r1, r3
 800831e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008320:	f000 f8e8 	bl	80084f4 <USBH_GetNextDesc>
 8008324:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b04      	cmp	r3, #4
 800832c:	d146      	bne.n	80083bc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800832e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008332:	221a      	movs	r2, #26
 8008334:	fb02 f303 	mul.w	r3, r2, r3
 8008338:	3308      	adds	r3, #8
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	3302      	adds	r3, #2
 8008340:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008344:	69f8      	ldr	r0, [r7, #28]
 8008346:	f000 f846 	bl	80083d6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008350:	2300      	movs	r3, #0
 8008352:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008354:	e022      	b.n	800839c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008356:	f107 0316 	add.w	r3, r7, #22
 800835a:	4619      	mov	r1, r3
 800835c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800835e:	f000 f8c9 	bl	80084f4 <USBH_GetNextDesc>
 8008362:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	2b05      	cmp	r3, #5
 800836a:	d117      	bne.n	800839c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800836c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008370:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008374:	3201      	adds	r2, #1
 8008376:	00d2      	lsls	r2, r2, #3
 8008378:	211a      	movs	r1, #26
 800837a:	fb01 f303 	mul.w	r3, r1, r3
 800837e:	4413      	add	r3, r2
 8008380:	3308      	adds	r3, #8
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800838a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800838c:	69b8      	ldr	r0, [r7, #24]
 800838e:	f000 f851 	bl	8008434 <USBH_ParseEPDesc>
            ep_ix++;
 8008392:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008396:	3301      	adds	r3, #1
 8008398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d204      	bcs.n	80083b2 <USBH_ParseCfgDesc+0x120>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	885a      	ldrh	r2, [r3, #2]
 80083ac:	8afb      	ldrh	r3, [r7, #22]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d8d1      	bhi.n	8008356 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80083b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083b6:	3301      	adds	r3, #1
 80083b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d804      	bhi.n	80083ce <USBH_ParseCfgDesc+0x13c>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	885a      	ldrh	r2, [r3, #2]
 80083c8:	8afb      	ldrh	r3, [r7, #22]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d8a4      	bhi.n	8008318 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80083ce:	bf00      	nop
 80083d0:	3728      	adds	r7, #40	; 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	785a      	ldrb	r2, [r3, #1]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	789a      	ldrb	r2, [r3, #2]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	78da      	ldrb	r2, [r3, #3]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	791a      	ldrb	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	795a      	ldrb	r2, [r3, #5]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	799a      	ldrb	r2, [r3, #6]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	79da      	ldrb	r2, [r3, #7]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	7a1a      	ldrb	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	721a      	strb	r2, [r3, #8]
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	785a      	ldrb	r2, [r3, #1]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	789a      	ldrb	r2, [r3, #2]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	78da      	ldrb	r2, [r3, #3]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	b29a      	uxth	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	3305      	adds	r3, #5
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b29b      	uxth	r3, r3
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	799a      	ldrb	r2, [r3, #6]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	719a      	strb	r2, [r3, #6]
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800848e:	b480      	push	{r7}
 8008490:	b087      	sub	sp, #28
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3301      	adds	r3, #1
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d120      	bne.n	80084e8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	1e9a      	subs	r2, r3, #2
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	4293      	cmp	r3, r2
 80084b0:	bf28      	it	cs
 80084b2:	4613      	movcs	r3, r2
 80084b4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3302      	adds	r3, #2
 80084ba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084bc:	2300      	movs	r3, #0
 80084be:	82fb      	strh	r3, [r7, #22]
 80084c0:	e00b      	b.n	80084da <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084c2:	8afb      	ldrh	r3, [r7, #22]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084d4:	8afb      	ldrh	r3, [r7, #22]
 80084d6:	3302      	adds	r3, #2
 80084d8:	82fb      	strh	r3, [r7, #22]
 80084da:	8afa      	ldrh	r2, [r7, #22]
 80084dc:	8abb      	ldrh	r3, [r7, #20]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d3ef      	bcc.n	80084c2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	701a      	strb	r2, [r3, #0]
  }
}
 80084e8:	bf00      	nop
 80084ea:	371c      	adds	r7, #28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	881a      	ldrh	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	4413      	add	r3, r2
 800850a:	b29a      	uxth	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4413      	add	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800851c:	68fb      	ldr	r3, [r7, #12]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b086      	sub	sp, #24
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4613      	mov	r3, r2
 8008536:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	789b      	ldrb	r3, [r3, #2]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d002      	beq.n	800854a <USBH_CtlReq+0x20>
 8008544:	2b02      	cmp	r3, #2
 8008546:	d00f      	beq.n	8008568 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008548:	e027      	b.n	800859a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	88fa      	ldrh	r2, [r7, #6]
 8008554:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2202      	movs	r2, #2
 8008560:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008562:	2301      	movs	r3, #1
 8008564:	75fb      	strb	r3, [r7, #23]
      break;
 8008566:	e018      	b.n	800859a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f81b 	bl	80085a4 <USBH_HandleControl>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <USBH_CtlReq+0x54>
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	2b03      	cmp	r3, #3
 800857c:	d106      	bne.n	800858c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	761a      	strb	r2, [r3, #24]
      break;
 800858a:	e005      	b.n	8008598 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d102      	bne.n	8008598 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	709a      	strb	r2, [r3, #2]
      break;
 8008598:	bf00      	nop
  }
  return status;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7e1b      	ldrb	r3, [r3, #24]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b0a      	cmp	r3, #10
 80085bc:	f200 8158 	bhi.w	8008870 <USBH_HandleControl+0x2cc>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <USBH_HandleControl+0x24>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	0800860f 	.word	0x0800860f
 80085d0:	08008679 	.word	0x08008679
 80085d4:	0800869f 	.word	0x0800869f
 80085d8:	080086d7 	.word	0x080086d7
 80085dc:	08008703 	.word	0x08008703
 80085e0:	08008755 	.word	0x08008755
 80085e4:	08008777 	.word	0x08008777
 80085e8:	080087b3 	.word	0x080087b3
 80085ec:	080087db 	.word	0x080087db
 80085f0:	08008819 	.word	0x08008819
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f103 0110 	add.w	r1, r3, #16
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	461a      	mov	r2, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f945 	bl	8008890 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e13b      	b.n	8008886 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f002 fedb 	bl	800b3d0 <USBH_LL_GetURBState>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d11e      	bne.n	8008662 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7c1b      	ldrb	r3, [r3, #16]
 8008628:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800862c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	8adb      	ldrh	r3, [r3, #22]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008636:	7b7b      	ldrb	r3, [r7, #13]
 8008638:	2b80      	cmp	r3, #128	; 0x80
 800863a:	d103      	bne.n	8008644 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2203      	movs	r2, #3
 8008640:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008642:	e117      	b.n	8008874 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2205      	movs	r2, #5
 8008648:	761a      	strb	r2, [r3, #24]
      break;
 800864a:	e113      	b.n	8008874 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800864c:	7b7b      	ldrb	r3, [r7, #13]
 800864e:	2b80      	cmp	r3, #128	; 0x80
 8008650:	d103      	bne.n	800865a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2209      	movs	r2, #9
 8008656:	761a      	strb	r2, [r3, #24]
      break;
 8008658:	e10c      	b.n	8008874 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2207      	movs	r2, #7
 800865e:	761a      	strb	r2, [r3, #24]
      break;
 8008660:	e108      	b.n	8008874 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d003      	beq.n	8008670 <USBH_HandleControl+0xcc>
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b02      	cmp	r3, #2
 800866c:	f040 8102 	bne.w	8008874 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	220b      	movs	r2, #11
 8008674:	761a      	strb	r2, [r3, #24]
      break;
 8008676:	e0fd      	b.n	8008874 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800867e:	b29a      	uxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6899      	ldr	r1, [r3, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	899a      	ldrh	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f93c 	bl	800890e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2204      	movs	r2, #4
 800869a:	761a      	strb	r2, [r3, #24]
      break;
 800869c:	e0f3      	b.n	8008886 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	791b      	ldrb	r3, [r3, #4]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f002 fe93 	bl	800b3d0 <USBH_LL_GetURBState>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d102      	bne.n	80086ba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2209      	movs	r2, #9
 80086b8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b05      	cmp	r3, #5
 80086be:	d102      	bne.n	80086c6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086c0:	2303      	movs	r3, #3
 80086c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086c4:	e0d8      	b.n	8008878 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	f040 80d5 	bne.w	8008878 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220b      	movs	r2, #11
 80086d2:	761a      	strb	r2, [r3, #24]
      break;
 80086d4:	e0d0      	b.n	8008878 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6899      	ldr	r1, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	899a      	ldrh	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	7958      	ldrb	r0, [r3, #5]
 80086e2:	2301      	movs	r3, #1
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4603      	mov	r3, r0
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f8eb 	bl	80088c4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2206      	movs	r2, #6
 80086fe:	761a      	strb	r2, [r3, #24]
      break;
 8008700:	e0c1      	b.n	8008886 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f002 fe61 	bl	800b3d0 <USBH_LL_GetURBState>
 800870e:	4603      	mov	r3, r0
 8008710:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d103      	bne.n	8008720 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2207      	movs	r2, #7
 800871c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800871e:	e0ad      	b.n	800887c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	2b05      	cmp	r3, #5
 8008724:	d105      	bne.n	8008732 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	220c      	movs	r2, #12
 800872a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800872c:	2303      	movs	r3, #3
 800872e:	73fb      	strb	r3, [r7, #15]
      break;
 8008730:	e0a4      	b.n	800887c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d103      	bne.n	8008740 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2205      	movs	r2, #5
 800873c:	761a      	strb	r2, [r3, #24]
      break;
 800873e:	e09d      	b.n	800887c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b04      	cmp	r3, #4
 8008744:	f040 809a 	bne.w	800887c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	220b      	movs	r2, #11
 800874c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800874e:	2302      	movs	r3, #2
 8008750:	73fb      	strb	r3, [r7, #15]
      break;
 8008752:	e093      	b.n	800887c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	2100      	movs	r1, #0
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8d6 	bl	800890e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2208      	movs	r2, #8
 8008772:	761a      	strb	r2, [r3, #24]

      break;
 8008774:	e087      	b.n	8008886 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	791b      	ldrb	r3, [r3, #4]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f002 fe27 	bl	800b3d0 <USBH_LL_GetURBState>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d105      	bne.n	8008798 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	220d      	movs	r2, #13
 8008790:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008796:	e073      	b.n	8008880 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b04      	cmp	r3, #4
 800879c:	d103      	bne.n	80087a6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	220b      	movs	r2, #11
 80087a2:	761a      	strb	r2, [r3, #24]
      break;
 80087a4:	e06c      	b.n	8008880 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d169      	bne.n	8008880 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80087ac:	2303      	movs	r3, #3
 80087ae:	73fb      	strb	r3, [r7, #15]
      break;
 80087b0:	e066      	b.n	8008880 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	795a      	ldrb	r2, [r3, #5]
 80087b6:	2301      	movs	r3, #1
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	4613      	mov	r3, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f87f 	bl	80088c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	220a      	movs	r2, #10
 80087d6:	761a      	strb	r2, [r3, #24]
      break;
 80087d8:	e055      	b.n	8008886 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	795b      	ldrb	r3, [r3, #5]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f002 fdf5 	bl	800b3d0 <USBH_LL_GetURBState>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d105      	bne.n	80087fc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	220d      	movs	r2, #13
 80087f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087fa:	e043      	b.n	8008884 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d103      	bne.n	800880a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2209      	movs	r2, #9
 8008806:	761a      	strb	r2, [r3, #24]
      break;
 8008808:	e03c      	b.n	8008884 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d139      	bne.n	8008884 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	220b      	movs	r2, #11
 8008814:	761a      	strb	r2, [r3, #24]
      break;
 8008816:	e035      	b.n	8008884 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7e5b      	ldrb	r3, [r3, #25]
 800881c:	3301      	adds	r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	765a      	strb	r2, [r3, #25]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7e5b      	ldrb	r3, [r3, #25]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d806      	bhi.n	800883a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008838:	e025      	b.n	8008886 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008840:	2106      	movs	r1, #6
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	795b      	ldrb	r3, [r3, #5]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f90c 	bl	8008a70 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	791b      	ldrb	r3, [r3, #4]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f906 	bl	8008a70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800886a:	2302      	movs	r3, #2
 800886c:	73fb      	strb	r3, [r7, #15]
      break;
 800886e:	e00a      	b.n	8008886 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008870:	bf00      	nop
 8008872:	e008      	b.n	8008886 <USBH_HandleControl+0x2e2>
      break;
 8008874:	bf00      	nop
 8008876:	e006      	b.n	8008886 <USBH_HandleControl+0x2e2>
      break;
 8008878:	bf00      	nop
 800887a:	e004      	b.n	8008886 <USBH_HandleControl+0x2e2>
      break;
 800887c:	bf00      	nop
 800887e:	e002      	b.n	8008886 <USBH_HandleControl+0x2e2>
      break;
 8008880:	bf00      	nop
 8008882:	e000      	b.n	8008886 <USBH_HandleControl+0x2e2>
      break;
 8008884:	bf00      	nop
  }

  return status;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af04      	add	r7, sp, #16
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800889e:	79f9      	ldrb	r1, [r7, #7]
 80088a0:	2300      	movs	r3, #0
 80088a2:	9303      	str	r3, [sp, #12]
 80088a4:	2308      	movs	r3, #8
 80088a6:	9302      	str	r3, [sp, #8]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	2300      	movs	r3, #0
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	2200      	movs	r2, #0
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f002 fd5a 	bl	800b36e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af04      	add	r7, sp, #16
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4611      	mov	r1, r2
 80088d0:	461a      	mov	r2, r3
 80088d2:	460b      	mov	r3, r1
 80088d4:	80fb      	strh	r3, [r7, #6]
 80088d6:	4613      	mov	r3, r2
 80088d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088e8:	7979      	ldrb	r1, [r7, #5]
 80088ea:	7e3b      	ldrb	r3, [r7, #24]
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	2301      	movs	r3, #1
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	2300      	movs	r3, #0
 80088fc:	2200      	movs	r2, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f002 fd35 	bl	800b36e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b088      	sub	sp, #32
 8008912:	af04      	add	r7, sp, #16
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	4611      	mov	r1, r2
 800891a:	461a      	mov	r2, r3
 800891c:	460b      	mov	r3, r1
 800891e:	80fb      	strh	r3, [r7, #6]
 8008920:	4613      	mov	r3, r2
 8008922:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008924:	7979      	ldrb	r1, [r7, #5]
 8008926:	2300      	movs	r3, #0
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	2301      	movs	r3, #1
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	2201      	movs	r2, #1
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f002 fd17 	bl	800b36e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008940:	2300      	movs	r3, #0

}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b088      	sub	sp, #32
 800894e:	af04      	add	r7, sp, #16
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	4611      	mov	r1, r2
 8008956:	461a      	mov	r2, r3
 8008958:	460b      	mov	r3, r1
 800895a:	80fb      	strh	r3, [r7, #6]
 800895c:	4613      	mov	r3, r2
 800895e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800896e:	7979      	ldrb	r1, [r7, #5]
 8008970:	7e3b      	ldrb	r3, [r7, #24]
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	88fb      	ldrh	r3, [r7, #6]
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	2301      	movs	r3, #1
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	2302      	movs	r3, #2
 8008982:	2200      	movs	r2, #0
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f002 fcf2 	bl	800b36e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af04      	add	r7, sp, #16
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4611      	mov	r1, r2
 80089a0:	461a      	mov	r2, r3
 80089a2:	460b      	mov	r3, r1
 80089a4:	80fb      	strh	r3, [r7, #6]
 80089a6:	4613      	mov	r3, r2
 80089a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089aa:	7979      	ldrb	r1, [r7, #5]
 80089ac:	2300      	movs	r3, #0
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2301      	movs	r3, #1
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2302      	movs	r3, #2
 80089be:	2201      	movs	r2, #1
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f002 fcd4 	bl	800b36e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af04      	add	r7, sp, #16
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	4603      	mov	r3, r0
 80089e0:	70fb      	strb	r3, [r7, #3]
 80089e2:	460b      	mov	r3, r1
 80089e4:	70bb      	strb	r3, [r7, #2]
 80089e6:	4613      	mov	r3, r2
 80089e8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089ea:	7878      	ldrb	r0, [r7, #1]
 80089ec:	78ba      	ldrb	r2, [r7, #2]
 80089ee:	78f9      	ldrb	r1, [r7, #3]
 80089f0:	8b3b      	ldrh	r3, [r7, #24]
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	7d3b      	ldrb	r3, [r7, #20]
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	7c3b      	ldrb	r3, [r7, #16]
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	4603      	mov	r3, r0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f002 fc67 	bl	800b2d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f002 fc86 	bl	800b330 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f836 	bl	8008aac <USBH_GetFreePipe>
 8008a40:	4603      	mov	r3, r0
 8008a42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a44:	89fb      	ldrh	r3, [r7, #14]
 8008a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00a      	beq.n	8008a64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	33e0      	adds	r3, #224	; 0xe0
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a64:	89fb      	ldrh	r3, [r7, #14]
 8008a66:	b2db      	uxtb	r3, r3
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	2b0a      	cmp	r3, #10
 8008a80:	d80d      	bhi.n	8008a9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	33e0      	adds	r3, #224	; 0xe0
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	33e0      	adds	r3, #224	; 0xe0
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	440b      	add	r3, r1
 8008a9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	e00f      	b.n	8008ade <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	33e0      	adds	r3, #224	; 0xe0
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	e007      	b.n	8008ae8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	3301      	adds	r3, #1
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b0a      	cmp	r3, #10
 8008ae2:	d9ec      	bls.n	8008abe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <disk_status+0x30>)
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	79fa      	ldrb	r2, [r7, #7]
 8008b0c:	4905      	ldr	r1, [pc, #20]	; (8008b24 <disk_status+0x30>)
 8008b0e:	440a      	add	r2, r1
 8008b10:	7a12      	ldrb	r2, [r2, #8]
 8008b12:	4610      	mov	r0, r2
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200100e0 	.word	0x200100e0

08008b28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <disk_initialize+0x48>)
 8008b3a:	5cd3      	ldrb	r3, [r2, r3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d111      	bne.n	8008b64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4a0b      	ldr	r2, [pc, #44]	; (8008b70 <disk_initialize+0x48>)
 8008b44:	2101      	movs	r1, #1
 8008b46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <disk_initialize+0x48>)
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	79fa      	ldrb	r2, [r7, #7]
 8008b56:	4906      	ldr	r1, [pc, #24]	; (8008b70 <disk_initialize+0x48>)
 8008b58:	440a      	add	r2, r1
 8008b5a:	7a12      	ldrb	r2, [r2, #8]
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200100e0 	.word	0x200100e0

08008b74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <disk_read+0x3c>)
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	689c      	ldr	r4, [r3, #8]
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4a07      	ldr	r2, [pc, #28]	; (8008bb0 <disk_read+0x3c>)
 8008b94:	4413      	add	r3, r2
 8008b96:	7a18      	ldrb	r0, [r3, #8]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	47a0      	blx	r4
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd90      	pop	{r4, r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	200100e0 	.word	0x200100e0

08008bb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <disk_write+0x3c>)
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68dc      	ldr	r4, [r3, #12]
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4a07      	ldr	r2, [pc, #28]	; (8008bf0 <disk_write+0x3c>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	7a18      	ldrb	r0, [r3, #8]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	47a0      	blx	r4
 8008be0:	4603      	mov	r3, r0
 8008be2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200100e0 	.word	0x200100e0

08008bf4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	603a      	str	r2, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
 8008c00:	460b      	mov	r3, r1
 8008c02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <disk_ioctl+0x38>)
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	79fa      	ldrb	r2, [r7, #7]
 8008c12:	4906      	ldr	r1, [pc, #24]	; (8008c2c <disk_ioctl+0x38>)
 8008c14:	440a      	add	r2, r1
 8008c16:	7a10      	ldrb	r0, [r2, #8]
 8008c18:	79b9      	ldrb	r1, [r7, #6]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	4798      	blx	r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
  return res;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	200100e0 	.word	0x200100e0

08008c30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	b21a      	sxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b21b      	sxth	r3, r3
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	b21b      	sxth	r3, r3
 8008c50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c52:	89fb      	ldrh	r3, [r7, #14]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3303      	adds	r3, #3
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	3202      	adds	r2, #2
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	3201      	adds	r2, #1
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c98:	68fb      	ldr	r3, [r7, #12]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	887a      	ldrh	r2, [r7, #2]
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	887b      	ldrh	r3, [r7, #2]
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	887a      	ldrh	r2, [r7, #2]
 8008ccc:	b2d2      	uxtb	r2, r2
 8008cce:	701a      	strb	r2, [r3, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	0a1b      	lsrs	r3, r3, #8
 8008cf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	b2d2      	uxtb	r2, r2
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	b2d2      	uxtb	r2, r2
 8008d26:	701a      	strb	r2, [r3, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00d      	beq.n	8008d6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	1c53      	adds	r3, r2, #1
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	1c59      	adds	r1, r3, #1
 8008d58:	6179      	str	r1, [r7, #20]
 8008d5a:	7812      	ldrb	r2, [r2, #0]
 8008d5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	607b      	str	r3, [r7, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1f1      	bne.n	8008d4e <mem_cpy+0x1a>
	}
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d76:	b480      	push	{r7}
 8008d78:	b087      	sub	sp, #28
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	617a      	str	r2, [r7, #20]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	607b      	str	r3, [r7, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f3      	bne.n	8008d86 <mem_set+0x10>
}
 8008d9e:	bf00      	nop
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008daa:	b480      	push	{r7}
 8008dac:	b089      	sub	sp, #36	; 0x24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	61fa      	str	r2, [r7, #28]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	61ba      	str	r2, [r7, #24]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	1acb      	subs	r3, r1, r3
 8008dd6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	607b      	str	r3, [r7, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <mem_cmp+0x40>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0eb      	beq.n	8008dc2 <mem_cmp+0x18>

	return r;
 8008dea:	697b      	ldr	r3, [r7, #20]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3724      	adds	r7, #36	; 0x24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e02:	e002      	b.n	8008e0a <chk_chr+0x12>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3301      	adds	r3, #1
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <chk_chr+0x26>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d1f2      	bne.n	8008e04 <chk_chr+0xc>
	return *str;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	781b      	ldrb	r3, [r3, #0]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e029      	b.n	8008e98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008e44:	4a27      	ldr	r2, [pc, #156]	; (8008ee4 <chk_lock+0xb4>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	4413      	add	r3, r2
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01d      	beq.n	8008e8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e52:	4a24      	ldr	r2, [pc, #144]	; (8008ee4 <chk_lock+0xb4>)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	4413      	add	r3, r2
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d116      	bne.n	8008e92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e64:	4a1f      	ldr	r2, [pc, #124]	; (8008ee4 <chk_lock+0xb4>)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d10c      	bne.n	8008e92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e78:	4a1a      	ldr	r2, [pc, #104]	; (8008ee4 <chk_lock+0xb4>)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	4413      	add	r3, r2
 8008e80:	3308      	adds	r3, #8
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d102      	bne.n	8008e92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e8c:	e007      	b.n	8008e9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d9d2      	bls.n	8008e44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d109      	bne.n	8008eb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d102      	bne.n	8008eb0 <chk_lock+0x80>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d101      	bne.n	8008eb4 <chk_lock+0x84>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e010      	b.n	8008ed6 <chk_lock+0xa6>
 8008eb4:	2312      	movs	r3, #18
 8008eb6:	e00e      	b.n	8008ed6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d108      	bne.n	8008ed0 <chk_lock+0xa0>
 8008ebe:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <chk_lock+0xb4>)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	4413      	add	r3, r2
 8008ec6:	330c      	adds	r3, #12
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ece:	d101      	bne.n	8008ed4 <chk_lock+0xa4>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	e000      	b.n	8008ed6 <chk_lock+0xa6>
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	200100c0 	.word	0x200100c0

08008ee8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	e002      	b.n	8008efa <enq_lock+0x12>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d806      	bhi.n	8008f0e <enq_lock+0x26>
 8008f00:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <enq_lock+0x40>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	4413      	add	r3, r2
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f2      	bne.n	8008ef4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	bf14      	ite	ne
 8008f14:	2301      	movne	r3, #1
 8008f16:	2300      	moveq	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	200100c0 	.word	0x200100c0

08008f2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	e01f      	b.n	8008f7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f3c:	4a41      	ldr	r2, [pc, #260]	; (8009044 <inc_lock+0x118>)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	4413      	add	r3, r2
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d113      	bne.n	8008f76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f4e:	4a3d      	ldr	r2, [pc, #244]	; (8009044 <inc_lock+0x118>)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	011b      	lsls	r3, r3, #4
 8008f54:	4413      	add	r3, r2
 8008f56:	3304      	adds	r3, #4
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d109      	bne.n	8008f76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f62:	4a38      	ldr	r2, [pc, #224]	; (8009044 <inc_lock+0x118>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	4413      	add	r3, r2
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d006      	beq.n	8008f84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d9dc      	bls.n	8008f3c <inc_lock+0x10>
 8008f82:	e000      	b.n	8008f86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008f84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d132      	bne.n	8008ff2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e002      	b.n	8008f98 <inc_lock+0x6c>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d806      	bhi.n	8008fac <inc_lock+0x80>
 8008f9e:	4a29      	ldr	r2, [pc, #164]	; (8009044 <inc_lock+0x118>)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	4413      	add	r3, r2
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f2      	bne.n	8008f92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d101      	bne.n	8008fb6 <inc_lock+0x8a>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e040      	b.n	8009038 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4922      	ldr	r1, [pc, #136]	; (8009044 <inc_lock+0x118>)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	440b      	add	r3, r1
 8008fc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	491e      	ldr	r1, [pc, #120]	; (8009044 <inc_lock+0x118>)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	440b      	add	r3, r1
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	695a      	ldr	r2, [r3, #20]
 8008fd8:	491a      	ldr	r1, [pc, #104]	; (8009044 <inc_lock+0x118>)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	440b      	add	r3, r1
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008fe4:	4a17      	ldr	r2, [pc, #92]	; (8009044 <inc_lock+0x118>)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	4413      	add	r3, r2
 8008fec:	330c      	adds	r3, #12
 8008fee:	2200      	movs	r2, #0
 8008ff0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d009      	beq.n	800900c <inc_lock+0xe0>
 8008ff8:	4a12      	ldr	r2, [pc, #72]	; (8009044 <inc_lock+0x118>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	4413      	add	r3, r2
 8009000:	330c      	adds	r3, #12
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <inc_lock+0xe0>
 8009008:	2300      	movs	r3, #0
 800900a:	e015      	b.n	8009038 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d108      	bne.n	8009024 <inc_lock+0xf8>
 8009012:	4a0c      	ldr	r2, [pc, #48]	; (8009044 <inc_lock+0x118>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	4413      	add	r3, r2
 800901a:	330c      	adds	r3, #12
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	b29a      	uxth	r2, r3
 8009022:	e001      	b.n	8009028 <inc_lock+0xfc>
 8009024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009028:	4906      	ldr	r1, [pc, #24]	; (8009044 <inc_lock+0x118>)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	440b      	add	r3, r1
 8009030:	330c      	adds	r3, #12
 8009032:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3301      	adds	r3, #1
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	200100c0 	.word	0x200100c0

08009048 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3b01      	subs	r3, #1
 8009054:	607b      	str	r3, [r7, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d825      	bhi.n	80090a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800905c:	4a17      	ldr	r2, [pc, #92]	; (80090bc <dec_lock+0x74>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	4413      	add	r3, r2
 8009064:	330c      	adds	r3, #12
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800906a:	89fb      	ldrh	r3, [r7, #14]
 800906c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009070:	d101      	bne.n	8009076 <dec_lock+0x2e>
 8009072:	2300      	movs	r3, #0
 8009074:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009076:	89fb      	ldrh	r3, [r7, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <dec_lock+0x3a>
 800907c:	89fb      	ldrh	r3, [r7, #14]
 800907e:	3b01      	subs	r3, #1
 8009080:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009082:	4a0e      	ldr	r2, [pc, #56]	; (80090bc <dec_lock+0x74>)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	4413      	add	r3, r2
 800908a:	330c      	adds	r3, #12
 800908c:	89fa      	ldrh	r2, [r7, #14]
 800908e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <dec_lock+0x5a>
 8009096:	4a09      	ldr	r2, [pc, #36]	; (80090bc <dec_lock+0x74>)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	4413      	add	r3, r2
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	737b      	strb	r3, [r7, #13]
 80090a6:	e001      	b.n	80090ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090a8:	2302      	movs	r3, #2
 80090aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	200100c0 	.word	0x200100c0

080090c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	e010      	b.n	80090f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80090ce:	4a0d      	ldr	r2, [pc, #52]	; (8009104 <clear_lock+0x44>)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	4413      	add	r3, r2
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d105      	bne.n	80090ea <clear_lock+0x2a>
 80090de:	4a09      	ldr	r2, [pc, #36]	; (8009104 <clear_lock+0x44>)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d9eb      	bls.n	80090ce <clear_lock+0xe>
	}
}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	200100c0 	.word	0x200100c0

08009108 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	78db      	ldrb	r3, [r3, #3]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d034      	beq.n	8009186 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7858      	ldrb	r0, [r3, #1]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800912c:	2301      	movs	r3, #1
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	f7ff fd40 	bl	8008bb4 <disk_write>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <sync_window+0x38>
			res = FR_DISK_ERR;
 800913a:	2301      	movs	r3, #1
 800913c:	73fb      	strb	r3, [r7, #15]
 800913e:	e022      	b.n	8009186 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	1ad2      	subs	r2, r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	429a      	cmp	r2, r3
 8009154:	d217      	bcs.n	8009186 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	789b      	ldrb	r3, [r3, #2]
 800915a:	613b      	str	r3, [r7, #16]
 800915c:	e010      	b.n	8009180 <sync_window+0x78>
					wsect += fs->fsize;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4413      	add	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7858      	ldrb	r0, [r3, #1]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009172:	2301      	movs	r3, #1
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	f7ff fd1d 	bl	8008bb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d8eb      	bhi.n	800915e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009186:	7bfb      	ldrb	r3, [r7, #15]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d01b      	beq.n	80091e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ffad 	bl	8009108 <sync_window>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d113      	bne.n	80091e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7858      	ldrb	r0, [r3, #1]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091c2:	2301      	movs	r3, #1
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	f7ff fcd5 	bl	8008b74 <disk_read>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80091d0:	f04f 33ff 	mov.w	r3, #4294967295
 80091d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff87 	bl	8009108 <sync_window>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d158      	bne.n	80092b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d148      	bne.n	800929e <sync_fs+0xb2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d144      	bne.n	800929e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3330      	adds	r3, #48	; 0x30
 8009218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff fda9 	bl	8008d76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3330      	adds	r3, #48	; 0x30
 8009228:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800922c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff fd38 	bl	8008ca6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3330      	adds	r3, #48	; 0x30
 800923a:	4921      	ldr	r1, [pc, #132]	; (80092c0 <sync_fs+0xd4>)
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fd4d 	bl	8008cdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	3330      	adds	r3, #48	; 0x30
 8009246:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800924a:	491e      	ldr	r1, [pc, #120]	; (80092c4 <sync_fs+0xd8>)
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fd45 	bl	8008cdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3330      	adds	r3, #48	; 0x30
 8009256:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f7ff fd3b 	bl	8008cdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3330      	adds	r3, #48	; 0x30
 800926a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7ff fd31 	bl	8008cdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7858      	ldrb	r0, [r3, #1]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	2301      	movs	r3, #1
 8009294:	f7ff fc8e 	bl	8008bb4 <disk_write>
			fs->fsi_flag = 0;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2200      	movs	r2, #0
 80092a4:	2100      	movs	r1, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fca4 	bl	8008bf4 <disk_ioctl>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <sync_fs+0xca>
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	41615252 	.word	0x41615252
 80092c4:	61417272 	.word	0x61417272

080092c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	3b02      	subs	r3, #2
 80092d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	3b02      	subs	r3, #2
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d301      	bcc.n	80092e8 <clust2sect+0x20>
 80092e4:	2300      	movs	r3, #0
 80092e6:	e008      	b.n	80092fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	895b      	ldrh	r3, [r3, #10]
 80092ec:	461a      	mov	r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	fb03 f202 	mul.w	r2, r3, r2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	4413      	add	r3, r2
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b086      	sub	sp, #24
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d904      	bls.n	8009326 <get_fat+0x20>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	429a      	cmp	r2, r3
 8009324:	d302      	bcc.n	800932c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009326:	2301      	movs	r3, #1
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e08c      	b.n	8009446 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d045      	beq.n	80093c6 <get_fat+0xc0>
 800933a:	2b03      	cmp	r3, #3
 800933c:	d05d      	beq.n	80093fa <get_fat+0xf4>
 800933e:	2b01      	cmp	r3, #1
 8009340:	d177      	bne.n	8009432 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4413      	add	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6a1a      	ldr	r2, [r3, #32]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	0a5b      	lsrs	r3, r3, #9
 8009358:	4413      	add	r3, r2
 800935a:	4619      	mov	r1, r3
 800935c:	6938      	ldr	r0, [r7, #16]
 800935e:	f7ff ff17 	bl	8009190 <move_window>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d167      	bne.n	8009438 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	60fa      	str	r2, [r7, #12]
 800936e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4413      	add	r3, r2
 8009376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800937a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6a1a      	ldr	r2, [r3, #32]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	0a5b      	lsrs	r3, r3, #9
 8009384:	4413      	add	r3, r2
 8009386:	4619      	mov	r1, r3
 8009388:	6938      	ldr	r0, [r7, #16]
 800938a:	f7ff ff01 	bl	8009190 <move_window>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d153      	bne.n	800943c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	4413      	add	r3, r2
 800939e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	461a      	mov	r2, r3
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <get_fat+0xb6>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	091b      	lsrs	r3, r3, #4
 80093ba:	e002      	b.n	80093c2 <get_fat+0xbc>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093c2:	617b      	str	r3, [r7, #20]
			break;
 80093c4:	e03f      	b.n	8009446 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6a1a      	ldr	r2, [r3, #32]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	0a1b      	lsrs	r3, r3, #8
 80093ce:	4413      	add	r3, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	6938      	ldr	r0, [r7, #16]
 80093d4:	f7ff fedc 	bl	8009190 <move_window>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d130      	bne.n	8009440 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80093ec:	4413      	add	r3, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fc1e 	bl	8008c30 <ld_word>
 80093f4:	4603      	mov	r3, r0
 80093f6:	617b      	str	r3, [r7, #20]
			break;
 80093f8:	e025      	b.n	8009446 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	6a1a      	ldr	r2, [r3, #32]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	09db      	lsrs	r3, r3, #7
 8009402:	4413      	add	r3, r2
 8009404:	4619      	mov	r1, r3
 8009406:	6938      	ldr	r0, [r7, #16]
 8009408:	f7ff fec2 	bl	8009190 <move_window>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d118      	bne.n	8009444 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009420:	4413      	add	r3, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff fc1c 	bl	8008c60 <ld_dword>
 8009428:	4603      	mov	r3, r0
 800942a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800942e:	617b      	str	r3, [r7, #20]
			break;
 8009430:	e009      	b.n	8009446 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009432:	2301      	movs	r3, #1
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	e006      	b.n	8009446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009438:	bf00      	nop
 800943a:	e004      	b.n	8009446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800943c:	bf00      	nop
 800943e:	e002      	b.n	8009446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009440:	bf00      	nop
 8009442:	e000      	b.n	8009446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009444:	bf00      	nop
		}
	}

	return val;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b089      	sub	sp, #36	; 0x24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800945c:	2302      	movs	r3, #2
 800945e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b01      	cmp	r3, #1
 8009464:	f240 80d6 	bls.w	8009614 <put_fat+0x1c4>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	429a      	cmp	r2, r3
 8009470:	f080 80d0 	bcs.w	8009614 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d073      	beq.n	8009564 <put_fat+0x114>
 800947c:	2b03      	cmp	r3, #3
 800947e:	f000 8091 	beq.w	80095a4 <put_fat+0x154>
 8009482:	2b01      	cmp	r3, #1
 8009484:	f040 80c6 	bne.w	8009614 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	61bb      	str	r3, [r7, #24]
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	4413      	add	r3, r2
 8009494:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a1a      	ldr	r2, [r3, #32]
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	0a5b      	lsrs	r3, r3, #9
 800949e:	4413      	add	r3, r2
 80094a0:	4619      	mov	r1, r3
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff fe74 	bl	8009190 <move_window>
 80094a8:	4603      	mov	r3, r0
 80094aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094ac:	7ffb      	ldrb	r3, [r7, #31]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 80a9 	bne.w	8009606 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	1c59      	adds	r1, r3, #1
 80094be:	61b9      	str	r1, [r7, #24]
 80094c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c4:	4413      	add	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00d      	beq.n	80094ee <put_fat+0x9e>
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	f003 030f 	and.w	r3, r3, #15
 80094dc:	b25a      	sxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	b25b      	sxtb	r3, r3
 80094e6:	4313      	orrs	r3, r2
 80094e8:	b25b      	sxtb	r3, r3
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	e001      	b.n	80094f2 <put_fat+0xa2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2201      	movs	r2, #1
 80094fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a1a      	ldr	r2, [r3, #32]
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	0a5b      	lsrs	r3, r3, #9
 8009504:	4413      	add	r3, r2
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff fe41 	bl	8009190 <move_window>
 800950e:	4603      	mov	r3, r0
 8009510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009512:	7ffb      	ldrb	r3, [r7, #31]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d178      	bne.n	800960a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009524:	4413      	add	r3, r2
 8009526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <put_fat+0xea>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	091b      	lsrs	r3, r3, #4
 8009536:	b2db      	uxtb	r3, r3
 8009538:	e00e      	b.n	8009558 <put_fat+0x108>
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	b25b      	sxtb	r3, r3
 8009540:	f023 030f 	bic.w	r3, r3, #15
 8009544:	b25a      	sxtb	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	b25b      	sxtb	r3, r3
 800954c:	f003 030f 	and.w	r3, r3, #15
 8009550:	b25b      	sxtb	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b25b      	sxtb	r3, r3
 8009556:	b2db      	uxtb	r3, r3
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	70da      	strb	r2, [r3, #3]
			break;
 8009562:	e057      	b.n	8009614 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a1a      	ldr	r2, [r3, #32]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	4413      	add	r3, r2
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fe0d 	bl	8009190 <move_window>
 8009576:	4603      	mov	r3, r0
 8009578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800957a:	7ffb      	ldrb	r3, [r7, #31]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d146      	bne.n	800960e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800958e:	4413      	add	r3, r2
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	b292      	uxth	r2, r2
 8009594:	4611      	mov	r1, r2
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fb85 	bl	8008ca6 <st_word>
			fs->wflag = 1;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2201      	movs	r2, #1
 80095a0:	70da      	strb	r2, [r3, #3]
			break;
 80095a2:	e037      	b.n	8009614 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1a      	ldr	r2, [r3, #32]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	09db      	lsrs	r3, r3, #7
 80095ac:	4413      	add	r3, r2
 80095ae:	4619      	mov	r1, r3
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff fded 	bl	8009190 <move_window>
 80095b6:	4603      	mov	r3, r0
 80095b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095ba:	7ffb      	ldrb	r3, [r7, #31]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d128      	bne.n	8009612 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80095d4:	4413      	add	r3, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fb42 	bl	8008c60 <ld_dword>
 80095dc:	4603      	mov	r3, r0
 80095de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095e2:	4323      	orrs	r3, r4
 80095e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80095f4:	4413      	add	r3, r2
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fb6f 	bl	8008cdc <st_dword>
			fs->wflag = 1;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	70da      	strb	r2, [r3, #3]
			break;
 8009604:	e006      	b.n	8009614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009606:	bf00      	nop
 8009608:	e004      	b.n	8009614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800960a:	bf00      	nop
 800960c:	e002      	b.n	8009614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800960e:	bf00      	nop
 8009610:	e000      	b.n	8009614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009612:	bf00      	nop
		}
	}
	return res;
 8009614:	7ffb      	ldrb	r3, [r7, #31]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3724      	adds	r7, #36	; 0x24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd90      	pop	{r4, r7, pc}

0800961e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b088      	sub	sp, #32
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d904      	bls.n	8009644 <remove_chain+0x26>
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	d301      	bcc.n	8009648 <remove_chain+0x2a>
 8009644:	2302      	movs	r3, #2
 8009646:	e04b      	b.n	80096e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00c      	beq.n	8009668 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	69b8      	ldr	r0, [r7, #24]
 8009656:	f7ff fefb 	bl	8009450 <put_fat>
 800965a:	4603      	mov	r3, r0
 800965c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800965e:	7ffb      	ldrb	r3, [r7, #31]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <remove_chain+0x4a>
 8009664:	7ffb      	ldrb	r3, [r7, #31]
 8009666:	e03b      	b.n	80096e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009668:	68b9      	ldr	r1, [r7, #8]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff fe4b 	bl	8009306 <get_fat>
 8009670:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d031      	beq.n	80096dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <remove_chain+0x64>
 800967e:	2302      	movs	r3, #2
 8009680:	e02e      	b.n	80096e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d101      	bne.n	800968e <remove_chain+0x70>
 800968a:	2301      	movs	r3, #1
 800968c:	e028      	b.n	80096e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800968e:	2200      	movs	r2, #0
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	69b8      	ldr	r0, [r7, #24]
 8009694:	f7ff fedc 	bl	8009450 <put_fat>
 8009698:	4603      	mov	r3, r0
 800969a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800969c:	7ffb      	ldrb	r3, [r7, #31]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <remove_chain+0x88>
 80096a2:	7ffb      	ldrb	r3, [r7, #31]
 80096a4:	e01c      	b.n	80096e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	3b02      	subs	r3, #2
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d20b      	bcs.n	80096cc <remove_chain+0xae>
			fs->free_clst++;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	791b      	ldrb	r3, [r3, #4]
 80096c2:	f043 0301 	orr.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3c6      	bcc.n	8009668 <remove_chain+0x4a>
 80096da:	e000      	b.n	80096de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80096dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10d      	bne.n	800971a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <create_chain+0x2c>
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	429a      	cmp	r2, r3
 8009712:	d31b      	bcc.n	800974c <create_chain+0x64>
 8009714:	2301      	movs	r3, #1
 8009716:	61bb      	str	r3, [r7, #24]
 8009718:	e018      	b.n	800974c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fdf2 	bl	8009306 <get_fat>
 8009722:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d801      	bhi.n	800972e <create_chain+0x46>
 800972a:	2301      	movs	r3, #1
 800972c:	e070      	b.n	8009810 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d101      	bne.n	800973a <create_chain+0x52>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	e06a      	b.n	8009810 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	429a      	cmp	r2, r3
 8009742:	d201      	bcs.n	8009748 <create_chain+0x60>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	e063      	b.n	8009810 <create_chain+0x128>
		scl = clst;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	3301      	adds	r3, #1
 8009754:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	429a      	cmp	r2, r3
 800975e:	d307      	bcc.n	8009770 <create_chain+0x88>
				ncl = 2;
 8009760:	2302      	movs	r3, #2
 8009762:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	429a      	cmp	r2, r3
 800976a:	d901      	bls.n	8009770 <create_chain+0x88>
 800976c:	2300      	movs	r3, #0
 800976e:	e04f      	b.n	8009810 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009770:	69f9      	ldr	r1, [r7, #28]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff fdc7 	bl	8009306 <get_fat>
 8009778:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00e      	beq.n	800979e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d003      	beq.n	800978e <create_chain+0xa6>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978c:	d101      	bne.n	8009792 <create_chain+0xaa>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	e03e      	b.n	8009810 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	429a      	cmp	r2, r3
 8009798:	d1da      	bne.n	8009750 <create_chain+0x68>
 800979a:	2300      	movs	r3, #0
 800979c:	e038      	b.n	8009810 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800979e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295
 80097a4:	69f9      	ldr	r1, [r7, #28]
 80097a6:	6938      	ldr	r0, [r7, #16]
 80097a8:	f7ff fe52 	bl	8009450 <put_fat>
 80097ac:	4603      	mov	r3, r0
 80097ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <create_chain+0xe2>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d006      	beq.n	80097ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80097bc:	69fa      	ldr	r2, [r7, #28]
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6938      	ldr	r0, [r7, #16]
 80097c2:	f7ff fe45 	bl	8009450 <put_fat>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d116      	bne.n	80097fe <create_chain+0x116>
		fs->last_clst = ncl;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	69fa      	ldr	r2, [r7, #28]
 80097d4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	3b02      	subs	r3, #2
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d804      	bhi.n	80097ee <create_chain+0x106>
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	1e5a      	subs	r2, r3, #1
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	791b      	ldrb	r3, [r3, #4]
 80097f2:	f043 0301 	orr.w	r3, r3, #1
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	711a      	strb	r2, [r3, #4]
 80097fc:	e007      	b.n	800980e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d102      	bne.n	800980a <create_chain+0x122>
 8009804:	f04f 33ff 	mov.w	r3, #4294967295
 8009808:	e000      	b.n	800980c <create_chain+0x124>
 800980a:	2301      	movs	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800980e:	69fb      	ldr	r3, [r7, #28]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	3304      	adds	r3, #4
 800982e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	0a5b      	lsrs	r3, r3, #9
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	8952      	ldrh	r2, [r2, #10]
 8009838:	fbb3 f3f2 	udiv	r3, r3, r2
 800983c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1d1a      	adds	r2, r3, #4
 8009842:	613a      	str	r2, [r7, #16]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <clmt_clust+0x3a>
 800984e:	2300      	movs	r3, #0
 8009850:	e010      	b.n	8009874 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	d307      	bcc.n	800986a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	3304      	adds	r3, #4
 8009866:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009868:	e7e9      	b.n	800983e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800986a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
}
 8009874:	4618      	mov	r0, r3
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009896:	d204      	bcs.n	80098a2 <dir_sdi+0x22>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80098a2:	2302      	movs	r3, #2
 80098a4:	e063      	b.n	800996e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d106      	bne.n	80098c6 <dir_sdi+0x46>
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d902      	bls.n	80098c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10c      	bne.n	80098e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	8912      	ldrh	r2, [r2, #8]
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d301      	bcc.n	80098dc <dir_sdi+0x5c>
 80098d8:	2302      	movs	r3, #2
 80098da:	e048      	b.n	800996e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	61da      	str	r2, [r3, #28]
 80098e4:	e029      	b.n	800993a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	895b      	ldrh	r3, [r3, #10]
 80098ea:	025b      	lsls	r3, r3, #9
 80098ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098ee:	e019      	b.n	8009924 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6979      	ldr	r1, [r7, #20]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fd06 	bl	8009306 <get_fat>
 80098fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009902:	d101      	bne.n	8009908 <dir_sdi+0x88>
 8009904:	2301      	movs	r3, #1
 8009906:	e032      	b.n	800996e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d904      	bls.n	8009918 <dir_sdi+0x98>
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	429a      	cmp	r2, r3
 8009916:	d301      	bcc.n	800991c <dir_sdi+0x9c>
 8009918:	2302      	movs	r3, #2
 800991a:	e028      	b.n	800996e <dir_sdi+0xee>
			ofs -= csz;
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	429a      	cmp	r2, r3
 800992a:	d2e1      	bcs.n	80098f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800992c:	6979      	ldr	r1, [r7, #20]
 800992e:	6938      	ldr	r0, [r7, #16]
 8009930:	f7ff fcca 	bl	80092c8 <clust2sect>
 8009934:	4602      	mov	r2, r0
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <dir_sdi+0xcc>
 8009948:	2302      	movs	r3, #2
 800994a:	e010      	b.n	800996e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	69da      	ldr	r2, [r3, #28]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	0a5b      	lsrs	r3, r3, #9
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	441a      	add	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b086      	sub	sp, #24
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	3320      	adds	r3, #32
 800998c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <dir_next+0x28>
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800999c:	d301      	bcc.n	80099a2 <dir_next+0x2c>
 800999e:	2304      	movs	r3, #4
 80099a0:	e0aa      	b.n	8009af8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f040 8098 	bne.w	8009ade <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10b      	bne.n	80099d8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	8912      	ldrh	r2, [r2, #8]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	f0c0 8088 	bcc.w	8009ade <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	61da      	str	r2, [r3, #28]
 80099d4:	2304      	movs	r3, #4
 80099d6:	e08f      	b.n	8009af8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	0a5b      	lsrs	r3, r3, #9
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	8952      	ldrh	r2, [r2, #10]
 80099e0:	3a01      	subs	r2, #1
 80099e2:	4013      	ands	r3, r2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d17a      	bne.n	8009ade <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f7ff fc88 	bl	8009306 <get_fat>
 80099f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d801      	bhi.n	8009a02 <dir_next+0x8c>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e07a      	b.n	8009af8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a08:	d101      	bne.n	8009a0e <dir_next+0x98>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e074      	b.n	8009af8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d358      	bcc.n	8009aca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	61da      	str	r2, [r3, #28]
 8009a24:	2304      	movs	r3, #4
 8009a26:	e067      	b.n	8009af8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7ff fe59 	bl	80096e8 <create_chain>
 8009a36:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <dir_next+0xcc>
 8009a3e:	2307      	movs	r3, #7
 8009a40:	e05a      	b.n	8009af8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <dir_next+0xd6>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e055      	b.n	8009af8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a52:	d101      	bne.n	8009a58 <dir_next+0xe2>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e04f      	b.n	8009af8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f7ff fb55 	bl	8009108 <sync_window>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <dir_next+0xf2>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e047      	b.n	8009af8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3330      	adds	r3, #48	; 0x30
 8009a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff f97f 	bl	8008d76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	6979      	ldr	r1, [r7, #20]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7ff fc22 	bl	80092c8 <clust2sect>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a8a:	e012      	b.n	8009ab2 <dir_next+0x13c>
						fs->wflag = 1;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff fb38 	bl	8009108 <sync_window>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <dir_next+0x12c>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e02a      	b.n	8009af8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	895b      	ldrh	r3, [r3, #10]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d3e6      	bcc.n	8009a8c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	1ad2      	subs	r2, r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ad0:	6979      	ldr	r1, [r7, #20]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff fbf8 	bl	80092c8 <clust2sect>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af0:	441a      	add	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b10:	2100      	movs	r1, #0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff feb4 	bl	8009880 <dir_sdi>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d12b      	bne.n	8009b7a <dir_alloc+0x7a>
		n = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fb2f 	bl	8009190 <move_window>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11d      	bne.n	8009b78 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2be5      	cmp	r3, #229	; 0xe5
 8009b44:	d004      	beq.n	8009b50 <dir_alloc+0x50>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d107      	bne.n	8009b60 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3301      	adds	r3, #1
 8009b54:	613b      	str	r3, [r7, #16]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d102      	bne.n	8009b64 <dir_alloc+0x64>
 8009b5e:	e00c      	b.n	8009b7a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b60:	2300      	movs	r3, #0
 8009b62:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b64:	2101      	movs	r1, #1
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff ff05 	bl	8009976 <dir_next>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0d7      	beq.n	8009b26 <dir_alloc+0x26>
 8009b76:	e000      	b.n	8009b7a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b78:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d101      	bne.n	8009b84 <dir_alloc+0x84>
 8009b80:	2307      	movs	r3, #7
 8009b82:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	331a      	adds	r3, #26
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff f847 	bl	8008c30 <ld_word>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d109      	bne.n	8009bc2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff f83c 	bl	8008c30 <ld_word>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	041b      	lsls	r3, r3, #16
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	331a      	adds	r3, #26
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	b292      	uxth	r2, r2
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff f85f 	bl	8008ca6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d109      	bne.n	8009c04 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f103 0214 	add.w	r2, r3, #20
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	0c1b      	lsrs	r3, r3, #16
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7ff f851 	bl	8008ca6 <st_word>
	}
}
 8009c04:	bf00      	nop
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff fe2f 	bl	8009880 <dir_sdi>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <dir_find+0x24>
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	e03e      	b.n	8009cae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6938      	ldr	r0, [r7, #16]
 8009c38:	f7ff faaa 	bl	8009190 <move_window>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d12f      	bne.n	8009ca6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <dir_find+0x4e>
 8009c54:	2304      	movs	r3, #4
 8009c56:	75fb      	strb	r3, [r7, #23]
 8009c58:	e028      	b.n	8009cac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	330b      	adds	r3, #11
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	330b      	adds	r3, #11
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <dir_find+0x86>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a18      	ldr	r0, [r3, #32]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3324      	adds	r3, #36	; 0x24
 8009c84:	220b      	movs	r2, #11
 8009c86:	4619      	mov	r1, r3
 8009c88:	f7ff f88f 	bl	8008daa <mem_cmp>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c92:	2100      	movs	r1, #0
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff fe6e 	bl	8009976 <dir_next>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0c5      	beq.n	8009c30 <dir_find+0x24>
 8009ca4:	e002      	b.n	8009cac <dir_find+0xa0>
		if (res != FR_OK) break;
 8009ca6:	bf00      	nop
 8009ca8:	e000      	b.n	8009cac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009caa:	bf00      	nop

	return res;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff ff1a 	bl	8009b00 <dir_alloc>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d11c      	bne.n	8009d10 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	68b8      	ldr	r0, [r7, #8]
 8009cde:	f7ff fa57 	bl	8009190 <move_window>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d111      	bne.n	8009d10 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff f83e 	bl	8008d76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a18      	ldr	r0, [r3, #32]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3324      	adds	r3, #36	; 0x24
 8009d02:	220b      	movs	r2, #11
 8009d04:	4619      	mov	r1, r3
 8009d06:	f7ff f815 	bl	8008d34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b086      	sub	sp, #24
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2200      	movs	r2, #0
 8009d28:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d04e      	beq.n	8009dd0 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009d3a:	e021      	b.n	8009d80 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a1a      	ldr	r2, [r3, #32]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	1c59      	adds	r1, r3, #1
 8009d44:	6179      	str	r1, [r7, #20]
 8009d46:	4413      	add	r3, r2
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b20      	cmp	r3, #32
 8009d50:	d100      	bne.n	8009d54 <get_fileinfo+0x3a>
 8009d52:	e015      	b.n	8009d80 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d101      	bne.n	8009d5e <get_fileinfo+0x44>
 8009d5a:	23e5      	movs	r3, #229	; 0xe5
 8009d5c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b09      	cmp	r3, #9
 8009d62:	d106      	bne.n	8009d72 <get_fileinfo+0x58>
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	613a      	str	r2, [r7, #16]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	222e      	movs	r2, #46	; 0x2e
 8009d70:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	613a      	str	r2, [r7, #16]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	7bfa      	ldrb	r2, [r7, #15]
 8009d7e:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b0a      	cmp	r3, #10
 8009d84:	d9da      	bls.n	8009d3c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3309      	adds	r3, #9
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	7ada      	ldrb	r2, [r3, #11]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	331c      	adds	r3, #28
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe ff5c 	bl	8008c60 <ld_dword>
 8009da8:	4602      	mov	r2, r0
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	3316      	adds	r3, #22
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe ff53 	bl	8008c60 <ld_dword>
 8009dba:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	80da      	strh	r2, [r3, #6]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	0c1b      	lsrs	r3, r3, #16
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	809a      	strh	r2, [r3, #4]
 8009dce:	e000      	b.n	8009dd2 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009dd0:	bf00      	nop
}
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3324      	adds	r3, #36	; 0x24
 8009dec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009dee:	220b      	movs	r2, #11
 8009df0:	2120      	movs	r1, #32
 8009df2:	68b8      	ldr	r0, [r7, #8]
 8009df4:	f7fe ffbf 	bl	8008d76 <mem_set>
	si = i = 0; ni = 8;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	613b      	str	r3, [r7, #16]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	2308      	movs	r3, #8
 8009e02:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	617a      	str	r2, [r7, #20]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e12:	7ffb      	ldrb	r3, [r7, #31]
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	d94e      	bls.n	8009eb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009e18:	7ffb      	ldrb	r3, [r7, #31]
 8009e1a:	2b2f      	cmp	r3, #47	; 0x2f
 8009e1c:	d006      	beq.n	8009e2c <create_name+0x54>
 8009e1e:	7ffb      	ldrb	r3, [r7, #31]
 8009e20:	2b5c      	cmp	r3, #92	; 0x5c
 8009e22:	d110      	bne.n	8009e46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e24:	e002      	b.n	8009e2c <create_name+0x54>
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	4413      	add	r3, r2
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	2b2f      	cmp	r3, #47	; 0x2f
 8009e36:	d0f6      	beq.n	8009e26 <create_name+0x4e>
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b5c      	cmp	r3, #92	; 0x5c
 8009e42:	d0f0      	beq.n	8009e26 <create_name+0x4e>
			break;
 8009e44:	e038      	b.n	8009eb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009e46:	7ffb      	ldrb	r3, [r7, #31]
 8009e48:	2b2e      	cmp	r3, #46	; 0x2e
 8009e4a:	d003      	beq.n	8009e54 <create_name+0x7c>
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d30c      	bcc.n	8009e6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2b0b      	cmp	r3, #11
 8009e58:	d002      	beq.n	8009e60 <create_name+0x88>
 8009e5a:	7ffb      	ldrb	r3, [r7, #31]
 8009e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5e:	d001      	beq.n	8009e64 <create_name+0x8c>
 8009e60:	2306      	movs	r3, #6
 8009e62:	e044      	b.n	8009eee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009e64:	2308      	movs	r3, #8
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	230b      	movs	r3, #11
 8009e6a:	61bb      	str	r3, [r7, #24]
			continue;
 8009e6c:	e022      	b.n	8009eb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009e6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	da04      	bge.n	8009e80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009e76:	7ffb      	ldrb	r3, [r7, #31]
 8009e78:	3b80      	subs	r3, #128	; 0x80
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <create_name+0x120>)
 8009e7c:	5cd3      	ldrb	r3, [r2, r3]
 8009e7e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009e80:	7ffb      	ldrb	r3, [r7, #31]
 8009e82:	4619      	mov	r1, r3
 8009e84:	481d      	ldr	r0, [pc, #116]	; (8009efc <create_name+0x124>)
 8009e86:	f7fe ffb7 	bl	8008df8 <chk_chr>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <create_name+0xbc>
 8009e90:	2306      	movs	r3, #6
 8009e92:	e02c      	b.n	8009eee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009e94:	7ffb      	ldrb	r3, [r7, #31]
 8009e96:	2b60      	cmp	r3, #96	; 0x60
 8009e98:	d905      	bls.n	8009ea6 <create_name+0xce>
 8009e9a:	7ffb      	ldrb	r3, [r7, #31]
 8009e9c:	2b7a      	cmp	r3, #122	; 0x7a
 8009e9e:	d802      	bhi.n	8009ea6 <create_name+0xce>
 8009ea0:	7ffb      	ldrb	r3, [r7, #31]
 8009ea2:	3b20      	subs	r3, #32
 8009ea4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	613a      	str	r2, [r7, #16]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	4413      	add	r3, r2
 8009eb0:	7ffa      	ldrb	r2, [r7, #31]
 8009eb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009eb4:	e7a6      	b.n	8009e04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009eb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	441a      	add	r2, r3
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <create_name+0xf4>
 8009ec8:	2306      	movs	r3, #6
 8009eca:	e010      	b.n	8009eee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2be5      	cmp	r3, #229	; 0xe5
 8009ed2:	d102      	bne.n	8009eda <create_name+0x102>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2205      	movs	r2, #5
 8009ed8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009eda:	7ffb      	ldrb	r3, [r7, #31]
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d801      	bhi.n	8009ee4 <create_name+0x10c>
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	e000      	b.n	8009ee6 <create_name+0x10e>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	330b      	adds	r3, #11
 8009eea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009eec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0800c730 	.word	0x0800c730
 8009efc:	0800c6c0 	.word	0x0800c6c0

08009f00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f14:	e002      	b.n	8009f1c <follow_path+0x1c>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b2f      	cmp	r3, #47	; 0x2f
 8009f22:	d0f8      	beq.n	8009f16 <follow_path+0x16>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b5c      	cmp	r3, #92	; 0x5c
 8009f2a:	d0f4      	beq.n	8009f16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b1f      	cmp	r3, #31
 8009f38:	d80a      	bhi.n	8009f50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2280      	movs	r2, #128	; 0x80
 8009f3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f42:	2100      	movs	r1, #0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff fc9b 	bl	8009880 <dir_sdi>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]
 8009f4e:	e043      	b.n	8009fd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f50:	463b      	mov	r3, r7
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ff3f 	bl	8009dd8 <create_name>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d134      	bne.n	8009fce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fe51 	bl	8009c0c <dir_find>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d127      	bne.n	8009fd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d122      	bne.n	8009fd2 <follow_path+0xd2>
 8009f8c:	2305      	movs	r3, #5
 8009f8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f90:	e01f      	b.n	8009fd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11c      	bne.n	8009fd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	799b      	ldrb	r3, [r3, #6]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009fa8:	2305      	movs	r3, #5
 8009faa:	75fb      	strb	r3, [r7, #23]
 8009fac:	e014      	b.n	8009fd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbc:	4413      	add	r3, r2
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7ff fde4 	bl	8009b8e <ld_clust>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fcc:	e7c0      	b.n	8009f50 <follow_path+0x50>
			if (res != FR_OK) break;
 8009fce:	bf00      	nop
 8009fd0:	e002      	b.n	8009fd8 <follow_path+0xd8>
				break;
 8009fd2:	bf00      	nop
 8009fd4:	e000      	b.n	8009fd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fd6:	bf00      	nop
			}
		}
	}

	return res;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b087      	sub	sp, #28
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009fea:	f04f 33ff 	mov.w	r3, #4294967295
 8009fee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d031      	beq.n	800a05c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e002      	b.n	800a006 <get_ldnumber+0x24>
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	3301      	adds	r3, #1
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d903      	bls.n	800a016 <get_ldnumber+0x34>
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b3a      	cmp	r3, #58	; 0x3a
 800a014:	d1f4      	bne.n	800a000 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b3a      	cmp	r3, #58	; 0x3a
 800a01c:	d11c      	bne.n	800a058 <get_ldnumber+0x76>
			tp = *path;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	60fa      	str	r2, [r7, #12]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	3b30      	subs	r3, #48	; 0x30
 800a02e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b09      	cmp	r3, #9
 800a034:	d80e      	bhi.n	800a054 <get_ldnumber+0x72>
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d10a      	bne.n	800a054 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d107      	bne.n	800a054 <get_ldnumber+0x72>
					vol = (int)i;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	3301      	adds	r3, #1
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	e002      	b.n	800a05e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a058:	2300      	movs	r3, #0
 800a05a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a05c:	693b      	ldr	r3, [r7, #16]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	70da      	strb	r2, [r3, #3]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f04f 32ff 	mov.w	r2, #4294967295
 800a082:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff f882 	bl	8009190 <move_window>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <check_fs+0x2a>
 800a092:	2304      	movs	r3, #4
 800a094:	e038      	b.n	800a108 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3330      	adds	r3, #48	; 0x30
 800a09a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fdc6 	bl	8008c30 <ld_word>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d001      	beq.n	800a0b4 <check_fs+0x48>
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e029      	b.n	800a108 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0ba:	2be9      	cmp	r3, #233	; 0xe9
 800a0bc:	d009      	beq.n	800a0d2 <check_fs+0x66>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0c4:	2beb      	cmp	r3, #235	; 0xeb
 800a0c6:	d11e      	bne.n	800a106 <check_fs+0x9a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a0ce:	2b90      	cmp	r3, #144	; 0x90
 800a0d0:	d119      	bne.n	800a106 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	3330      	adds	r3, #48	; 0x30
 800a0d6:	3336      	adds	r3, #54	; 0x36
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fdc1 	bl	8008c60 <ld_dword>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0e4:	4a0a      	ldr	r2, [pc, #40]	; (800a110 <check_fs+0xa4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d101      	bne.n	800a0ee <check_fs+0x82>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e00c      	b.n	800a108 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3330      	adds	r3, #48	; 0x30
 800a0f2:	3352      	adds	r3, #82	; 0x52
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fdb3 	bl	8008c60 <ld_dword>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <check_fs+0xa8>)
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d101      	bne.n	800a106 <check_fs+0x9a>
 800a102:	2300      	movs	r3, #0
 800a104:	e000      	b.n	800a108 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a106:	2302      	movs	r3, #2
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	00544146 	.word	0x00544146
 800a114:	33544146 	.word	0x33544146

0800a118 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b096      	sub	sp, #88	; 0x58
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff ff58 	bl	8009fe2 <get_ldnumber>
 800a132:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a136:	2b00      	cmp	r3, #0
 800a138:	da01      	bge.n	800a13e <find_volume+0x26>
 800a13a:	230b      	movs	r3, #11
 800a13c:	e22e      	b.n	800a59c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a13e:	4aa8      	ldr	r2, [pc, #672]	; (800a3e0 <find_volume+0x2c8>)
 800a140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a146:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <find_volume+0x3a>
 800a14e:	230c      	movs	r3, #12
 800a150:	e224      	b.n	800a59c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a156:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01a      	beq.n	800a19e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	785b      	ldrb	r3, [r3, #1]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fcc1 	bl	8008af4 <disk_status>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10c      	bne.n	800a19e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <find_volume+0x82>
 800a18a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a196:	230a      	movs	r3, #10
 800a198:	e200      	b.n	800a59c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a19a:	2300      	movs	r3, #0
 800a19c:	e1fe      	b.n	800a59c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	785b      	ldrb	r3, [r3, #1]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe fcb9 	bl	8008b28 <disk_initialize>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e1e7      	b.n	800a59c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <find_volume+0xca>
 800a1d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a1de:	230a      	movs	r3, #10
 800a1e0:	e1dc      	b.n	800a59c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a1e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1ea:	f7ff ff3f 	bl	800a06c <check_fs>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d14b      	bne.n	800a294 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	643b      	str	r3, [r7, #64]	; 0x40
 800a200:	e01f      	b.n	800a242 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a20a:	011b      	lsls	r3, r3, #4
 800a20c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a210:	4413      	add	r3, r2
 800a212:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	3304      	adds	r3, #4
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <find_volume+0x114>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	3308      	adds	r3, #8
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe fd1c 	bl	8008c60 <ld_dword>
 800a228:	4602      	mov	r2, r0
 800a22a:	e000      	b.n	800a22e <find_volume+0x116>
 800a22c:	2200      	movs	r2, #0
 800a22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a236:	440b      	add	r3, r1
 800a238:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a23e:	3301      	adds	r3, #1
 800a240:	643b      	str	r3, [r7, #64]	; 0x40
 800a242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a244:	2b03      	cmp	r3, #3
 800a246:	d9dc      	bls.n	800a202 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a248:	2300      	movs	r3, #0
 800a24a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <find_volume+0x140>
 800a252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a254:	3b01      	subs	r3, #1
 800a256:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a260:	4413      	add	r3, r2
 800a262:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a266:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d005      	beq.n	800a27a <find_volume+0x162>
 800a26e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a272:	f7ff fefb 	bl	800a06c <check_fs>
 800a276:	4603      	mov	r3, r0
 800a278:	e000      	b.n	800a27c <find_volume+0x164>
 800a27a:	2303      	movs	r3, #3
 800a27c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a284:	2b01      	cmp	r3, #1
 800a286:	d905      	bls.n	800a294 <find_volume+0x17c>
 800a288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28a:	3301      	adds	r3, #1
 800a28c:	643b      	str	r3, [r7, #64]	; 0x40
 800a28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a290:	2b03      	cmp	r3, #3
 800a292:	d9e1      	bls.n	800a258 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d101      	bne.n	800a2a0 <find_volume+0x188>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e17d      	b.n	800a59c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d901      	bls.n	800a2ac <find_volume+0x194>
 800a2a8:	230d      	movs	r3, #13
 800a2aa:	e177      	b.n	800a59c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	3330      	adds	r3, #48	; 0x30
 800a2b0:	330b      	adds	r3, #11
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fcbc 	bl	8008c30 <ld_word>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2be:	d001      	beq.n	800a2c4 <find_volume+0x1ac>
 800a2c0:	230d      	movs	r3, #13
 800a2c2:	e16b      	b.n	800a59c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	3330      	adds	r3, #48	; 0x30
 800a2c8:	3316      	adds	r3, #22
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe fcb0 	bl	8008c30 <ld_word>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <find_volume+0x1d0>
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	3330      	adds	r3, #48	; 0x30
 800a2de:	3324      	adds	r3, #36	; 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe fcbd 	bl	8008c60 <ld_dword>
 800a2e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	789b      	ldrb	r3, [r3, #2]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d005      	beq.n	800a30c <find_volume+0x1f4>
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	789b      	ldrb	r3, [r3, #2]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d001      	beq.n	800a30c <find_volume+0x1f4>
 800a308:	230d      	movs	r3, #13
 800a30a:	e147      	b.n	800a59c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	789b      	ldrb	r3, [r3, #2]
 800a310:	461a      	mov	r2, r3
 800a312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a314:	fb02 f303 	mul.w	r3, r2, r3
 800a318:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a320:	b29a      	uxth	r2, r3
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	895b      	ldrh	r3, [r3, #10]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d008      	beq.n	800a340 <find_volume+0x228>
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	895b      	ldrh	r3, [r3, #10]
 800a332:	461a      	mov	r2, r3
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	895b      	ldrh	r3, [r3, #10]
 800a338:	3b01      	subs	r3, #1
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <find_volume+0x22c>
 800a340:	230d      	movs	r3, #13
 800a342:	e12b      	b.n	800a59c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	3330      	adds	r3, #48	; 0x30
 800a348:	3311      	adds	r3, #17
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe fc70 	bl	8008c30 <ld_word>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	b29b      	uxth	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <find_volume+0x252>
 800a366:	230d      	movs	r3, #13
 800a368:	e118      	b.n	800a59c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	3330      	adds	r3, #48	; 0x30
 800a36e:	3313      	adds	r3, #19
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fc5d 	bl	8008c30 <ld_word>
 800a376:	4603      	mov	r3, r0
 800a378:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a37a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d106      	bne.n	800a38e <find_volume+0x276>
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	3330      	adds	r3, #48	; 0x30
 800a384:	3320      	adds	r3, #32
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fc6a 	bl	8008c60 <ld_dword>
 800a38c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a390:	3330      	adds	r3, #48	; 0x30
 800a392:	330e      	adds	r3, #14
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fc4b 	bl	8008c30 <ld_word>
 800a39a:	4603      	mov	r3, r0
 800a39c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a39e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <find_volume+0x290>
 800a3a4:	230d      	movs	r3, #13
 800a3a6:	e0f9      	b.n	800a59c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a3a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ac:	4413      	add	r3, r2
 800a3ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3b0:	8912      	ldrh	r2, [r2, #8]
 800a3b2:	0912      	lsrs	r2, r2, #4
 800a3b4:	b292      	uxth	r2, r2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a3ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d201      	bcs.n	800a3c6 <find_volume+0x2ae>
 800a3c2:	230d      	movs	r3, #13
 800a3c4:	e0ea      	b.n	800a59c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a3c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ce:	8952      	ldrh	r2, [r2, #10]
 800a3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d103      	bne.n	800a3e4 <find_volume+0x2cc>
 800a3dc:	230d      	movs	r3, #13
 800a3de:	e0dd      	b.n	800a59c <find_volume+0x484>
 800a3e0:	200100b8 	.word	0x200100b8
		fmt = FS_FAT32;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d802      	bhi.n	800a3fa <find_volume+0x2e2>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a400:	4293      	cmp	r3, r2
 800a402:	d802      	bhi.n	800a40a <find_volume+0x2f2>
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	1c9a      	adds	r2, r3, #2
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a416:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a418:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a41c:	441a      	add	r2, r3
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	441a      	add	r2, r3
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a42c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a430:	2b03      	cmp	r3, #3
 800a432:	d11e      	bne.n	800a472 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	3330      	adds	r3, #48	; 0x30
 800a438:	332a      	adds	r3, #42	; 0x2a
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fbf8 	bl	8008c30 <ld_word>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <find_volume+0x332>
 800a446:	230d      	movs	r3, #13
 800a448:	e0a8      	b.n	800a59c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	891b      	ldrh	r3, [r3, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <find_volume+0x33e>
 800a452:	230d      	movs	r3, #13
 800a454:	e0a2      	b.n	800a59c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	3330      	adds	r3, #48	; 0x30
 800a45a:	332c      	adds	r3, #44	; 0x2c
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fbff 	bl	8008c60 <ld_dword>
 800a462:	4602      	mov	r2, r0
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	647b      	str	r3, [r7, #68]	; 0x44
 800a470:	e01f      	b.n	800a4b2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	891b      	ldrh	r3, [r3, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <find_volume+0x366>
 800a47a:	230d      	movs	r3, #13
 800a47c:	e08e      	b.n	800a59c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	6a1a      	ldr	r2, [r3, #32]
 800a482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a484:	441a      	add	r2, r3
 800a486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a488:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a48a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d103      	bne.n	800a49a <find_volume+0x382>
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	e00a      	b.n	800a4b0 <find_volume+0x398>
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	695a      	ldr	r2, [r3, #20]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4413      	add	r3, r2
 800a4a4:	085a      	lsrs	r2, r3, #1
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a4b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4bc:	0a5b      	lsrs	r3, r3, #9
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d201      	bcs.n	800a4c6 <find_volume+0x3ae>
 800a4c2:	230d      	movs	r3, #13
 800a4c4:	e06a      	b.n	800a59c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4cc:	611a      	str	r2, [r3, #16]
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	2280      	movs	r2, #128	; 0x80
 800a4da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d149      	bne.n	800a578 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	3330      	adds	r3, #48	; 0x30
 800a4e8:	3330      	adds	r3, #48	; 0x30
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fba0 	bl	8008c30 <ld_word>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d140      	bne.n	800a578 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4fe:	f7fe fe47 	bl	8009190 <move_window>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d137      	bne.n	800a578 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	2200      	movs	r2, #0
 800a50c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	3330      	adds	r3, #48	; 0x30
 800a512:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fb8a 	bl	8008c30 <ld_word>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a524:	429a      	cmp	r2, r3
 800a526:	d127      	bne.n	800a578 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	3330      	adds	r3, #48	; 0x30
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fb97 	bl	8008c60 <ld_dword>
 800a532:	4602      	mov	r2, r0
 800a534:	4b1b      	ldr	r3, [pc, #108]	; (800a5a4 <find_volume+0x48c>)
 800a536:	429a      	cmp	r2, r3
 800a538:	d11e      	bne.n	800a578 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	3330      	adds	r3, #48	; 0x30
 800a53e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe fb8c 	bl	8008c60 <ld_dword>
 800a548:	4602      	mov	r2, r0
 800a54a:	4b17      	ldr	r3, [pc, #92]	; (800a5a8 <find_volume+0x490>)
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d113      	bne.n	800a578 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	3330      	adds	r3, #48	; 0x30
 800a554:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fb81 	bl	8008c60 <ld_dword>
 800a55e:	4602      	mov	r2, r0
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	3330      	adds	r3, #48	; 0x30
 800a568:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fb77 	bl	8008c60 <ld_dword>
 800a572:	4602      	mov	r2, r0
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a57e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a580:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <find_volume+0x494>)
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	3301      	adds	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	4b08      	ldr	r3, [pc, #32]	; (800a5ac <find_volume+0x494>)
 800a58a:	801a      	strh	r2, [r3, #0]
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <find_volume+0x494>)
 800a58e:	881a      	ldrh	r2, [r3, #0]
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a596:	f7fe fd93 	bl	80090c0 <clear_lock>
#endif
	return FR_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3758      	adds	r7, #88	; 0x58
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	41615252 	.word	0x41615252
 800a5a8:	61417272 	.word	0x61417272
 800a5ac:	200100bc 	.word	0x200100bc

0800a5b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a5ba:	2309      	movs	r3, #9
 800a5bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d01c      	beq.n	800a5fe <validate+0x4e>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d018      	beq.n	800a5fe <validate+0x4e>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d013      	beq.n	800a5fe <validate+0x4e>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	889a      	ldrh	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	88db      	ldrh	r3, [r3, #6]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d10c      	bne.n	800a5fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fa82 	bl	8008af4 <disk_status>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <validate+0x4e>
			res = FR_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <validate+0x5a>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	e000      	b.n	800a60c <validate+0x5c>
 800a60a:	2300      	movs	r3, #0
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	6013      	str	r3, [r2, #0]
	return res;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4613      	mov	r3, r2
 800a628:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a62e:	f107 0310 	add.w	r3, r7, #16
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fcd5 	bl	8009fe2 <get_ldnumber>
 800a638:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	da01      	bge.n	800a644 <f_mount+0x28>
 800a640:	230b      	movs	r3, #11
 800a642:	e02b      	b.n	800a69c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a644:	4a17      	ldr	r2, [pc, #92]	; (800a6a4 <f_mount+0x88>)
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a64c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a654:	69b8      	ldr	r0, [r7, #24]
 800a656:	f7fe fd33 	bl	80090c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	490d      	ldr	r1, [pc, #52]	; (800a6a4 <f_mount+0x88>)
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <f_mount+0x66>
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <f_mount+0x6a>
 800a682:	2300      	movs	r3, #0
 800a684:	e00a      	b.n	800a69c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a686:	f107 010c 	add.w	r1, r7, #12
 800a68a:	f107 0308 	add.w	r3, r7, #8
 800a68e:	2200      	movs	r2, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fd41 	bl	800a118 <find_volume>
 800a696:	4603      	mov	r3, r0
 800a698:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	200100b8 	.word	0x200100b8

0800a6a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b098      	sub	sp, #96	; 0x60
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <f_open+0x18>
 800a6bc:	2309      	movs	r3, #9
 800a6be:	e1ad      	b.n	800aa1c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a6c8:	79fa      	ldrb	r2, [r7, #7]
 800a6ca:	f107 0110 	add.w	r1, r7, #16
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff fd20 	bl	800a118 <find_volume>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a6de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 8191 	bne.w	800aa0a <f_open+0x362>
		dj.obj.fs = fs;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	f107 0314 	add.w	r3, r7, #20
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff fc03 	bl	8009f00 <follow_path>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11a      	bne.n	800a73e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da03      	bge.n	800a71a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a712:	2306      	movs	r3, #6
 800a714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a718:	e011      	b.n	800a73e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	f023 0301 	bic.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	bf14      	ite	ne
 800a724:	2301      	movne	r3, #1
 800a726:	2300      	moveq	r3, #0
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	461a      	mov	r2, r3
 800a72c:	f107 0314 	add.w	r3, r7, #20
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fb7c 	bl	8008e30 <chk_lock>
 800a738:	4603      	mov	r3, r0
 800a73a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	f003 031c 	and.w	r3, r3, #28
 800a744:	2b00      	cmp	r3, #0
 800a746:	d07f      	beq.n	800a848 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d017      	beq.n	800a780 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a754:	2b04      	cmp	r3, #4
 800a756:	d10e      	bne.n	800a776 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a758:	f7fe fbc6 	bl	8008ee8 <enq_lock>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <f_open+0xc8>
 800a762:	f107 0314 	add.w	r3, r7, #20
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff faa5 	bl	8009cb6 <dir_register>
 800a76c:	4603      	mov	r3, r0
 800a76e:	e000      	b.n	800a772 <f_open+0xca>
 800a770:	2312      	movs	r3, #18
 800a772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a776:	79fb      	ldrb	r3, [r7, #7]
 800a778:	f043 0308 	orr.w	r3, r3, #8
 800a77c:	71fb      	strb	r3, [r7, #7]
 800a77e:	e010      	b.n	800a7a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a780:	7ebb      	ldrb	r3, [r7, #26]
 800a782:	f003 0311 	and.w	r3, r3, #17
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <f_open+0xea>
					res = FR_DENIED;
 800a78a:	2307      	movs	r3, #7
 800a78c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a790:	e007      	b.n	800a7a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <f_open+0xfa>
 800a79c:	2308      	movs	r3, #8
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d168      	bne.n	800a87c <f_open+0x1d4>
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d063      	beq.n	800a87c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a7b4:	f7fb f9a6 	bl	8005b04 <get_fattime>
 800a7b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	330e      	adds	r3, #14
 800a7be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fe fa8b 	bl	8008cdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	3316      	adds	r3, #22
 800a7ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fa85 	bl	8008cdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	330b      	adds	r3, #11
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7de:	4611      	mov	r1, r2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff f9d4 	bl	8009b8e <ld_clust>
 800a7e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff f9ec 	bl	8009bcc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f6:	331c      	adds	r3, #28
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fa6e 	bl	8008cdc <st_dword>
					fs->wflag = 1;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2201      	movs	r2, #1
 800a804:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d037      	beq.n	800a87c <f_open+0x1d4>
						dw = fs->winsect;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a812:	f107 0314 	add.w	r3, r7, #20
 800a816:	2200      	movs	r2, #0
 800a818:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe feff 	bl	800961e <remove_chain>
 800a820:	4603      	mov	r3, r0
 800a822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d126      	bne.n	800a87c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fcac 	bl	8009190 <move_window>
 800a838:	4603      	mov	r3, r0
 800a83a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a842:	3a01      	subs	r2, #1
 800a844:	60da      	str	r2, [r3, #12]
 800a846:	e019      	b.n	800a87c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d115      	bne.n	800a87c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a850:	7ebb      	ldrb	r3, [r7, #26]
 800a852:	f003 0310 	and.w	r3, r3, #16
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a85a:	2304      	movs	r3, #4
 800a85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a860:	e00c      	b.n	800a87c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d007      	beq.n	800a87c <f_open+0x1d4>
 800a86c:	7ebb      	ldrb	r3, [r7, #26]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <f_open+0x1d4>
						res = FR_DENIED;
 800a876:	2307      	movs	r3, #7
 800a878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a87c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a880:	2b00      	cmp	r3, #0
 800a882:	d128      	bne.n	800a8d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	f003 0308 	and.w	r3, r3, #8
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a894:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	f023 0301 	bic.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bf14      	ite	ne
 800a8ae:	2301      	movne	r3, #1
 800a8b0:	2300      	moveq	r3, #0
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f107 0314 	add.w	r3, r7, #20
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fb35 	bl	8008f2c <inc_lock>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <f_open+0x22e>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 8095 	bne.w	800aa0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7ff f951 	bl	8009b8e <ld_clust>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f4:	331c      	adds	r3, #28
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe f9b2 	bl	8008c60 <ld_dword>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	88da      	ldrh	r2, [r3, #6]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	79fa      	ldrb	r2, [r7, #7]
 800a91a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3330      	adds	r3, #48	; 0x30
 800a932:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fa1c 	bl	8008d76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b00      	cmp	r3, #0
 800a946:	d060      	beq.n	800aa0a <f_open+0x362>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d05c      	beq.n	800aa0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	895b      	ldrh	r3, [r3, #10]
 800a95c:	025b      	lsls	r3, r3, #9
 800a95e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	657b      	str	r3, [r7, #84]	; 0x54
 800a96c:	e016      	b.n	800a99c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fcc7 	bl	8009306 <get_fat>
 800a978:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a97a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d802      	bhi.n	800a986 <f_open+0x2de>
 800a980:	2302      	movs	r3, #2
 800a982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d102      	bne.n	800a994 <f_open+0x2ec>
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	657b      	str	r3, [r7, #84]	; 0x54
 800a99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d103      	bne.n	800a9ac <f_open+0x304>
 800a9a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d8e0      	bhi.n	800a96e <f_open+0x2c6>
				}
				fp->clust = clst;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d127      	bne.n	800aa0a <f_open+0x362>
 800a9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d022      	beq.n	800aa0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe fc7d 	bl	80092c8 <clust2sect>
 800a9ce:	6478      	str	r0, [r7, #68]	; 0x44
 800a9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d103      	bne.n	800a9de <f_open+0x336>
						res = FR_INT_ERR;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9dc:	e015      	b.n	800aa0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a9de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e0:	0a5a      	lsrs	r2, r3, #9
 800a9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	7858      	ldrb	r0, [r3, #1]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a1a      	ldr	r2, [r3, #32]
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f7fe f8bb 	bl	8008b74 <disk_read>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <f_open+0x362>
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <f_open+0x370>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3760      	adds	r7, #96	; 0x60
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08e      	sub	sp, #56	; 0x38
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f107 0214 	add.w	r2, r7, #20
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff fdb3 	bl	800a5b0 <validate>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d107      	bne.n	800aa68 <f_read+0x44>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	7d5b      	ldrb	r3, [r3, #21]
 800aa5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aa60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <f_read+0x4a>
 800aa68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa6c:	e115      	b.n	800ac9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	7d1b      	ldrb	r3, [r3, #20]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <f_read+0x5a>
 800aa7a:	2307      	movs	r3, #7
 800aa7c:	e10d      	b.n	800ac9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	f240 80fe 	bls.w	800ac90 <f_read+0x26c>
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aa98:	e0fa      	b.n	800ac90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f040 80c6 	bne.w	800ac34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	0a5b      	lsrs	r3, r3, #9
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	8952      	ldrh	r2, [r2, #10]
 800aab2:	3a01      	subs	r2, #1
 800aab4:	4013      	ands	r3, r2
 800aab6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d12f      	bne.n	800ab1e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d103      	bne.n	800aace <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	633b      	str	r3, [r7, #48]	; 0x30
 800aacc:	e013      	b.n	800aaf6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	4619      	mov	r1, r3
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7fe fe9b 	bl	8009818 <clmt_clust>
 800aae2:	6338      	str	r0, [r7, #48]	; 0x30
 800aae4:	e007      	b.n	800aaf6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f7fe fc09 	bl	8009306 <get_fat>
 800aaf4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d804      	bhi.n	800ab06 <f_read+0xe2>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2202      	movs	r2, #2
 800ab00:	755a      	strb	r2, [r3, #21]
 800ab02:	2302      	movs	r3, #2
 800ab04:	e0c9      	b.n	800ac9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0c:	d104      	bne.n	800ab18 <f_read+0xf4>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2201      	movs	r2, #1
 800ab12:	755a      	strb	r2, [r3, #21]
 800ab14:	2301      	movs	r3, #1
 800ab16:	e0c0      	b.n	800ac9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f7fe fbce 	bl	80092c8 <clust2sect>
 800ab2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <f_read+0x11a>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2202      	movs	r2, #2
 800ab38:	755a      	strb	r2, [r3, #21]
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e0ad      	b.n	800ac9a <f_read+0x276>
			sect += csect;
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	4413      	add	r3, r2
 800ab44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	0a5b      	lsrs	r3, r3, #9
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d039      	beq.n	800abc6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	4413      	add	r3, r2
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	8952      	ldrh	r2, [r2, #10]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d905      	bls.n	800ab6c <f_read+0x148>
					cc = fs->csize - csect;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	895b      	ldrh	r3, [r3, #10]
 800ab64:	461a      	mov	r2, r3
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	7858      	ldrb	r0, [r3, #1]
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab76:	f7fd fffd 	bl	8008b74 <disk_read>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <f_read+0x166>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2201      	movs	r2, #1
 800ab84:	755a      	strb	r2, [r3, #21]
 800ab86:	2301      	movs	r3, #1
 800ab88:	e087      	b.n	800ac9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	7d1b      	ldrb	r3, [r3, #20]
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da14      	bge.n	800abbe <f_read+0x19a>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a1a      	ldr	r2, [r3, #32]
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d90d      	bls.n	800abbe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6a1a      	ldr	r2, [r3, #32]
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	025b      	lsls	r3, r3, #9
 800abac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abae:	18d0      	adds	r0, r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3330      	adds	r3, #48	; 0x30
 800abb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abb8:	4619      	mov	r1, r3
 800abba:	f7fe f8bb 	bl	8008d34 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	025b      	lsls	r3, r3, #9
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800abc4:	e050      	b.n	800ac68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d02e      	beq.n	800ac2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	7d1b      	ldrb	r3, [r3, #20]
 800abd4:	b25b      	sxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	da18      	bge.n	800ac0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	7858      	ldrb	r0, [r3, #1]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6a1a      	ldr	r2, [r3, #32]
 800abe8:	2301      	movs	r3, #1
 800abea:	f7fd ffe3 	bl	8008bb4 <disk_write>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <f_read+0x1da>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2201      	movs	r2, #1
 800abf8:	755a      	strb	r2, [r3, #21]
 800abfa:	2301      	movs	r3, #1
 800abfc:	e04d      	b.n	800ac9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	7d1b      	ldrb	r3, [r3, #20]
 800ac02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	7858      	ldrb	r0, [r3, #1]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac16:	2301      	movs	r3, #1
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	f7fd ffab 	bl	8008b74 <disk_read>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <f_read+0x20a>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2201      	movs	r2, #1
 800ac28:	755a      	strb	r2, [r3, #21]
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e035      	b.n	800ac9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac40:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ac42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d901      	bls.n	800ac4e <f_read+0x22a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5c:	4413      	add	r3, r2
 800ac5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac60:	4619      	mov	r1, r3
 800ac62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac64:	f7fe f866 	bl	8008d34 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ac68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	4413      	add	r3, r2
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	441a      	add	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	619a      	str	r2, [r3, #24]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	441a      	add	r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f47f af01 	bne.w	800aa9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3738      	adds	r7, #56	; 0x38
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f107 0208 	add.w	r2, r7, #8
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff fc7c 	bl	800a5b0 <validate>
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d168      	bne.n	800ad94 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
 800acc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acca:	2b00      	cmp	r3, #0
 800accc:	d062      	beq.n	800ad94 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	7d1b      	ldrb	r3, [r3, #20]
 800acd2:	b25b      	sxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da15      	bge.n	800ad04 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	7858      	ldrb	r0, [r3, #1]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1a      	ldr	r2, [r3, #32]
 800ace6:	2301      	movs	r3, #1
 800ace8:	f7fd ff64 	bl	8008bb4 <disk_write>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <f_sync+0x54>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e04f      	b.n	800ad96 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7d1b      	ldrb	r3, [r3, #20]
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ad04:	f7fa fefe 	bl	8005b04 <get_fattime>
 800ad08:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f7fe fa3c 	bl	8009190 <move_window>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ad1c:	7dfb      	ldrb	r3, [r7, #23]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d138      	bne.n	800ad94 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	330b      	adds	r3, #11
 800ad2c:	781a      	ldrb	r2, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	330b      	adds	r3, #11
 800ad32:	f042 0220 	orr.w	r2, r2, #32
 800ad36:	b2d2      	uxtb	r2, r2
 800ad38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	461a      	mov	r2, r3
 800ad44:	68f9      	ldr	r1, [r7, #12]
 800ad46:	f7fe ff41 	bl	8009bcc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f103 021c 	add.w	r2, r3, #28
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f7fd ffc0 	bl	8008cdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3316      	adds	r3, #22
 800ad60:	6939      	ldr	r1, [r7, #16]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd ffba 	bl	8008cdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3312      	adds	r3, #18
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fd ff99 	bl	8008ca6 <st_word>
					fs->wflag = 1;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2201      	movs	r2, #1
 800ad78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fe fa35 	bl	80091ec <sync_fs>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7d1b      	ldrb	r3, [r3, #20]
 800ad8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ad94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff ff7b 	bl	800aca2 <f_sync>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d118      	bne.n	800ade8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f107 0208 	add.w	r2, r7, #8
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fbf6 	bl	800a5b0 <validate>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10c      	bne.n	800ade8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe f938 	bl	8009048 <dec_lock>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b090      	sub	sp, #64	; 0x40
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800adfc:	f107 010c 	add.w	r1, r7, #12
 800ae00:	1d3b      	adds	r3, r7, #4
 800ae02:	2200      	movs	r2, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff f987 	bl	800a118 <find_volume>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ae10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11f      	bne.n	800ae58 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	f107 030c 	add.w	r3, r7, #12
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff f86d 	bl	8009f00 <follow_path>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ae2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d111      	bne.n	800ae58 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ae34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae38:	b25b      	sxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da03      	bge.n	800ae46 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ae3e:	2306      	movs	r3, #6
 800ae40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ae44:	e008      	b.n	800ae58 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <f_stat+0x66>
 800ae4c:	f107 030c 	add.w	r3, r7, #12
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe ff61 	bl	8009d1a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ae58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3740      	adds	r7, #64	; 0x40
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae72:	2301      	movs	r3, #1
 800ae74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae7a:	4b1f      	ldr	r3, [pc, #124]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800ae7c:	7a5b      	ldrb	r3, [r3, #9]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d131      	bne.n	800aee8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae84:	4b1c      	ldr	r3, [pc, #112]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800ae86:	7a5b      	ldrb	r3, [r3, #9]
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800ae8e:	2100      	movs	r1, #0
 800ae90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae92:	4b19      	ldr	r3, [pc, #100]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800ae94:	7a5b      	ldrb	r3, [r3, #9]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aea2:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800aea4:	7a5b      	ldrb	r3, [r3, #9]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800aeac:	4413      	add	r3, r2
 800aeae:	79fa      	ldrb	r2, [r7, #7]
 800aeb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800aeb4:	7a5b      	ldrb	r3, [r3, #9]
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	b2d1      	uxtb	r1, r2
 800aebc:	4a0e      	ldr	r2, [pc, #56]	; (800aef8 <FATFS_LinkDriverEx+0x94>)
 800aebe:	7251      	strb	r1, [r2, #9]
 800aec0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aec2:	7dbb      	ldrb	r3, [r7, #22]
 800aec4:	3330      	adds	r3, #48	; 0x30
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	3301      	adds	r3, #1
 800aed0:	223a      	movs	r2, #58	; 0x3a
 800aed2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	3302      	adds	r3, #2
 800aed8:	222f      	movs	r2, #47	; 0x2f
 800aeda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	3303      	adds	r3, #3
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	371c      	adds	r7, #28
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	200100e0 	.word	0x200100e0

0800aefc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800af06:	2200      	movs	r2, #0
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff ffaa 	bl	800ae64 <FATFS_LinkDriverEx>
 800af10:	4603      	mov	r3, r0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800af20:	2201      	movs	r2, #1
 800af22:	490e      	ldr	r1, [pc, #56]	; (800af5c <MX_USB_HOST_Init+0x40>)
 800af24:	480e      	ldr	r0, [pc, #56]	; (800af60 <MX_USB_HOST_Init+0x44>)
 800af26:	f7fc fa8b 	bl	8007440 <USBH_Init>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800af30:	f7f5 fe4c 	bl	8000bcc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800af34:	490b      	ldr	r1, [pc, #44]	; (800af64 <MX_USB_HOST_Init+0x48>)
 800af36:	480a      	ldr	r0, [pc, #40]	; (800af60 <MX_USB_HOST_Init+0x44>)
 800af38:	f7fc fb10 	bl	800755c <USBH_RegisterClass>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800af42:	f7f5 fe43 	bl	8000bcc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800af46:	4806      	ldr	r0, [pc, #24]	; (800af60 <MX_USB_HOST_Init+0x44>)
 800af48:	f7fc fb94 	bl	8007674 <USBH_Start>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800af52:	f7f5 fe3b 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800af56:	bf00      	nop
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	0800af7d 	.word	0x0800af7d
 800af60:	20010cec 	.word	0x20010cec
 800af64:	2000000c 	.word	0x2000000c

0800af68 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800af6c:	4802      	ldr	r0, [pc, #8]	; (800af78 <MX_USB_HOST_Process+0x10>)
 800af6e:	f7fc fb91 	bl	8007694 <USBH_Process>
}
 800af72:	bf00      	nop
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20010cec 	.word	0x20010cec

0800af7c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d819      	bhi.n	800afc4 <USBH_UserProcess+0x48>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <USBH_UserProcess+0x1c>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afc5 	.word	0x0800afc5
 800af9c:	0800afb5 	.word	0x0800afb5
 800afa0:	0800afc5 	.word	0x0800afc5
 800afa4:	0800afbd 	.word	0x0800afbd
 800afa8:	0800afad 	.word	0x0800afad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800afac:	4b09      	ldr	r3, [pc, #36]	; (800afd4 <USBH_UserProcess+0x58>)
 800afae:	2203      	movs	r2, #3
 800afb0:	701a      	strb	r2, [r3, #0]
  break;
 800afb2:	e008      	b.n	800afc6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800afb4:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <USBH_UserProcess+0x58>)
 800afb6:	2202      	movs	r2, #2
 800afb8:	701a      	strb	r2, [r3, #0]
  break;
 800afba:	e004      	b.n	800afc6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800afbc:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <USBH_UserProcess+0x58>)
 800afbe:	2201      	movs	r2, #1
 800afc0:	701a      	strb	r2, [r3, #0]
  break;
 800afc2:	e000      	b.n	800afc6 <USBH_UserProcess+0x4a>

  default:
  break;
 800afc4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800afc6:	bf00      	nop
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	200100ec 	.word	0x200100ec

0800afd8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afe0:	f107 0314 	add.w	r3, r7, #20
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	605a      	str	r2, [r3, #4]
 800afea:	609a      	str	r2, [r3, #8]
 800afec:	60da      	str	r2, [r3, #12]
 800afee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aff8:	d149      	bne.n	800b08e <HAL_HCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800affa:	4b27      	ldr	r3, [pc, #156]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	4a26      	ldr	r2, [pc, #152]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b000:	f043 0301 	orr.w	r3, r3, #1
 800b004:	6313      	str	r3, [r2, #48]	; 0x30
 800b006:	4b24      	ldr	r3, [pc, #144]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	613b      	str	r3, [r7, #16]
 800b010:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b012:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b018:	2302      	movs	r3, #2
 800b01a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b020:	2303      	movs	r3, #3
 800b022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b024:	230a      	movs	r3, #10
 800b026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b028:	f107 0314 	add.w	r3, r7, #20
 800b02c:	4619      	mov	r1, r3
 800b02e:	481b      	ldr	r0, [pc, #108]	; (800b09c <HAL_HCD_MspInit+0xc4>)
 800b030:	f7f6 fc86 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b03a:	2300      	movs	r3, #0
 800b03c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b042:	f107 0314 	add.w	r3, r7, #20
 800b046:	4619      	mov	r1, r3
 800b048:	4814      	ldr	r0, [pc, #80]	; (800b09c <HAL_HCD_MspInit+0xc4>)
 800b04a:	f7f6 fc79 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b04e:	4b12      	ldr	r3, [pc, #72]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b052:	4a11      	ldr	r2, [pc, #68]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b058:	6353      	str	r3, [r2, #52]	; 0x34
 800b05a:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06a:	4a0b      	ldr	r2, [pc, #44]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b06c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b070:	6453      	str	r3, [r2, #68]	; 0x44
 800b072:	4b09      	ldr	r3, [pc, #36]	; (800b098 <HAL_HCD_MspInit+0xc0>)
 800b074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b07a:	60bb      	str	r3, [r7, #8]
 800b07c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b07e:	2200      	movs	r2, #0
 800b080:	2100      	movs	r1, #0
 800b082:	2043      	movs	r0, #67	; 0x43
 800b084:	f7f6 f8b3 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b088:	2043      	movs	r0, #67	; 0x43
 800b08a:	f7f6 f8cc 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b08e:	bf00      	nop
 800b090:	3728      	adds	r7, #40	; 0x28
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	40023800 	.word	0x40023800
 800b09c:	40020000 	.word	0x40020000

0800b0a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fc fec3 	bl	8007e3a <USBH_LL_IncTimer>
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fc fefb 	bl	8007ec6 <USBH_LL_Connect>
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fc ff04 	bl	8007ef4 <USBH_LL_Disconnect>
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
 800b100:	4613      	mov	r3, r2
 800b102:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fc feb5 	bl	8007e8e <USBH_LL_PortEnabled>
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fc feb5 	bl	8007eaa <USBH_LL_PortDisabled>
}
 800b140:	bf00      	nop
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b156:	2b01      	cmp	r3, #1
 800b158:	d12a      	bne.n	800b1b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b15a:	4a18      	ldr	r2, [pc, #96]	; (800b1bc <USBH_LL_Init+0x74>)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a15      	ldr	r2, [pc, #84]	; (800b1bc <USBH_LL_Init+0x74>)
 800b166:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b16a:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <USBH_LL_Init+0x74>)
 800b16c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b170:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <USBH_LL_Init+0x74>)
 800b174:	2208      	movs	r2, #8
 800b176:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b178:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <USBH_LL_Init+0x74>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b17e:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <USBH_LL_Init+0x74>)
 800b180:	2200      	movs	r2, #0
 800b182:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <USBH_LL_Init+0x74>)
 800b186:	2202      	movs	r2, #2
 800b188:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <USBH_LL_Init+0x74>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b190:	480a      	ldr	r0, [pc, #40]	; (800b1bc <USBH_LL_Init+0x74>)
 800b192:	f7f6 fdbc 	bl	8001d0e <HAL_HCD_Init>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b19c:	f7f5 fd16 	bl	8000bcc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b1a0:	4806      	ldr	r0, [pc, #24]	; (800b1bc <USBH_LL_Init+0x74>)
 800b1a2:	f7f7 f9bf 	bl	8002524 <HAL_HCD_GetCurrentFrame>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7fc fe36 	bl	8007e1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200110c4 	.word	0x200110c4

0800b1c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7f7 f92c 	bl	8002434 <HAL_HCD_Start>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f990 	bl	800b508 <USBH_Get_USB_Status>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7f7 f934 	bl	800247a <HAL_HCD_Stop>
 800b212:	4603      	mov	r3, r0
 800b214:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 f975 	bl	800b508 <USBH_Get_USB_Status>
 800b21e:	4603      	mov	r3, r0
 800b220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b222:	7bbb      	ldrb	r3, [r7, #14]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b234:	2301      	movs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f7 f97e 	bl	8002540 <HAL_HCD_GetCurrentSpeed>
 800b244:	4603      	mov	r3, r0
 800b246:	2b01      	cmp	r3, #1
 800b248:	d007      	beq.n	800b25a <USBH_LL_GetSpeed+0x2e>
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d302      	bcc.n	800b254 <USBH_LL_GetSpeed+0x28>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d006      	beq.n	800b260 <USBH_LL_GetSpeed+0x34>
 800b252:	e008      	b.n	800b266 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
    break;
 800b258:	e008      	b.n	800b26c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b25a:	2301      	movs	r3, #1
 800b25c:	73fb      	strb	r3, [r7, #15]
    break;
 800b25e:	e005      	b.n	800b26c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b260:	2302      	movs	r3, #2
 800b262:	73fb      	strb	r3, [r7, #15]
    break;
 800b264:	e002      	b.n	800b26c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b266:	2301      	movs	r3, #1
 800b268:	73fb      	strb	r3, [r7, #15]
    break;
 800b26a:	bf00      	nop
  }
  return  speed;
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f7 f911 	bl	80024b4 <HAL_HCD_ResetPort>
 800b292:	4603      	mov	r3, r0
 800b294:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b296:	7bfb      	ldrb	r3, [r7, #15]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 f935 	bl	800b508 <USBH_Get_USB_Status>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2be:	78fa      	ldrb	r2, [r7, #3]
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7f7 f919 	bl	80024fa <HAL_HCD_HC_GetXferCount>
 800b2c8:	4603      	mov	r3, r0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2d2:	b590      	push	{r4, r7, lr}
 800b2d4:	b089      	sub	sp, #36	; 0x24
 800b2d6:	af04      	add	r7, sp, #16
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	4608      	mov	r0, r1
 800b2dc:	4611      	mov	r1, r2
 800b2de:	461a      	mov	r2, r3
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	70fb      	strb	r3, [r7, #3]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70bb      	strb	r3, [r7, #2]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b2fa:	787c      	ldrb	r4, [r7, #1]
 800b2fc:	78ba      	ldrb	r2, [r7, #2]
 800b2fe:	78f9      	ldrb	r1, [r7, #3]
 800b300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	4623      	mov	r3, r4
 800b312:	f7f6 fd5e 	bl	8001dd2 <HAL_HCD_HC_Init>
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 f8f3 	bl	800b508 <USBH_Get_USB_Status>
 800b322:	4603      	mov	r3, r0
 800b324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b326:	7bbb      	ldrb	r3, [r7, #14]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}

0800b330 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b34a:	78fa      	ldrb	r2, [r7, #3]
 800b34c:	4611      	mov	r1, r2
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f6 fdd7 	bl	8001f02 <HAL_HCD_HC_Halt>
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b358:	7bfb      	ldrb	r3, [r7, #15]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f8d4 	bl	800b508 <USBH_Get_USB_Status>
 800b360:	4603      	mov	r3, r0
 800b362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b364:	7bbb      	ldrb	r3, [r7, #14]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b36e:	b590      	push	{r4, r7, lr}
 800b370:	b089      	sub	sp, #36	; 0x24
 800b372:	af04      	add	r7, sp, #16
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	4608      	mov	r0, r1
 800b378:	4611      	mov	r1, r2
 800b37a:	461a      	mov	r2, r3
 800b37c:	4603      	mov	r3, r0
 800b37e:	70fb      	strb	r3, [r7, #3]
 800b380:	460b      	mov	r3, r1
 800b382:	70bb      	strb	r3, [r7, #2]
 800b384:	4613      	mov	r3, r2
 800b386:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b396:	787c      	ldrb	r4, [r7, #1]
 800b398:	78ba      	ldrb	r2, [r7, #2]
 800b39a:	78f9      	ldrb	r1, [r7, #3]
 800b39c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3a0:	9303      	str	r3, [sp, #12]
 800b3a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3a4:	9302      	str	r3, [sp, #8]
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	4623      	mov	r3, r4
 800b3b2:	f7f6 fdc9 	bl	8001f48 <HAL_HCD_HC_SubmitRequest>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 f8a3 	bl	800b508 <USBH_Get_USB_Status>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd90      	pop	{r4, r7, pc}

0800b3d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3e2:	78fa      	ldrb	r2, [r7, #3]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7f7 f872 	bl	80024d0 <HAL_HCD_HC_GetURBState>
 800b3ec:	4603      	mov	r3, r0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d103      	bne.n	800b414 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b40c:	78fb      	ldrb	r3, [r7, #3]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f8a6 	bl	800b560 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b414:	20c8      	movs	r0, #200	; 0xc8
 800b416:	f7f5 fded 	bl	8000ff4 <HAL_Delay>
  return USBH_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
 800b430:	4613      	mov	r3, r2
 800b432:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b43a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b43c:	78fa      	ldrb	r2, [r7, #3]
 800b43e:	68f9      	ldr	r1, [r7, #12]
 800b440:	4613      	mov	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	440b      	add	r3, r1
 800b44a:	333b      	adds	r3, #59	; 0x3b
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00a      	beq.n	800b468 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b452:	78fa      	ldrb	r2, [r7, #3]
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	4613      	mov	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	440b      	add	r3, r1
 800b460:	3350      	adds	r3, #80	; 0x50
 800b462:	78ba      	ldrb	r2, [r7, #2]
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	e009      	b.n	800b47c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b468:	78fa      	ldrb	r2, [r7, #3]
 800b46a:	68f9      	ldr	r1, [r7, #12]
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	440b      	add	r3, r1
 800b476:	3351      	adds	r3, #81	; 0x51
 800b478:	78ba      	ldrb	r2, [r7, #2]
 800b47a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4a0:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b4a2:	78fa      	ldrb	r2, [r7, #3]
 800b4a4:	68b9      	ldr	r1, [r7, #8]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	440b      	add	r3, r1
 800b4b0:	333b      	adds	r3, #59	; 0x3b
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b4b8:	78fa      	ldrb	r2, [r7, #3]
 800b4ba:	68b9      	ldr	r1, [r7, #8]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	440b      	add	r3, r1
 800b4c6:	3350      	adds	r3, #80	; 0x50
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	73fb      	strb	r3, [r7, #15]
 800b4cc:	e009      	b.n	800b4e2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b4ce:	78fa      	ldrb	r2, [r7, #3]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	440b      	add	r3, r1
 800b4dc:	3351      	adds	r3, #81	; 0x51
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7f5 fd7b 	bl	8000ff4 <HAL_Delay>
}
 800b4fe:	bf00      	nop
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d817      	bhi.n	800b54c <USBH_Get_USB_Status+0x44>
 800b51c:	a201      	add	r2, pc, #4	; (adr r2, 800b524 <USBH_Get_USB_Status+0x1c>)
 800b51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b522:	bf00      	nop
 800b524:	0800b535 	.word	0x0800b535
 800b528:	0800b53b 	.word	0x0800b53b
 800b52c:	0800b541 	.word	0x0800b541
 800b530:	0800b547 	.word	0x0800b547
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	73fb      	strb	r3, [r7, #15]
    break;
 800b538:	e00b      	b.n	800b552 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b53a:	2302      	movs	r3, #2
 800b53c:	73fb      	strb	r3, [r7, #15]
    break;
 800b53e:	e008      	b.n	800b552 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b540:	2301      	movs	r3, #1
 800b542:	73fb      	strb	r3, [r7, #15]
    break;
 800b544:	e005      	b.n	800b552 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b546:	2302      	movs	r3, #2
 800b548:	73fb      	strb	r3, [r7, #15]
    break;
 800b54a:	e002      	b.n	800b552 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b54c:	2302      	movs	r3, #2
 800b54e:	73fb      	strb	r3, [r7, #15]
    break;
 800b550:	bf00      	nop
  }
  return usb_status;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
 // HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
}
 800b578:	e001      	b.n	800b57e <MX_DriverVbusFS+0x1e>
    data = GPIO_PIN_RESET;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]
}
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
	...

0800b58c <__errno>:
 800b58c:	4b01      	ldr	r3, [pc, #4]	; (800b594 <__errno+0x8>)
 800b58e:	6818      	ldr	r0, [r3, #0]
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	2000002c 	.word	0x2000002c

0800b598 <__libc_init_array>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	4e0d      	ldr	r6, [pc, #52]	; (800b5d0 <__libc_init_array+0x38>)
 800b59c:	4c0d      	ldr	r4, [pc, #52]	; (800b5d4 <__libc_init_array+0x3c>)
 800b59e:	1ba4      	subs	r4, r4, r6
 800b5a0:	10a4      	asrs	r4, r4, #2
 800b5a2:	2500      	movs	r5, #0
 800b5a4:	42a5      	cmp	r5, r4
 800b5a6:	d109      	bne.n	800b5bc <__libc_init_array+0x24>
 800b5a8:	4e0b      	ldr	r6, [pc, #44]	; (800b5d8 <__libc_init_array+0x40>)
 800b5aa:	4c0c      	ldr	r4, [pc, #48]	; (800b5dc <__libc_init_array+0x44>)
 800b5ac:	f000 ff84 	bl	800c4b8 <_init>
 800b5b0:	1ba4      	subs	r4, r4, r6
 800b5b2:	10a4      	asrs	r4, r4, #2
 800b5b4:	2500      	movs	r5, #0
 800b5b6:	42a5      	cmp	r5, r4
 800b5b8:	d105      	bne.n	800b5c6 <__libc_init_array+0x2e>
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5c0:	4798      	blx	r3
 800b5c2:	3501      	adds	r5, #1
 800b5c4:	e7ee      	b.n	800b5a4 <__libc_init_array+0xc>
 800b5c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5ca:	4798      	blx	r3
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	e7f2      	b.n	800b5b6 <__libc_init_array+0x1e>
 800b5d0:	0800c850 	.word	0x0800c850
 800b5d4:	0800c850 	.word	0x0800c850
 800b5d8:	0800c850 	.word	0x0800c850
 800b5dc:	0800c854 	.word	0x0800c854

0800b5e0 <malloc>:
 800b5e0:	4b02      	ldr	r3, [pc, #8]	; (800b5ec <malloc+0xc>)
 800b5e2:	4601      	mov	r1, r0
 800b5e4:	6818      	ldr	r0, [r3, #0]
 800b5e6:	f000 b86d 	b.w	800b6c4 <_malloc_r>
 800b5ea:	bf00      	nop
 800b5ec:	2000002c 	.word	0x2000002c

0800b5f0 <free>:
 800b5f0:	4b02      	ldr	r3, [pc, #8]	; (800b5fc <free+0xc>)
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	f000 b817 	b.w	800b628 <_free_r>
 800b5fa:	bf00      	nop
 800b5fc:	2000002c 	.word	0x2000002c

0800b600 <memcpy>:
 800b600:	b510      	push	{r4, lr}
 800b602:	1e43      	subs	r3, r0, #1
 800b604:	440a      	add	r2, r1
 800b606:	4291      	cmp	r1, r2
 800b608:	d100      	bne.n	800b60c <memcpy+0xc>
 800b60a:	bd10      	pop	{r4, pc}
 800b60c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b610:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b614:	e7f7      	b.n	800b606 <memcpy+0x6>

0800b616 <memset>:
 800b616:	4402      	add	r2, r0
 800b618:	4603      	mov	r3, r0
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d100      	bne.n	800b620 <memset+0xa>
 800b61e:	4770      	bx	lr
 800b620:	f803 1b01 	strb.w	r1, [r3], #1
 800b624:	e7f9      	b.n	800b61a <memset+0x4>
	...

0800b628 <_free_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4605      	mov	r5, r0
 800b62c:	2900      	cmp	r1, #0
 800b62e:	d045      	beq.n	800b6bc <_free_r+0x94>
 800b630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b634:	1f0c      	subs	r4, r1, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb8      	it	lt
 800b63a:	18e4      	addlt	r4, r4, r3
 800b63c:	f000 fbc6 	bl	800bdcc <__malloc_lock>
 800b640:	4a1f      	ldr	r2, [pc, #124]	; (800b6c0 <_free_r+0x98>)
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	4610      	mov	r0, r2
 800b646:	b933      	cbnz	r3, 800b656 <_free_r+0x2e>
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	6014      	str	r4, [r2, #0]
 800b64c:	4628      	mov	r0, r5
 800b64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b652:	f000 bbbc 	b.w	800bdce <__malloc_unlock>
 800b656:	42a3      	cmp	r3, r4
 800b658:	d90c      	bls.n	800b674 <_free_r+0x4c>
 800b65a:	6821      	ldr	r1, [r4, #0]
 800b65c:	1862      	adds	r2, r4, r1
 800b65e:	4293      	cmp	r3, r2
 800b660:	bf04      	itt	eq
 800b662:	681a      	ldreq	r2, [r3, #0]
 800b664:	685b      	ldreq	r3, [r3, #4]
 800b666:	6063      	str	r3, [r4, #4]
 800b668:	bf04      	itt	eq
 800b66a:	1852      	addeq	r2, r2, r1
 800b66c:	6022      	streq	r2, [r4, #0]
 800b66e:	6004      	str	r4, [r0, #0]
 800b670:	e7ec      	b.n	800b64c <_free_r+0x24>
 800b672:	4613      	mov	r3, r2
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	b10a      	cbz	r2, 800b67c <_free_r+0x54>
 800b678:	42a2      	cmp	r2, r4
 800b67a:	d9fa      	bls.n	800b672 <_free_r+0x4a>
 800b67c:	6819      	ldr	r1, [r3, #0]
 800b67e:	1858      	adds	r0, r3, r1
 800b680:	42a0      	cmp	r0, r4
 800b682:	d10b      	bne.n	800b69c <_free_r+0x74>
 800b684:	6820      	ldr	r0, [r4, #0]
 800b686:	4401      	add	r1, r0
 800b688:	1858      	adds	r0, r3, r1
 800b68a:	4282      	cmp	r2, r0
 800b68c:	6019      	str	r1, [r3, #0]
 800b68e:	d1dd      	bne.n	800b64c <_free_r+0x24>
 800b690:	6810      	ldr	r0, [r2, #0]
 800b692:	6852      	ldr	r2, [r2, #4]
 800b694:	605a      	str	r2, [r3, #4]
 800b696:	4401      	add	r1, r0
 800b698:	6019      	str	r1, [r3, #0]
 800b69a:	e7d7      	b.n	800b64c <_free_r+0x24>
 800b69c:	d902      	bls.n	800b6a4 <_free_r+0x7c>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	e7d3      	b.n	800b64c <_free_r+0x24>
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	1821      	adds	r1, r4, r0
 800b6a8:	428a      	cmp	r2, r1
 800b6aa:	bf04      	itt	eq
 800b6ac:	6811      	ldreq	r1, [r2, #0]
 800b6ae:	6852      	ldreq	r2, [r2, #4]
 800b6b0:	6062      	str	r2, [r4, #4]
 800b6b2:	bf04      	itt	eq
 800b6b4:	1809      	addeq	r1, r1, r0
 800b6b6:	6021      	streq	r1, [r4, #0]
 800b6b8:	605c      	str	r4, [r3, #4]
 800b6ba:	e7c7      	b.n	800b64c <_free_r+0x24>
 800b6bc:	bd38      	pop	{r3, r4, r5, pc}
 800b6be:	bf00      	nop
 800b6c0:	200100f0 	.word	0x200100f0

0800b6c4 <_malloc_r>:
 800b6c4:	b570      	push	{r4, r5, r6, lr}
 800b6c6:	1ccd      	adds	r5, r1, #3
 800b6c8:	f025 0503 	bic.w	r5, r5, #3
 800b6cc:	3508      	adds	r5, #8
 800b6ce:	2d0c      	cmp	r5, #12
 800b6d0:	bf38      	it	cc
 800b6d2:	250c      	movcc	r5, #12
 800b6d4:	2d00      	cmp	r5, #0
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	db01      	blt.n	800b6de <_malloc_r+0x1a>
 800b6da:	42a9      	cmp	r1, r5
 800b6dc:	d903      	bls.n	800b6e6 <_malloc_r+0x22>
 800b6de:	230c      	movs	r3, #12
 800b6e0:	6033      	str	r3, [r6, #0]
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	f000 fb71 	bl	800bdcc <__malloc_lock>
 800b6ea:	4a21      	ldr	r2, [pc, #132]	; (800b770 <_malloc_r+0xac>)
 800b6ec:	6814      	ldr	r4, [r2, #0]
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	b991      	cbnz	r1, 800b718 <_malloc_r+0x54>
 800b6f2:	4c20      	ldr	r4, [pc, #128]	; (800b774 <_malloc_r+0xb0>)
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	b91b      	cbnz	r3, 800b700 <_malloc_r+0x3c>
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f8b9 	bl	800b870 <_sbrk_r>
 800b6fe:	6020      	str	r0, [r4, #0]
 800b700:	4629      	mov	r1, r5
 800b702:	4630      	mov	r0, r6
 800b704:	f000 f8b4 	bl	800b870 <_sbrk_r>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d124      	bne.n	800b756 <_malloc_r+0x92>
 800b70c:	230c      	movs	r3, #12
 800b70e:	6033      	str	r3, [r6, #0]
 800b710:	4630      	mov	r0, r6
 800b712:	f000 fb5c 	bl	800bdce <__malloc_unlock>
 800b716:	e7e4      	b.n	800b6e2 <_malloc_r+0x1e>
 800b718:	680b      	ldr	r3, [r1, #0]
 800b71a:	1b5b      	subs	r3, r3, r5
 800b71c:	d418      	bmi.n	800b750 <_malloc_r+0x8c>
 800b71e:	2b0b      	cmp	r3, #11
 800b720:	d90f      	bls.n	800b742 <_malloc_r+0x7e>
 800b722:	600b      	str	r3, [r1, #0]
 800b724:	50cd      	str	r5, [r1, r3]
 800b726:	18cc      	adds	r4, r1, r3
 800b728:	4630      	mov	r0, r6
 800b72a:	f000 fb50 	bl	800bdce <__malloc_unlock>
 800b72e:	f104 000b 	add.w	r0, r4, #11
 800b732:	1d23      	adds	r3, r4, #4
 800b734:	f020 0007 	bic.w	r0, r0, #7
 800b738:	1ac3      	subs	r3, r0, r3
 800b73a:	d0d3      	beq.n	800b6e4 <_malloc_r+0x20>
 800b73c:	425a      	negs	r2, r3
 800b73e:	50e2      	str	r2, [r4, r3]
 800b740:	e7d0      	b.n	800b6e4 <_malloc_r+0x20>
 800b742:	428c      	cmp	r4, r1
 800b744:	684b      	ldr	r3, [r1, #4]
 800b746:	bf16      	itet	ne
 800b748:	6063      	strne	r3, [r4, #4]
 800b74a:	6013      	streq	r3, [r2, #0]
 800b74c:	460c      	movne	r4, r1
 800b74e:	e7eb      	b.n	800b728 <_malloc_r+0x64>
 800b750:	460c      	mov	r4, r1
 800b752:	6849      	ldr	r1, [r1, #4]
 800b754:	e7cc      	b.n	800b6f0 <_malloc_r+0x2c>
 800b756:	1cc4      	adds	r4, r0, #3
 800b758:	f024 0403 	bic.w	r4, r4, #3
 800b75c:	42a0      	cmp	r0, r4
 800b75e:	d005      	beq.n	800b76c <_malloc_r+0xa8>
 800b760:	1a21      	subs	r1, r4, r0
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f884 	bl	800b870 <_sbrk_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	d0cf      	beq.n	800b70c <_malloc_r+0x48>
 800b76c:	6025      	str	r5, [r4, #0]
 800b76e:	e7db      	b.n	800b728 <_malloc_r+0x64>
 800b770:	200100f0 	.word	0x200100f0
 800b774:	200100f4 	.word	0x200100f4

0800b778 <iprintf>:
 800b778:	b40f      	push	{r0, r1, r2, r3}
 800b77a:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <iprintf+0x2c>)
 800b77c:	b513      	push	{r0, r1, r4, lr}
 800b77e:	681c      	ldr	r4, [r3, #0]
 800b780:	b124      	cbz	r4, 800b78c <iprintf+0x14>
 800b782:	69a3      	ldr	r3, [r4, #24]
 800b784:	b913      	cbnz	r3, 800b78c <iprintf+0x14>
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fa32 	bl	800bbf0 <__sinit>
 800b78c:	ab05      	add	r3, sp, #20
 800b78e:	9a04      	ldr	r2, [sp, #16]
 800b790:	68a1      	ldr	r1, [r4, #8]
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	4620      	mov	r0, r4
 800b796:	f000 fb45 	bl	800be24 <_vfiprintf_r>
 800b79a:	b002      	add	sp, #8
 800b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a0:	b004      	add	sp, #16
 800b7a2:	4770      	bx	lr
 800b7a4:	2000002c 	.word	0x2000002c

0800b7a8 <_puts_r>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	460e      	mov	r6, r1
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	b118      	cbz	r0, 800b7b8 <_puts_r+0x10>
 800b7b0:	6983      	ldr	r3, [r0, #24]
 800b7b2:	b90b      	cbnz	r3, 800b7b8 <_puts_r+0x10>
 800b7b4:	f000 fa1c 	bl	800bbf0 <__sinit>
 800b7b8:	69ab      	ldr	r3, [r5, #24]
 800b7ba:	68ac      	ldr	r4, [r5, #8]
 800b7bc:	b913      	cbnz	r3, 800b7c4 <_puts_r+0x1c>
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 fa16 	bl	800bbf0 <__sinit>
 800b7c4:	4b23      	ldr	r3, [pc, #140]	; (800b854 <_puts_r+0xac>)
 800b7c6:	429c      	cmp	r4, r3
 800b7c8:	d117      	bne.n	800b7fa <_puts_r+0x52>
 800b7ca:	686c      	ldr	r4, [r5, #4]
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	071b      	lsls	r3, r3, #28
 800b7d0:	d51d      	bpl.n	800b80e <_puts_r+0x66>
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	b1db      	cbz	r3, 800b80e <_puts_r+0x66>
 800b7d6:	3e01      	subs	r6, #1
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	60a3      	str	r3, [r4, #8]
 800b7e2:	b9e9      	cbnz	r1, 800b820 <_puts_r+0x78>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	da2e      	bge.n	800b846 <_puts_r+0x9e>
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	210a      	movs	r1, #10
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f000 f84f 	bl	800b890 <__swbuf_r>
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	d011      	beq.n	800b81a <_puts_r+0x72>
 800b7f6:	200a      	movs	r0, #10
 800b7f8:	e011      	b.n	800b81e <_puts_r+0x76>
 800b7fa:	4b17      	ldr	r3, [pc, #92]	; (800b858 <_puts_r+0xb0>)
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	d101      	bne.n	800b804 <_puts_r+0x5c>
 800b800:	68ac      	ldr	r4, [r5, #8]
 800b802:	e7e3      	b.n	800b7cc <_puts_r+0x24>
 800b804:	4b15      	ldr	r3, [pc, #84]	; (800b85c <_puts_r+0xb4>)
 800b806:	429c      	cmp	r4, r3
 800b808:	bf08      	it	eq
 800b80a:	68ec      	ldreq	r4, [r5, #12]
 800b80c:	e7de      	b.n	800b7cc <_puts_r+0x24>
 800b80e:	4621      	mov	r1, r4
 800b810:	4628      	mov	r0, r5
 800b812:	f000 f88f 	bl	800b934 <__swsetup_r>
 800b816:	2800      	cmp	r0, #0
 800b818:	d0dd      	beq.n	800b7d6 <_puts_r+0x2e>
 800b81a:	f04f 30ff 	mov.w	r0, #4294967295
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	2b00      	cmp	r3, #0
 800b822:	da04      	bge.n	800b82e <_puts_r+0x86>
 800b824:	69a2      	ldr	r2, [r4, #24]
 800b826:	429a      	cmp	r2, r3
 800b828:	dc06      	bgt.n	800b838 <_puts_r+0x90>
 800b82a:	290a      	cmp	r1, #10
 800b82c:	d004      	beq.n	800b838 <_puts_r+0x90>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	6022      	str	r2, [r4, #0]
 800b834:	7019      	strb	r1, [r3, #0]
 800b836:	e7cf      	b.n	800b7d8 <_puts_r+0x30>
 800b838:	4622      	mov	r2, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 f828 	bl	800b890 <__swbuf_r>
 800b840:	3001      	adds	r0, #1
 800b842:	d1c9      	bne.n	800b7d8 <_puts_r+0x30>
 800b844:	e7e9      	b.n	800b81a <_puts_r+0x72>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	200a      	movs	r0, #10
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	6022      	str	r2, [r4, #0]
 800b84e:	7018      	strb	r0, [r3, #0]
 800b850:	e7e5      	b.n	800b81e <_puts_r+0x76>
 800b852:	bf00      	nop
 800b854:	0800c7d4 	.word	0x0800c7d4
 800b858:	0800c7f4 	.word	0x0800c7f4
 800b85c:	0800c7b4 	.word	0x0800c7b4

0800b860 <puts>:
 800b860:	4b02      	ldr	r3, [pc, #8]	; (800b86c <puts+0xc>)
 800b862:	4601      	mov	r1, r0
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	f7ff bf9f 	b.w	800b7a8 <_puts_r>
 800b86a:	bf00      	nop
 800b86c:	2000002c 	.word	0x2000002c

0800b870 <_sbrk_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4c06      	ldr	r4, [pc, #24]	; (800b88c <_sbrk_r+0x1c>)
 800b874:	2300      	movs	r3, #0
 800b876:	4605      	mov	r5, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	f7f5 fae8 	bl	8000e50 <_sbrk>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_sbrk_r+0x1a>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	b103      	cbz	r3, 800b88a <_sbrk_r+0x1a>
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20011388 	.word	0x20011388

0800b890 <__swbuf_r>:
 800b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b892:	460e      	mov	r6, r1
 800b894:	4614      	mov	r4, r2
 800b896:	4605      	mov	r5, r0
 800b898:	b118      	cbz	r0, 800b8a2 <__swbuf_r+0x12>
 800b89a:	6983      	ldr	r3, [r0, #24]
 800b89c:	b90b      	cbnz	r3, 800b8a2 <__swbuf_r+0x12>
 800b89e:	f000 f9a7 	bl	800bbf0 <__sinit>
 800b8a2:	4b21      	ldr	r3, [pc, #132]	; (800b928 <__swbuf_r+0x98>)
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	d12a      	bne.n	800b8fe <__swbuf_r+0x6e>
 800b8a8:	686c      	ldr	r4, [r5, #4]
 800b8aa:	69a3      	ldr	r3, [r4, #24]
 800b8ac:	60a3      	str	r3, [r4, #8]
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	071a      	lsls	r2, r3, #28
 800b8b2:	d52e      	bpl.n	800b912 <__swbuf_r+0x82>
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	b363      	cbz	r3, 800b912 <__swbuf_r+0x82>
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	6820      	ldr	r0, [r4, #0]
 800b8bc:	1ac0      	subs	r0, r0, r3
 800b8be:	6963      	ldr	r3, [r4, #20]
 800b8c0:	b2f6      	uxtb	r6, r6
 800b8c2:	4283      	cmp	r3, r0
 800b8c4:	4637      	mov	r7, r6
 800b8c6:	dc04      	bgt.n	800b8d2 <__swbuf_r+0x42>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f000 f926 	bl	800bb1c <_fflush_r>
 800b8d0:	bb28      	cbnz	r0, 800b91e <__swbuf_r+0x8e>
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	60a3      	str	r3, [r4, #8]
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	6022      	str	r2, [r4, #0]
 800b8de:	701e      	strb	r6, [r3, #0]
 800b8e0:	6963      	ldr	r3, [r4, #20]
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	4283      	cmp	r3, r0
 800b8e6:	d004      	beq.n	800b8f2 <__swbuf_r+0x62>
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	07db      	lsls	r3, r3, #31
 800b8ec:	d519      	bpl.n	800b922 <__swbuf_r+0x92>
 800b8ee:	2e0a      	cmp	r6, #10
 800b8f0:	d117      	bne.n	800b922 <__swbuf_r+0x92>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f000 f911 	bl	800bb1c <_fflush_r>
 800b8fa:	b190      	cbz	r0, 800b922 <__swbuf_r+0x92>
 800b8fc:	e00f      	b.n	800b91e <__swbuf_r+0x8e>
 800b8fe:	4b0b      	ldr	r3, [pc, #44]	; (800b92c <__swbuf_r+0x9c>)
 800b900:	429c      	cmp	r4, r3
 800b902:	d101      	bne.n	800b908 <__swbuf_r+0x78>
 800b904:	68ac      	ldr	r4, [r5, #8]
 800b906:	e7d0      	b.n	800b8aa <__swbuf_r+0x1a>
 800b908:	4b09      	ldr	r3, [pc, #36]	; (800b930 <__swbuf_r+0xa0>)
 800b90a:	429c      	cmp	r4, r3
 800b90c:	bf08      	it	eq
 800b90e:	68ec      	ldreq	r4, [r5, #12]
 800b910:	e7cb      	b.n	800b8aa <__swbuf_r+0x1a>
 800b912:	4621      	mov	r1, r4
 800b914:	4628      	mov	r0, r5
 800b916:	f000 f80d 	bl	800b934 <__swsetup_r>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d0cc      	beq.n	800b8b8 <__swbuf_r+0x28>
 800b91e:	f04f 37ff 	mov.w	r7, #4294967295
 800b922:	4638      	mov	r0, r7
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b926:	bf00      	nop
 800b928:	0800c7d4 	.word	0x0800c7d4
 800b92c:	0800c7f4 	.word	0x0800c7f4
 800b930:	0800c7b4 	.word	0x0800c7b4

0800b934 <__swsetup_r>:
 800b934:	4b32      	ldr	r3, [pc, #200]	; (800ba00 <__swsetup_r+0xcc>)
 800b936:	b570      	push	{r4, r5, r6, lr}
 800b938:	681d      	ldr	r5, [r3, #0]
 800b93a:	4606      	mov	r6, r0
 800b93c:	460c      	mov	r4, r1
 800b93e:	b125      	cbz	r5, 800b94a <__swsetup_r+0x16>
 800b940:	69ab      	ldr	r3, [r5, #24]
 800b942:	b913      	cbnz	r3, 800b94a <__swsetup_r+0x16>
 800b944:	4628      	mov	r0, r5
 800b946:	f000 f953 	bl	800bbf0 <__sinit>
 800b94a:	4b2e      	ldr	r3, [pc, #184]	; (800ba04 <__swsetup_r+0xd0>)
 800b94c:	429c      	cmp	r4, r3
 800b94e:	d10f      	bne.n	800b970 <__swsetup_r+0x3c>
 800b950:	686c      	ldr	r4, [r5, #4]
 800b952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b956:	b29a      	uxth	r2, r3
 800b958:	0715      	lsls	r5, r2, #28
 800b95a:	d42c      	bmi.n	800b9b6 <__swsetup_r+0x82>
 800b95c:	06d0      	lsls	r0, r2, #27
 800b95e:	d411      	bmi.n	800b984 <__swsetup_r+0x50>
 800b960:	2209      	movs	r2, #9
 800b962:	6032      	str	r2, [r6, #0]
 800b964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295
 800b96e:	e03e      	b.n	800b9ee <__swsetup_r+0xba>
 800b970:	4b25      	ldr	r3, [pc, #148]	; (800ba08 <__swsetup_r+0xd4>)
 800b972:	429c      	cmp	r4, r3
 800b974:	d101      	bne.n	800b97a <__swsetup_r+0x46>
 800b976:	68ac      	ldr	r4, [r5, #8]
 800b978:	e7eb      	b.n	800b952 <__swsetup_r+0x1e>
 800b97a:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <__swsetup_r+0xd8>)
 800b97c:	429c      	cmp	r4, r3
 800b97e:	bf08      	it	eq
 800b980:	68ec      	ldreq	r4, [r5, #12]
 800b982:	e7e6      	b.n	800b952 <__swsetup_r+0x1e>
 800b984:	0751      	lsls	r1, r2, #29
 800b986:	d512      	bpl.n	800b9ae <__swsetup_r+0x7a>
 800b988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b98a:	b141      	cbz	r1, 800b99e <__swsetup_r+0x6a>
 800b98c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b990:	4299      	cmp	r1, r3
 800b992:	d002      	beq.n	800b99a <__swsetup_r+0x66>
 800b994:	4630      	mov	r0, r6
 800b996:	f7ff fe47 	bl	800b628 <_free_r>
 800b99a:	2300      	movs	r3, #0
 800b99c:	6363      	str	r3, [r4, #52]	; 0x34
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	6923      	ldr	r3, [r4, #16]
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	f043 0308 	orr.w	r3, r3, #8
 800b9b4:	81a3      	strh	r3, [r4, #12]
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	b94b      	cbnz	r3, 800b9ce <__swsetup_r+0x9a>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9c4:	d003      	beq.n	800b9ce <__swsetup_r+0x9a>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f000 f9bf 	bl	800bd4c <__smakebuf_r>
 800b9ce:	89a2      	ldrh	r2, [r4, #12]
 800b9d0:	f012 0301 	ands.w	r3, r2, #1
 800b9d4:	d00c      	beq.n	800b9f0 <__swsetup_r+0xbc>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60a3      	str	r3, [r4, #8]
 800b9da:	6963      	ldr	r3, [r4, #20]
 800b9dc:	425b      	negs	r3, r3
 800b9de:	61a3      	str	r3, [r4, #24]
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	b953      	cbnz	r3, 800b9fa <__swsetup_r+0xc6>
 800b9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b9ec:	d1ba      	bne.n	800b964 <__swsetup_r+0x30>
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	0792      	lsls	r2, r2, #30
 800b9f2:	bf58      	it	pl
 800b9f4:	6963      	ldrpl	r3, [r4, #20]
 800b9f6:	60a3      	str	r3, [r4, #8]
 800b9f8:	e7f2      	b.n	800b9e0 <__swsetup_r+0xac>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e7f7      	b.n	800b9ee <__swsetup_r+0xba>
 800b9fe:	bf00      	nop
 800ba00:	2000002c 	.word	0x2000002c
 800ba04:	0800c7d4 	.word	0x0800c7d4
 800ba08:	0800c7f4 	.word	0x0800c7f4
 800ba0c:	0800c7b4 	.word	0x0800c7b4

0800ba10 <__sflush_r>:
 800ba10:	898a      	ldrh	r2, [r1, #12]
 800ba12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba16:	4605      	mov	r5, r0
 800ba18:	0710      	lsls	r0, r2, #28
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	d458      	bmi.n	800bad0 <__sflush_r+0xc0>
 800ba1e:	684b      	ldr	r3, [r1, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc05      	bgt.n	800ba30 <__sflush_r+0x20>
 800ba24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dc02      	bgt.n	800ba30 <__sflush_r+0x20>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba32:	2e00      	cmp	r6, #0
 800ba34:	d0f9      	beq.n	800ba2a <__sflush_r+0x1a>
 800ba36:	2300      	movs	r3, #0
 800ba38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba3c:	682f      	ldr	r7, [r5, #0]
 800ba3e:	6a21      	ldr	r1, [r4, #32]
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	d032      	beq.n	800baaa <__sflush_r+0x9a>
 800ba44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	075a      	lsls	r2, r3, #29
 800ba4a:	d505      	bpl.n	800ba58 <__sflush_r+0x48>
 800ba4c:	6863      	ldr	r3, [r4, #4]
 800ba4e:	1ac0      	subs	r0, r0, r3
 800ba50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba52:	b10b      	cbz	r3, 800ba58 <__sflush_r+0x48>
 800ba54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba56:	1ac0      	subs	r0, r0, r3
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba5e:	6a21      	ldr	r1, [r4, #32]
 800ba60:	4628      	mov	r0, r5
 800ba62:	47b0      	blx	r6
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	d106      	bne.n	800ba78 <__sflush_r+0x68>
 800ba6a:	6829      	ldr	r1, [r5, #0]
 800ba6c:	291d      	cmp	r1, #29
 800ba6e:	d848      	bhi.n	800bb02 <__sflush_r+0xf2>
 800ba70:	4a29      	ldr	r2, [pc, #164]	; (800bb18 <__sflush_r+0x108>)
 800ba72:	40ca      	lsrs	r2, r1
 800ba74:	07d6      	lsls	r6, r2, #31
 800ba76:	d544      	bpl.n	800bb02 <__sflush_r+0xf2>
 800ba78:	2200      	movs	r2, #0
 800ba7a:	6062      	str	r2, [r4, #4]
 800ba7c:	04d9      	lsls	r1, r3, #19
 800ba7e:	6922      	ldr	r2, [r4, #16]
 800ba80:	6022      	str	r2, [r4, #0]
 800ba82:	d504      	bpl.n	800ba8e <__sflush_r+0x7e>
 800ba84:	1c42      	adds	r2, r0, #1
 800ba86:	d101      	bne.n	800ba8c <__sflush_r+0x7c>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b903      	cbnz	r3, 800ba8e <__sflush_r+0x7e>
 800ba8c:	6560      	str	r0, [r4, #84]	; 0x54
 800ba8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba90:	602f      	str	r7, [r5, #0]
 800ba92:	2900      	cmp	r1, #0
 800ba94:	d0c9      	beq.n	800ba2a <__sflush_r+0x1a>
 800ba96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba9a:	4299      	cmp	r1, r3
 800ba9c:	d002      	beq.n	800baa4 <__sflush_r+0x94>
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f7ff fdc2 	bl	800b628 <_free_r>
 800baa4:	2000      	movs	r0, #0
 800baa6:	6360      	str	r0, [r4, #52]	; 0x34
 800baa8:	e7c0      	b.n	800ba2c <__sflush_r+0x1c>
 800baaa:	2301      	movs	r3, #1
 800baac:	4628      	mov	r0, r5
 800baae:	47b0      	blx	r6
 800bab0:	1c41      	adds	r1, r0, #1
 800bab2:	d1c8      	bne.n	800ba46 <__sflush_r+0x36>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0c5      	beq.n	800ba46 <__sflush_r+0x36>
 800baba:	2b1d      	cmp	r3, #29
 800babc:	d001      	beq.n	800bac2 <__sflush_r+0xb2>
 800babe:	2b16      	cmp	r3, #22
 800bac0:	d101      	bne.n	800bac6 <__sflush_r+0xb6>
 800bac2:	602f      	str	r7, [r5, #0]
 800bac4:	e7b1      	b.n	800ba2a <__sflush_r+0x1a>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	e7ad      	b.n	800ba2c <__sflush_r+0x1c>
 800bad0:	690f      	ldr	r7, [r1, #16]
 800bad2:	2f00      	cmp	r7, #0
 800bad4:	d0a9      	beq.n	800ba2a <__sflush_r+0x1a>
 800bad6:	0793      	lsls	r3, r2, #30
 800bad8:	680e      	ldr	r6, [r1, #0]
 800bada:	bf08      	it	eq
 800badc:	694b      	ldreq	r3, [r1, #20]
 800bade:	600f      	str	r7, [r1, #0]
 800bae0:	bf18      	it	ne
 800bae2:	2300      	movne	r3, #0
 800bae4:	eba6 0807 	sub.w	r8, r6, r7
 800bae8:	608b      	str	r3, [r1, #8]
 800baea:	f1b8 0f00 	cmp.w	r8, #0
 800baee:	dd9c      	ble.n	800ba2a <__sflush_r+0x1a>
 800baf0:	4643      	mov	r3, r8
 800baf2:	463a      	mov	r2, r7
 800baf4:	6a21      	ldr	r1, [r4, #32]
 800baf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baf8:	4628      	mov	r0, r5
 800bafa:	47b0      	blx	r6
 800bafc:	2800      	cmp	r0, #0
 800bafe:	dc06      	bgt.n	800bb0e <__sflush_r+0xfe>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb06:	81a3      	strh	r3, [r4, #12]
 800bb08:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0c:	e78e      	b.n	800ba2c <__sflush_r+0x1c>
 800bb0e:	4407      	add	r7, r0
 800bb10:	eba8 0800 	sub.w	r8, r8, r0
 800bb14:	e7e9      	b.n	800baea <__sflush_r+0xda>
 800bb16:	bf00      	nop
 800bb18:	20400001 	.word	0x20400001

0800bb1c <_fflush_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	690b      	ldr	r3, [r1, #16]
 800bb20:	4605      	mov	r5, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	b1db      	cbz	r3, 800bb5e <_fflush_r+0x42>
 800bb26:	b118      	cbz	r0, 800bb30 <_fflush_r+0x14>
 800bb28:	6983      	ldr	r3, [r0, #24]
 800bb2a:	b90b      	cbnz	r3, 800bb30 <_fflush_r+0x14>
 800bb2c:	f000 f860 	bl	800bbf0 <__sinit>
 800bb30:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <_fflush_r+0x48>)
 800bb32:	429c      	cmp	r4, r3
 800bb34:	d109      	bne.n	800bb4a <_fflush_r+0x2e>
 800bb36:	686c      	ldr	r4, [r5, #4]
 800bb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb3c:	b17b      	cbz	r3, 800bb5e <_fflush_r+0x42>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4628      	mov	r0, r5
 800bb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb46:	f7ff bf63 	b.w	800ba10 <__sflush_r>
 800bb4a:	4b07      	ldr	r3, [pc, #28]	; (800bb68 <_fflush_r+0x4c>)
 800bb4c:	429c      	cmp	r4, r3
 800bb4e:	d101      	bne.n	800bb54 <_fflush_r+0x38>
 800bb50:	68ac      	ldr	r4, [r5, #8]
 800bb52:	e7f1      	b.n	800bb38 <_fflush_r+0x1c>
 800bb54:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <_fflush_r+0x50>)
 800bb56:	429c      	cmp	r4, r3
 800bb58:	bf08      	it	eq
 800bb5a:	68ec      	ldreq	r4, [r5, #12]
 800bb5c:	e7ec      	b.n	800bb38 <_fflush_r+0x1c>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	bd38      	pop	{r3, r4, r5, pc}
 800bb62:	bf00      	nop
 800bb64:	0800c7d4 	.word	0x0800c7d4
 800bb68:	0800c7f4 	.word	0x0800c7f4
 800bb6c:	0800c7b4 	.word	0x0800c7b4

0800bb70 <std>:
 800bb70:	2300      	movs	r3, #0
 800bb72:	b510      	push	{r4, lr}
 800bb74:	4604      	mov	r4, r0
 800bb76:	e9c0 3300 	strd	r3, r3, [r0]
 800bb7a:	6083      	str	r3, [r0, #8]
 800bb7c:	8181      	strh	r1, [r0, #12]
 800bb7e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb80:	81c2      	strh	r2, [r0, #14]
 800bb82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb86:	6183      	str	r3, [r0, #24]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	2208      	movs	r2, #8
 800bb8c:	305c      	adds	r0, #92	; 0x5c
 800bb8e:	f7ff fd42 	bl	800b616 <memset>
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <std+0x38>)
 800bb94:	6263      	str	r3, [r4, #36]	; 0x24
 800bb96:	4b05      	ldr	r3, [pc, #20]	; (800bbac <std+0x3c>)
 800bb98:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb9a:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <std+0x40>)
 800bb9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb9e:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <std+0x44>)
 800bba0:	6224      	str	r4, [r4, #32]
 800bba2:	6323      	str	r3, [r4, #48]	; 0x30
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	bf00      	nop
 800bba8:	0800c361 	.word	0x0800c361
 800bbac:	0800c383 	.word	0x0800c383
 800bbb0:	0800c3bb 	.word	0x0800c3bb
 800bbb4:	0800c3df 	.word	0x0800c3df

0800bbb8 <_cleanup_r>:
 800bbb8:	4901      	ldr	r1, [pc, #4]	; (800bbc0 <_cleanup_r+0x8>)
 800bbba:	f000 b885 	b.w	800bcc8 <_fwalk_reent>
 800bbbe:	bf00      	nop
 800bbc0:	0800bb1d 	.word	0x0800bb1d

0800bbc4 <__sfmoreglue>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	1e4a      	subs	r2, r1, #1
 800bbc8:	2568      	movs	r5, #104	; 0x68
 800bbca:	4355      	muls	r5, r2
 800bbcc:	460e      	mov	r6, r1
 800bbce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbd2:	f7ff fd77 	bl	800b6c4 <_malloc_r>
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	b140      	cbz	r0, 800bbec <__sfmoreglue+0x28>
 800bbda:	2100      	movs	r1, #0
 800bbdc:	e9c0 1600 	strd	r1, r6, [r0]
 800bbe0:	300c      	adds	r0, #12
 800bbe2:	60a0      	str	r0, [r4, #8]
 800bbe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbe8:	f7ff fd15 	bl	800b616 <memset>
 800bbec:	4620      	mov	r0, r4
 800bbee:	bd70      	pop	{r4, r5, r6, pc}

0800bbf0 <__sinit>:
 800bbf0:	6983      	ldr	r3, [r0, #24]
 800bbf2:	b510      	push	{r4, lr}
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	bb33      	cbnz	r3, 800bc46 <__sinit+0x56>
 800bbf8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bbfc:	6503      	str	r3, [r0, #80]	; 0x50
 800bbfe:	4b12      	ldr	r3, [pc, #72]	; (800bc48 <__sinit+0x58>)
 800bc00:	4a12      	ldr	r2, [pc, #72]	; (800bc4c <__sinit+0x5c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6282      	str	r2, [r0, #40]	; 0x28
 800bc06:	4298      	cmp	r0, r3
 800bc08:	bf04      	itt	eq
 800bc0a:	2301      	moveq	r3, #1
 800bc0c:	6183      	streq	r3, [r0, #24]
 800bc0e:	f000 f81f 	bl	800bc50 <__sfp>
 800bc12:	6060      	str	r0, [r4, #4]
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 f81b 	bl	800bc50 <__sfp>
 800bc1a:	60a0      	str	r0, [r4, #8]
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f000 f817 	bl	800bc50 <__sfp>
 800bc22:	2200      	movs	r2, #0
 800bc24:	60e0      	str	r0, [r4, #12]
 800bc26:	2104      	movs	r1, #4
 800bc28:	6860      	ldr	r0, [r4, #4]
 800bc2a:	f7ff ffa1 	bl	800bb70 <std>
 800bc2e:	2201      	movs	r2, #1
 800bc30:	2109      	movs	r1, #9
 800bc32:	68a0      	ldr	r0, [r4, #8]
 800bc34:	f7ff ff9c 	bl	800bb70 <std>
 800bc38:	2202      	movs	r2, #2
 800bc3a:	2112      	movs	r1, #18
 800bc3c:	68e0      	ldr	r0, [r4, #12]
 800bc3e:	f7ff ff97 	bl	800bb70 <std>
 800bc42:	2301      	movs	r3, #1
 800bc44:	61a3      	str	r3, [r4, #24]
 800bc46:	bd10      	pop	{r4, pc}
 800bc48:	0800c7b0 	.word	0x0800c7b0
 800bc4c:	0800bbb9 	.word	0x0800bbb9

0800bc50 <__sfp>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	4b1b      	ldr	r3, [pc, #108]	; (800bcc0 <__sfp+0x70>)
 800bc54:	681e      	ldr	r6, [r3, #0]
 800bc56:	69b3      	ldr	r3, [r6, #24]
 800bc58:	4607      	mov	r7, r0
 800bc5a:	b913      	cbnz	r3, 800bc62 <__sfp+0x12>
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7ff ffc7 	bl	800bbf0 <__sinit>
 800bc62:	3648      	adds	r6, #72	; 0x48
 800bc64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	d503      	bpl.n	800bc74 <__sfp+0x24>
 800bc6c:	6833      	ldr	r3, [r6, #0]
 800bc6e:	b133      	cbz	r3, 800bc7e <__sfp+0x2e>
 800bc70:	6836      	ldr	r6, [r6, #0]
 800bc72:	e7f7      	b.n	800bc64 <__sfp+0x14>
 800bc74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc78:	b16d      	cbz	r5, 800bc96 <__sfp+0x46>
 800bc7a:	3468      	adds	r4, #104	; 0x68
 800bc7c:	e7f4      	b.n	800bc68 <__sfp+0x18>
 800bc7e:	2104      	movs	r1, #4
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ff9f 	bl	800bbc4 <__sfmoreglue>
 800bc86:	6030      	str	r0, [r6, #0]
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d1f1      	bne.n	800bc70 <__sfp+0x20>
 800bc8c:	230c      	movs	r3, #12
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	4604      	mov	r4, r0
 800bc92:	4620      	mov	r0, r4
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc96:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <__sfp+0x74>)
 800bc98:	6665      	str	r5, [r4, #100]	; 0x64
 800bc9a:	e9c4 5500 	strd	r5, r5, [r4]
 800bc9e:	60a5      	str	r5, [r4, #8]
 800bca0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bca4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	4629      	mov	r1, r5
 800bcac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcb0:	f7ff fcb1 	bl	800b616 <memset>
 800bcb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcbc:	e7e9      	b.n	800bc92 <__sfp+0x42>
 800bcbe:	bf00      	nop
 800bcc0:	0800c7b0 	.word	0x0800c7b0
 800bcc4:	ffff0001 	.word	0xffff0001

0800bcc8 <_fwalk_reent>:
 800bcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bccc:	4680      	mov	r8, r0
 800bcce:	4689      	mov	r9, r1
 800bcd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcd4:	2600      	movs	r6, #0
 800bcd6:	b914      	cbnz	r4, 800bcde <_fwalk_reent+0x16>
 800bcd8:	4630      	mov	r0, r6
 800bcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcde:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bce2:	3f01      	subs	r7, #1
 800bce4:	d501      	bpl.n	800bcea <_fwalk_reent+0x22>
 800bce6:	6824      	ldr	r4, [r4, #0]
 800bce8:	e7f5      	b.n	800bcd6 <_fwalk_reent+0xe>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d907      	bls.n	800bd00 <_fwalk_reent+0x38>
 800bcf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	d003      	beq.n	800bd00 <_fwalk_reent+0x38>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	47c8      	blx	r9
 800bcfe:	4306      	orrs	r6, r0
 800bd00:	3568      	adds	r5, #104	; 0x68
 800bd02:	e7ee      	b.n	800bce2 <_fwalk_reent+0x1a>

0800bd04 <__swhatbuf_r>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	460e      	mov	r6, r1
 800bd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	b096      	sub	sp, #88	; 0x58
 800bd10:	4614      	mov	r4, r2
 800bd12:	461d      	mov	r5, r3
 800bd14:	da07      	bge.n	800bd26 <__swhatbuf_r+0x22>
 800bd16:	2300      	movs	r3, #0
 800bd18:	602b      	str	r3, [r5, #0]
 800bd1a:	89b3      	ldrh	r3, [r6, #12]
 800bd1c:	061a      	lsls	r2, r3, #24
 800bd1e:	d410      	bmi.n	800bd42 <__swhatbuf_r+0x3e>
 800bd20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd24:	e00e      	b.n	800bd44 <__swhatbuf_r+0x40>
 800bd26:	466a      	mov	r2, sp
 800bd28:	f000 fb80 	bl	800c42c <_fstat_r>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dbf2      	blt.n	800bd16 <__swhatbuf_r+0x12>
 800bd30:	9a01      	ldr	r2, [sp, #4]
 800bd32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd3a:	425a      	negs	r2, r3
 800bd3c:	415a      	adcs	r2, r3
 800bd3e:	602a      	str	r2, [r5, #0]
 800bd40:	e7ee      	b.n	800bd20 <__swhatbuf_r+0x1c>
 800bd42:	2340      	movs	r3, #64	; 0x40
 800bd44:	2000      	movs	r0, #0
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	b016      	add	sp, #88	; 0x58
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}

0800bd4c <__smakebuf_r>:
 800bd4c:	898b      	ldrh	r3, [r1, #12]
 800bd4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd50:	079d      	lsls	r5, r3, #30
 800bd52:	4606      	mov	r6, r0
 800bd54:	460c      	mov	r4, r1
 800bd56:	d507      	bpl.n	800bd68 <__smakebuf_r+0x1c>
 800bd58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	2301      	movs	r3, #1
 800bd62:	6163      	str	r3, [r4, #20]
 800bd64:	b002      	add	sp, #8
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	ab01      	add	r3, sp, #4
 800bd6a:	466a      	mov	r2, sp
 800bd6c:	f7ff ffca 	bl	800bd04 <__swhatbuf_r>
 800bd70:	9900      	ldr	r1, [sp, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff fca5 	bl	800b6c4 <_malloc_r>
 800bd7a:	b948      	cbnz	r0, 800bd90 <__smakebuf_r+0x44>
 800bd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd80:	059a      	lsls	r2, r3, #22
 800bd82:	d4ef      	bmi.n	800bd64 <__smakebuf_r+0x18>
 800bd84:	f023 0303 	bic.w	r3, r3, #3
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	e7e3      	b.n	800bd58 <__smakebuf_r+0xc>
 800bd90:	4b0d      	ldr	r3, [pc, #52]	; (800bdc8 <__smakebuf_r+0x7c>)
 800bd92:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	6020      	str	r0, [r4, #0]
 800bd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	9b00      	ldr	r3, [sp, #0]
 800bda0:	6163      	str	r3, [r4, #20]
 800bda2:	9b01      	ldr	r3, [sp, #4]
 800bda4:	6120      	str	r0, [r4, #16]
 800bda6:	b15b      	cbz	r3, 800bdc0 <__smakebuf_r+0x74>
 800bda8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdac:	4630      	mov	r0, r6
 800bdae:	f000 fb4f 	bl	800c450 <_isatty_r>
 800bdb2:	b128      	cbz	r0, 800bdc0 <__smakebuf_r+0x74>
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f023 0303 	bic.w	r3, r3, #3
 800bdba:	f043 0301 	orr.w	r3, r3, #1
 800bdbe:	81a3      	strh	r3, [r4, #12]
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	431d      	orrs	r5, r3
 800bdc4:	81a5      	strh	r5, [r4, #12]
 800bdc6:	e7cd      	b.n	800bd64 <__smakebuf_r+0x18>
 800bdc8:	0800bbb9 	.word	0x0800bbb9

0800bdcc <__malloc_lock>:
 800bdcc:	4770      	bx	lr

0800bdce <__malloc_unlock>:
 800bdce:	4770      	bx	lr

0800bdd0 <__sfputc_r>:
 800bdd0:	6893      	ldr	r3, [r2, #8]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	b410      	push	{r4}
 800bdd8:	6093      	str	r3, [r2, #8]
 800bdda:	da08      	bge.n	800bdee <__sfputc_r+0x1e>
 800bddc:	6994      	ldr	r4, [r2, #24]
 800bdde:	42a3      	cmp	r3, r4
 800bde0:	db01      	blt.n	800bde6 <__sfputc_r+0x16>
 800bde2:	290a      	cmp	r1, #10
 800bde4:	d103      	bne.n	800bdee <__sfputc_r+0x1e>
 800bde6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdea:	f7ff bd51 	b.w	800b890 <__swbuf_r>
 800bdee:	6813      	ldr	r3, [r2, #0]
 800bdf0:	1c58      	adds	r0, r3, #1
 800bdf2:	6010      	str	r0, [r2, #0]
 800bdf4:	7019      	strb	r1, [r3, #0]
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <__sfputs_r>:
 800bdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be00:	4606      	mov	r6, r0
 800be02:	460f      	mov	r7, r1
 800be04:	4614      	mov	r4, r2
 800be06:	18d5      	adds	r5, r2, r3
 800be08:	42ac      	cmp	r4, r5
 800be0a:	d101      	bne.n	800be10 <__sfputs_r+0x12>
 800be0c:	2000      	movs	r0, #0
 800be0e:	e007      	b.n	800be20 <__sfputs_r+0x22>
 800be10:	463a      	mov	r2, r7
 800be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff ffda 	bl	800bdd0 <__sfputc_r>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d1f3      	bne.n	800be08 <__sfputs_r+0xa>
 800be20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be24 <_vfiprintf_r>:
 800be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	460c      	mov	r4, r1
 800be2a:	b09d      	sub	sp, #116	; 0x74
 800be2c:	4617      	mov	r7, r2
 800be2e:	461d      	mov	r5, r3
 800be30:	4606      	mov	r6, r0
 800be32:	b118      	cbz	r0, 800be3c <_vfiprintf_r+0x18>
 800be34:	6983      	ldr	r3, [r0, #24]
 800be36:	b90b      	cbnz	r3, 800be3c <_vfiprintf_r+0x18>
 800be38:	f7ff feda 	bl	800bbf0 <__sinit>
 800be3c:	4b7c      	ldr	r3, [pc, #496]	; (800c030 <_vfiprintf_r+0x20c>)
 800be3e:	429c      	cmp	r4, r3
 800be40:	d158      	bne.n	800bef4 <_vfiprintf_r+0xd0>
 800be42:	6874      	ldr	r4, [r6, #4]
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	0718      	lsls	r0, r3, #28
 800be48:	d55e      	bpl.n	800bf08 <_vfiprintf_r+0xe4>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d05b      	beq.n	800bf08 <_vfiprintf_r+0xe4>
 800be50:	2300      	movs	r3, #0
 800be52:	9309      	str	r3, [sp, #36]	; 0x24
 800be54:	2320      	movs	r3, #32
 800be56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be5a:	2330      	movs	r3, #48	; 0x30
 800be5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be60:	9503      	str	r5, [sp, #12]
 800be62:	f04f 0b01 	mov.w	fp, #1
 800be66:	46b8      	mov	r8, r7
 800be68:	4645      	mov	r5, r8
 800be6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be6e:	b10b      	cbz	r3, 800be74 <_vfiprintf_r+0x50>
 800be70:	2b25      	cmp	r3, #37	; 0x25
 800be72:	d154      	bne.n	800bf1e <_vfiprintf_r+0xfa>
 800be74:	ebb8 0a07 	subs.w	sl, r8, r7
 800be78:	d00b      	beq.n	800be92 <_vfiprintf_r+0x6e>
 800be7a:	4653      	mov	r3, sl
 800be7c:	463a      	mov	r2, r7
 800be7e:	4621      	mov	r1, r4
 800be80:	4630      	mov	r0, r6
 800be82:	f7ff ffbc 	bl	800bdfe <__sfputs_r>
 800be86:	3001      	adds	r0, #1
 800be88:	f000 80c2 	beq.w	800c010 <_vfiprintf_r+0x1ec>
 800be8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8e:	4453      	add	r3, sl
 800be90:	9309      	str	r3, [sp, #36]	; 0x24
 800be92:	f898 3000 	ldrb.w	r3, [r8]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 80ba 	beq.w	800c010 <_vfiprintf_r+0x1ec>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bea6:	9304      	str	r3, [sp, #16]
 800bea8:	9307      	str	r3, [sp, #28]
 800beaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beae:	931a      	str	r3, [sp, #104]	; 0x68
 800beb0:	46a8      	mov	r8, r5
 800beb2:	2205      	movs	r2, #5
 800beb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800beb8:	485e      	ldr	r0, [pc, #376]	; (800c034 <_vfiprintf_r+0x210>)
 800beba:	f7f4 f9c1 	bl	8000240 <memchr>
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	bb78      	cbnz	r0, 800bf22 <_vfiprintf_r+0xfe>
 800bec2:	06d9      	lsls	r1, r3, #27
 800bec4:	bf44      	itt	mi
 800bec6:	2220      	movmi	r2, #32
 800bec8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800becc:	071a      	lsls	r2, r3, #28
 800bece:	bf44      	itt	mi
 800bed0:	222b      	movmi	r2, #43	; 0x2b
 800bed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bed6:	782a      	ldrb	r2, [r5, #0]
 800bed8:	2a2a      	cmp	r2, #42	; 0x2a
 800beda:	d02a      	beq.n	800bf32 <_vfiprintf_r+0x10e>
 800bedc:	9a07      	ldr	r2, [sp, #28]
 800bede:	46a8      	mov	r8, r5
 800bee0:	2000      	movs	r0, #0
 800bee2:	250a      	movs	r5, #10
 800bee4:	4641      	mov	r1, r8
 800bee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beea:	3b30      	subs	r3, #48	; 0x30
 800beec:	2b09      	cmp	r3, #9
 800beee:	d969      	bls.n	800bfc4 <_vfiprintf_r+0x1a0>
 800bef0:	b360      	cbz	r0, 800bf4c <_vfiprintf_r+0x128>
 800bef2:	e024      	b.n	800bf3e <_vfiprintf_r+0x11a>
 800bef4:	4b50      	ldr	r3, [pc, #320]	; (800c038 <_vfiprintf_r+0x214>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <_vfiprintf_r+0xda>
 800befa:	68b4      	ldr	r4, [r6, #8]
 800befc:	e7a2      	b.n	800be44 <_vfiprintf_r+0x20>
 800befe:	4b4f      	ldr	r3, [pc, #316]	; (800c03c <_vfiprintf_r+0x218>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68f4      	ldreq	r4, [r6, #12]
 800bf06:	e79d      	b.n	800be44 <_vfiprintf_r+0x20>
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7ff fd12 	bl	800b934 <__swsetup_r>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d09d      	beq.n	800be50 <_vfiprintf_r+0x2c>
 800bf14:	f04f 30ff 	mov.w	r0, #4294967295
 800bf18:	b01d      	add	sp, #116	; 0x74
 800bf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1e:	46a8      	mov	r8, r5
 800bf20:	e7a2      	b.n	800be68 <_vfiprintf_r+0x44>
 800bf22:	4a44      	ldr	r2, [pc, #272]	; (800c034 <_vfiprintf_r+0x210>)
 800bf24:	1a80      	subs	r0, r0, r2
 800bf26:	fa0b f000 	lsl.w	r0, fp, r0
 800bf2a:	4318      	orrs	r0, r3
 800bf2c:	9004      	str	r0, [sp, #16]
 800bf2e:	4645      	mov	r5, r8
 800bf30:	e7be      	b.n	800beb0 <_vfiprintf_r+0x8c>
 800bf32:	9a03      	ldr	r2, [sp, #12]
 800bf34:	1d11      	adds	r1, r2, #4
 800bf36:	6812      	ldr	r2, [r2, #0]
 800bf38:	9103      	str	r1, [sp, #12]
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	db01      	blt.n	800bf42 <_vfiprintf_r+0x11e>
 800bf3e:	9207      	str	r2, [sp, #28]
 800bf40:	e004      	b.n	800bf4c <_vfiprintf_r+0x128>
 800bf42:	4252      	negs	r2, r2
 800bf44:	f043 0302 	orr.w	r3, r3, #2
 800bf48:	9207      	str	r2, [sp, #28]
 800bf4a:	9304      	str	r3, [sp, #16]
 800bf4c:	f898 3000 	ldrb.w	r3, [r8]
 800bf50:	2b2e      	cmp	r3, #46	; 0x2e
 800bf52:	d10e      	bne.n	800bf72 <_vfiprintf_r+0x14e>
 800bf54:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bf58:	2b2a      	cmp	r3, #42	; 0x2a
 800bf5a:	d138      	bne.n	800bfce <_vfiprintf_r+0x1aa>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9203      	str	r2, [sp, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	bfb8      	it	lt
 800bf68:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf6c:	f108 0802 	add.w	r8, r8, #2
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	4d33      	ldr	r5, [pc, #204]	; (800c040 <_vfiprintf_r+0x21c>)
 800bf74:	f898 1000 	ldrb.w	r1, [r8]
 800bf78:	2203      	movs	r2, #3
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7f4 f960 	bl	8000240 <memchr>
 800bf80:	b140      	cbz	r0, 800bf94 <_vfiprintf_r+0x170>
 800bf82:	2340      	movs	r3, #64	; 0x40
 800bf84:	1b40      	subs	r0, r0, r5
 800bf86:	fa03 f000 	lsl.w	r0, r3, r0
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	4303      	orrs	r3, r0
 800bf8e:	f108 0801 	add.w	r8, r8, #1
 800bf92:	9304      	str	r3, [sp, #16]
 800bf94:	f898 1000 	ldrb.w	r1, [r8]
 800bf98:	482a      	ldr	r0, [pc, #168]	; (800c044 <_vfiprintf_r+0x220>)
 800bf9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf9e:	2206      	movs	r2, #6
 800bfa0:	f108 0701 	add.w	r7, r8, #1
 800bfa4:	f7f4 f94c 	bl	8000240 <memchr>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d037      	beq.n	800c01c <_vfiprintf_r+0x1f8>
 800bfac:	4b26      	ldr	r3, [pc, #152]	; (800c048 <_vfiprintf_r+0x224>)
 800bfae:	bb1b      	cbnz	r3, 800bff8 <_vfiprintf_r+0x1d4>
 800bfb0:	9b03      	ldr	r3, [sp, #12]
 800bfb2:	3307      	adds	r3, #7
 800bfb4:	f023 0307 	bic.w	r3, r3, #7
 800bfb8:	3308      	adds	r3, #8
 800bfba:	9303      	str	r3, [sp, #12]
 800bfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbe:	444b      	add	r3, r9
 800bfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc2:	e750      	b.n	800be66 <_vfiprintf_r+0x42>
 800bfc4:	fb05 3202 	mla	r2, r5, r2, r3
 800bfc8:	2001      	movs	r0, #1
 800bfca:	4688      	mov	r8, r1
 800bfcc:	e78a      	b.n	800bee4 <_vfiprintf_r+0xc0>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f108 0801 	add.w	r8, r8, #1
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	250a      	movs	r5, #10
 800bfda:	4640      	mov	r0, r8
 800bfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe0:	3a30      	subs	r2, #48	; 0x30
 800bfe2:	2a09      	cmp	r2, #9
 800bfe4:	d903      	bls.n	800bfee <_vfiprintf_r+0x1ca>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0c3      	beq.n	800bf72 <_vfiprintf_r+0x14e>
 800bfea:	9105      	str	r1, [sp, #20]
 800bfec:	e7c1      	b.n	800bf72 <_vfiprintf_r+0x14e>
 800bfee:	fb05 2101 	mla	r1, r5, r1, r2
 800bff2:	2301      	movs	r3, #1
 800bff4:	4680      	mov	r8, r0
 800bff6:	e7f0      	b.n	800bfda <_vfiprintf_r+0x1b6>
 800bff8:	ab03      	add	r3, sp, #12
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	4622      	mov	r2, r4
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <_vfiprintf_r+0x228>)
 800c000:	a904      	add	r1, sp, #16
 800c002:	4630      	mov	r0, r6
 800c004:	f3af 8000 	nop.w
 800c008:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c00c:	4681      	mov	r9, r0
 800c00e:	d1d5      	bne.n	800bfbc <_vfiprintf_r+0x198>
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	065b      	lsls	r3, r3, #25
 800c014:	f53f af7e 	bmi.w	800bf14 <_vfiprintf_r+0xf0>
 800c018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c01a:	e77d      	b.n	800bf18 <_vfiprintf_r+0xf4>
 800c01c:	ab03      	add	r3, sp, #12
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	4622      	mov	r2, r4
 800c022:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <_vfiprintf_r+0x228>)
 800c024:	a904      	add	r1, sp, #16
 800c026:	4630      	mov	r0, r6
 800c028:	f000 f888 	bl	800c13c <_printf_i>
 800c02c:	e7ec      	b.n	800c008 <_vfiprintf_r+0x1e4>
 800c02e:	bf00      	nop
 800c030:	0800c7d4 	.word	0x0800c7d4
 800c034:	0800c814 	.word	0x0800c814
 800c038:	0800c7f4 	.word	0x0800c7f4
 800c03c:	0800c7b4 	.word	0x0800c7b4
 800c040:	0800c81a 	.word	0x0800c81a
 800c044:	0800c81e 	.word	0x0800c81e
 800c048:	00000000 	.word	0x00000000
 800c04c:	0800bdff 	.word	0x0800bdff

0800c050 <_printf_common>:
 800c050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c054:	4691      	mov	r9, r2
 800c056:	461f      	mov	r7, r3
 800c058:	688a      	ldr	r2, [r1, #8]
 800c05a:	690b      	ldr	r3, [r1, #16]
 800c05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c060:	4293      	cmp	r3, r2
 800c062:	bfb8      	it	lt
 800c064:	4613      	movlt	r3, r2
 800c066:	f8c9 3000 	str.w	r3, [r9]
 800c06a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c06e:	4606      	mov	r6, r0
 800c070:	460c      	mov	r4, r1
 800c072:	b112      	cbz	r2, 800c07a <_printf_common+0x2a>
 800c074:	3301      	adds	r3, #1
 800c076:	f8c9 3000 	str.w	r3, [r9]
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	0699      	lsls	r1, r3, #26
 800c07e:	bf42      	ittt	mi
 800c080:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c084:	3302      	addmi	r3, #2
 800c086:	f8c9 3000 	strmi.w	r3, [r9]
 800c08a:	6825      	ldr	r5, [r4, #0]
 800c08c:	f015 0506 	ands.w	r5, r5, #6
 800c090:	d107      	bne.n	800c0a2 <_printf_common+0x52>
 800c092:	f104 0a19 	add.w	sl, r4, #25
 800c096:	68e3      	ldr	r3, [r4, #12]
 800c098:	f8d9 2000 	ldr.w	r2, [r9]
 800c09c:	1a9b      	subs	r3, r3, r2
 800c09e:	42ab      	cmp	r3, r5
 800c0a0:	dc28      	bgt.n	800c0f4 <_printf_common+0xa4>
 800c0a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c0a6:	6822      	ldr	r2, [r4, #0]
 800c0a8:	3300      	adds	r3, #0
 800c0aa:	bf18      	it	ne
 800c0ac:	2301      	movne	r3, #1
 800c0ae:	0692      	lsls	r2, r2, #26
 800c0b0:	d42d      	bmi.n	800c10e <_printf_common+0xbe>
 800c0b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	47c0      	blx	r8
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d020      	beq.n	800c102 <_printf_common+0xb2>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	68e5      	ldr	r5, [r4, #12]
 800c0c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c0c8:	f003 0306 	and.w	r3, r3, #6
 800c0cc:	2b04      	cmp	r3, #4
 800c0ce:	bf08      	it	eq
 800c0d0:	1aad      	subeq	r5, r5, r2
 800c0d2:	68a3      	ldr	r3, [r4, #8]
 800c0d4:	6922      	ldr	r2, [r4, #16]
 800c0d6:	bf0c      	ite	eq
 800c0d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0dc:	2500      	movne	r5, #0
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	bfc4      	itt	gt
 800c0e2:	1a9b      	subgt	r3, r3, r2
 800c0e4:	18ed      	addgt	r5, r5, r3
 800c0e6:	f04f 0900 	mov.w	r9, #0
 800c0ea:	341a      	adds	r4, #26
 800c0ec:	454d      	cmp	r5, r9
 800c0ee:	d11a      	bne.n	800c126 <_printf_common+0xd6>
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	e008      	b.n	800c106 <_printf_common+0xb6>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	4652      	mov	r2, sl
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	47c0      	blx	r8
 800c0fe:	3001      	adds	r0, #1
 800c100:	d103      	bne.n	800c10a <_printf_common+0xba>
 800c102:	f04f 30ff 	mov.w	r0, #4294967295
 800c106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10a:	3501      	adds	r5, #1
 800c10c:	e7c3      	b.n	800c096 <_printf_common+0x46>
 800c10e:	18e1      	adds	r1, r4, r3
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	2030      	movs	r0, #48	; 0x30
 800c114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c118:	4422      	add	r2, r4
 800c11a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c11e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c122:	3302      	adds	r3, #2
 800c124:	e7c5      	b.n	800c0b2 <_printf_common+0x62>
 800c126:	2301      	movs	r3, #1
 800c128:	4622      	mov	r2, r4
 800c12a:	4639      	mov	r1, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	47c0      	blx	r8
 800c130:	3001      	adds	r0, #1
 800c132:	d0e6      	beq.n	800c102 <_printf_common+0xb2>
 800c134:	f109 0901 	add.w	r9, r9, #1
 800c138:	e7d8      	b.n	800c0ec <_printf_common+0x9c>
	...

0800c13c <_printf_i>:
 800c13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c144:	460c      	mov	r4, r1
 800c146:	7e09      	ldrb	r1, [r1, #24]
 800c148:	b085      	sub	sp, #20
 800c14a:	296e      	cmp	r1, #110	; 0x6e
 800c14c:	4617      	mov	r7, r2
 800c14e:	4606      	mov	r6, r0
 800c150:	4698      	mov	r8, r3
 800c152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c154:	f000 80b3 	beq.w	800c2be <_printf_i+0x182>
 800c158:	d822      	bhi.n	800c1a0 <_printf_i+0x64>
 800c15a:	2963      	cmp	r1, #99	; 0x63
 800c15c:	d036      	beq.n	800c1cc <_printf_i+0x90>
 800c15e:	d80a      	bhi.n	800c176 <_printf_i+0x3a>
 800c160:	2900      	cmp	r1, #0
 800c162:	f000 80b9 	beq.w	800c2d8 <_printf_i+0x19c>
 800c166:	2958      	cmp	r1, #88	; 0x58
 800c168:	f000 8083 	beq.w	800c272 <_printf_i+0x136>
 800c16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c174:	e032      	b.n	800c1dc <_printf_i+0xa0>
 800c176:	2964      	cmp	r1, #100	; 0x64
 800c178:	d001      	beq.n	800c17e <_printf_i+0x42>
 800c17a:	2969      	cmp	r1, #105	; 0x69
 800c17c:	d1f6      	bne.n	800c16c <_printf_i+0x30>
 800c17e:	6820      	ldr	r0, [r4, #0]
 800c180:	6813      	ldr	r3, [r2, #0]
 800c182:	0605      	lsls	r5, r0, #24
 800c184:	f103 0104 	add.w	r1, r3, #4
 800c188:	d52a      	bpl.n	800c1e0 <_printf_i+0xa4>
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	6011      	str	r1, [r2, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da03      	bge.n	800c19a <_printf_i+0x5e>
 800c192:	222d      	movs	r2, #45	; 0x2d
 800c194:	425b      	negs	r3, r3
 800c196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c19a:	486f      	ldr	r0, [pc, #444]	; (800c358 <_printf_i+0x21c>)
 800c19c:	220a      	movs	r2, #10
 800c19e:	e039      	b.n	800c214 <_printf_i+0xd8>
 800c1a0:	2973      	cmp	r1, #115	; 0x73
 800c1a2:	f000 809d 	beq.w	800c2e0 <_printf_i+0x1a4>
 800c1a6:	d808      	bhi.n	800c1ba <_printf_i+0x7e>
 800c1a8:	296f      	cmp	r1, #111	; 0x6f
 800c1aa:	d020      	beq.n	800c1ee <_printf_i+0xb2>
 800c1ac:	2970      	cmp	r1, #112	; 0x70
 800c1ae:	d1dd      	bne.n	800c16c <_printf_i+0x30>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	f043 0320 	orr.w	r3, r3, #32
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	e003      	b.n	800c1c2 <_printf_i+0x86>
 800c1ba:	2975      	cmp	r1, #117	; 0x75
 800c1bc:	d017      	beq.n	800c1ee <_printf_i+0xb2>
 800c1be:	2978      	cmp	r1, #120	; 0x78
 800c1c0:	d1d4      	bne.n	800c16c <_printf_i+0x30>
 800c1c2:	2378      	movs	r3, #120	; 0x78
 800c1c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c1c8:	4864      	ldr	r0, [pc, #400]	; (800c35c <_printf_i+0x220>)
 800c1ca:	e055      	b.n	800c278 <_printf_i+0x13c>
 800c1cc:	6813      	ldr	r3, [r2, #0]
 800c1ce:	1d19      	adds	r1, r3, #4
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	6011      	str	r1, [r2, #0]
 800c1d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e08c      	b.n	800c2fa <_printf_i+0x1be>
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6011      	str	r1, [r2, #0]
 800c1e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1e8:	bf18      	it	ne
 800c1ea:	b21b      	sxthne	r3, r3
 800c1ec:	e7cf      	b.n	800c18e <_printf_i+0x52>
 800c1ee:	6813      	ldr	r3, [r2, #0]
 800c1f0:	6825      	ldr	r5, [r4, #0]
 800c1f2:	1d18      	adds	r0, r3, #4
 800c1f4:	6010      	str	r0, [r2, #0]
 800c1f6:	0628      	lsls	r0, r5, #24
 800c1f8:	d501      	bpl.n	800c1fe <_printf_i+0xc2>
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	e002      	b.n	800c204 <_printf_i+0xc8>
 800c1fe:	0668      	lsls	r0, r5, #25
 800c200:	d5fb      	bpl.n	800c1fa <_printf_i+0xbe>
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	4854      	ldr	r0, [pc, #336]	; (800c358 <_printf_i+0x21c>)
 800c206:	296f      	cmp	r1, #111	; 0x6f
 800c208:	bf14      	ite	ne
 800c20a:	220a      	movne	r2, #10
 800c20c:	2208      	moveq	r2, #8
 800c20e:	2100      	movs	r1, #0
 800c210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c214:	6865      	ldr	r5, [r4, #4]
 800c216:	60a5      	str	r5, [r4, #8]
 800c218:	2d00      	cmp	r5, #0
 800c21a:	f2c0 8095 	blt.w	800c348 <_printf_i+0x20c>
 800c21e:	6821      	ldr	r1, [r4, #0]
 800c220:	f021 0104 	bic.w	r1, r1, #4
 800c224:	6021      	str	r1, [r4, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d13d      	bne.n	800c2a6 <_printf_i+0x16a>
 800c22a:	2d00      	cmp	r5, #0
 800c22c:	f040 808e 	bne.w	800c34c <_printf_i+0x210>
 800c230:	4665      	mov	r5, ip
 800c232:	2a08      	cmp	r2, #8
 800c234:	d10b      	bne.n	800c24e <_printf_i+0x112>
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	07db      	lsls	r3, r3, #31
 800c23a:	d508      	bpl.n	800c24e <_printf_i+0x112>
 800c23c:	6923      	ldr	r3, [r4, #16]
 800c23e:	6862      	ldr	r2, [r4, #4]
 800c240:	429a      	cmp	r2, r3
 800c242:	bfde      	ittt	le
 800c244:	2330      	movle	r3, #48	; 0x30
 800c246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c24a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c24e:	ebac 0305 	sub.w	r3, ip, r5
 800c252:	6123      	str	r3, [r4, #16]
 800c254:	f8cd 8000 	str.w	r8, [sp]
 800c258:	463b      	mov	r3, r7
 800c25a:	aa03      	add	r2, sp, #12
 800c25c:	4621      	mov	r1, r4
 800c25e:	4630      	mov	r0, r6
 800c260:	f7ff fef6 	bl	800c050 <_printf_common>
 800c264:	3001      	adds	r0, #1
 800c266:	d14d      	bne.n	800c304 <_printf_i+0x1c8>
 800c268:	f04f 30ff 	mov.w	r0, #4294967295
 800c26c:	b005      	add	sp, #20
 800c26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c272:	4839      	ldr	r0, [pc, #228]	; (800c358 <_printf_i+0x21c>)
 800c274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c278:	6813      	ldr	r3, [r2, #0]
 800c27a:	6821      	ldr	r1, [r4, #0]
 800c27c:	1d1d      	adds	r5, r3, #4
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6015      	str	r5, [r2, #0]
 800c282:	060a      	lsls	r2, r1, #24
 800c284:	d50b      	bpl.n	800c29e <_printf_i+0x162>
 800c286:	07ca      	lsls	r2, r1, #31
 800c288:	bf44      	itt	mi
 800c28a:	f041 0120 	orrmi.w	r1, r1, #32
 800c28e:	6021      	strmi	r1, [r4, #0]
 800c290:	b91b      	cbnz	r3, 800c29a <_printf_i+0x15e>
 800c292:	6822      	ldr	r2, [r4, #0]
 800c294:	f022 0220 	bic.w	r2, r2, #32
 800c298:	6022      	str	r2, [r4, #0]
 800c29a:	2210      	movs	r2, #16
 800c29c:	e7b7      	b.n	800c20e <_printf_i+0xd2>
 800c29e:	064d      	lsls	r5, r1, #25
 800c2a0:	bf48      	it	mi
 800c2a2:	b29b      	uxthmi	r3, r3
 800c2a4:	e7ef      	b.n	800c286 <_printf_i+0x14a>
 800c2a6:	4665      	mov	r5, ip
 800c2a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2ac:	fb02 3311 	mls	r3, r2, r1, r3
 800c2b0:	5cc3      	ldrb	r3, [r0, r3]
 800c2b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	d1f5      	bne.n	800c2a8 <_printf_i+0x16c>
 800c2bc:	e7b9      	b.n	800c232 <_printf_i+0xf6>
 800c2be:	6813      	ldr	r3, [r2, #0]
 800c2c0:	6825      	ldr	r5, [r4, #0]
 800c2c2:	6961      	ldr	r1, [r4, #20]
 800c2c4:	1d18      	adds	r0, r3, #4
 800c2c6:	6010      	str	r0, [r2, #0]
 800c2c8:	0628      	lsls	r0, r5, #24
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	d501      	bpl.n	800c2d2 <_printf_i+0x196>
 800c2ce:	6019      	str	r1, [r3, #0]
 800c2d0:	e002      	b.n	800c2d8 <_printf_i+0x19c>
 800c2d2:	066a      	lsls	r2, r5, #25
 800c2d4:	d5fb      	bpl.n	800c2ce <_printf_i+0x192>
 800c2d6:	8019      	strh	r1, [r3, #0]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	6123      	str	r3, [r4, #16]
 800c2dc:	4665      	mov	r5, ip
 800c2de:	e7b9      	b.n	800c254 <_printf_i+0x118>
 800c2e0:	6813      	ldr	r3, [r2, #0]
 800c2e2:	1d19      	adds	r1, r3, #4
 800c2e4:	6011      	str	r1, [r2, #0]
 800c2e6:	681d      	ldr	r5, [r3, #0]
 800c2e8:	6862      	ldr	r2, [r4, #4]
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f7f3 ffa7 	bl	8000240 <memchr>
 800c2f2:	b108      	cbz	r0, 800c2f8 <_printf_i+0x1bc>
 800c2f4:	1b40      	subs	r0, r0, r5
 800c2f6:	6060      	str	r0, [r4, #4]
 800c2f8:	6863      	ldr	r3, [r4, #4]
 800c2fa:	6123      	str	r3, [r4, #16]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c302:	e7a7      	b.n	800c254 <_printf_i+0x118>
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	462a      	mov	r2, r5
 800c308:	4639      	mov	r1, r7
 800c30a:	4630      	mov	r0, r6
 800c30c:	47c0      	blx	r8
 800c30e:	3001      	adds	r0, #1
 800c310:	d0aa      	beq.n	800c268 <_printf_i+0x12c>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	079b      	lsls	r3, r3, #30
 800c316:	d413      	bmi.n	800c340 <_printf_i+0x204>
 800c318:	68e0      	ldr	r0, [r4, #12]
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	4298      	cmp	r0, r3
 800c31e:	bfb8      	it	lt
 800c320:	4618      	movlt	r0, r3
 800c322:	e7a3      	b.n	800c26c <_printf_i+0x130>
 800c324:	2301      	movs	r3, #1
 800c326:	464a      	mov	r2, r9
 800c328:	4639      	mov	r1, r7
 800c32a:	4630      	mov	r0, r6
 800c32c:	47c0      	blx	r8
 800c32e:	3001      	adds	r0, #1
 800c330:	d09a      	beq.n	800c268 <_printf_i+0x12c>
 800c332:	3501      	adds	r5, #1
 800c334:	68e3      	ldr	r3, [r4, #12]
 800c336:	9a03      	ldr	r2, [sp, #12]
 800c338:	1a9b      	subs	r3, r3, r2
 800c33a:	42ab      	cmp	r3, r5
 800c33c:	dcf2      	bgt.n	800c324 <_printf_i+0x1e8>
 800c33e:	e7eb      	b.n	800c318 <_printf_i+0x1dc>
 800c340:	2500      	movs	r5, #0
 800c342:	f104 0919 	add.w	r9, r4, #25
 800c346:	e7f5      	b.n	800c334 <_printf_i+0x1f8>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1ac      	bne.n	800c2a6 <_printf_i+0x16a>
 800c34c:	7803      	ldrb	r3, [r0, #0]
 800c34e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c356:	e76c      	b.n	800c232 <_printf_i+0xf6>
 800c358:	0800c825 	.word	0x0800c825
 800c35c:	0800c836 	.word	0x0800c836

0800c360 <__sread>:
 800c360:	b510      	push	{r4, lr}
 800c362:	460c      	mov	r4, r1
 800c364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c368:	f000 f894 	bl	800c494 <_read_r>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	bfab      	itete	ge
 800c370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c372:	89a3      	ldrhlt	r3, [r4, #12]
 800c374:	181b      	addge	r3, r3, r0
 800c376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c37a:	bfac      	ite	ge
 800c37c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c37e:	81a3      	strhlt	r3, [r4, #12]
 800c380:	bd10      	pop	{r4, pc}

0800c382 <__swrite>:
 800c382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c386:	461f      	mov	r7, r3
 800c388:	898b      	ldrh	r3, [r1, #12]
 800c38a:	05db      	lsls	r3, r3, #23
 800c38c:	4605      	mov	r5, r0
 800c38e:	460c      	mov	r4, r1
 800c390:	4616      	mov	r6, r2
 800c392:	d505      	bpl.n	800c3a0 <__swrite+0x1e>
 800c394:	2302      	movs	r3, #2
 800c396:	2200      	movs	r2, #0
 800c398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39c:	f000 f868 	bl	800c470 <_lseek_r>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	4632      	mov	r2, r6
 800c3ae:	463b      	mov	r3, r7
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b6:	f000 b817 	b.w	800c3e8 <_write_r>

0800c3ba <__sseek>:
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	460c      	mov	r4, r1
 800c3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c2:	f000 f855 	bl	800c470 <_lseek_r>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	bf15      	itete	ne
 800c3cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3d6:	81a3      	strheq	r3, [r4, #12]
 800c3d8:	bf18      	it	ne
 800c3da:	81a3      	strhne	r3, [r4, #12]
 800c3dc:	bd10      	pop	{r4, pc}

0800c3de <__sclose>:
 800c3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e2:	f000 b813 	b.w	800c40c <_close_r>
	...

0800c3e8 <_write_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4c07      	ldr	r4, [pc, #28]	; (800c408 <_write_r+0x20>)
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	6022      	str	r2, [r4, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f7f4 fcd9 	bl	8000dae <_write>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_write_r+0x1e>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	b103      	cbz	r3, 800c406 <_write_r+0x1e>
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20011388 	.word	0x20011388

0800c40c <_close_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4c06      	ldr	r4, [pc, #24]	; (800c428 <_close_r+0x1c>)
 800c410:	2300      	movs	r3, #0
 800c412:	4605      	mov	r5, r0
 800c414:	4608      	mov	r0, r1
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	f7f4 fce5 	bl	8000de6 <_close>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_close_r+0x1a>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	b103      	cbz	r3, 800c426 <_close_r+0x1a>
 800c424:	602b      	str	r3, [r5, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20011388 	.word	0x20011388

0800c42c <_fstat_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4c07      	ldr	r4, [pc, #28]	; (800c44c <_fstat_r+0x20>)
 800c430:	2300      	movs	r3, #0
 800c432:	4605      	mov	r5, r0
 800c434:	4608      	mov	r0, r1
 800c436:	4611      	mov	r1, r2
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	f7f4 fce0 	bl	8000dfe <_fstat>
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d102      	bne.n	800c448 <_fstat_r+0x1c>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	b103      	cbz	r3, 800c448 <_fstat_r+0x1c>
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	bd38      	pop	{r3, r4, r5, pc}
 800c44a:	bf00      	nop
 800c44c:	20011388 	.word	0x20011388

0800c450 <_isatty_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4c06      	ldr	r4, [pc, #24]	; (800c46c <_isatty_r+0x1c>)
 800c454:	2300      	movs	r3, #0
 800c456:	4605      	mov	r5, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	f7f4 fcdf 	bl	8000e1e <_isatty>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_isatty_r+0x1a>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	b103      	cbz	r3, 800c46a <_isatty_r+0x1a>
 800c468:	602b      	str	r3, [r5, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20011388 	.word	0x20011388

0800c470 <_lseek_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4c07      	ldr	r4, [pc, #28]	; (800c490 <_lseek_r+0x20>)
 800c474:	4605      	mov	r5, r0
 800c476:	4608      	mov	r0, r1
 800c478:	4611      	mov	r1, r2
 800c47a:	2200      	movs	r2, #0
 800c47c:	6022      	str	r2, [r4, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	f7f4 fcd8 	bl	8000e34 <_lseek>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d102      	bne.n	800c48e <_lseek_r+0x1e>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	b103      	cbz	r3, 800c48e <_lseek_r+0x1e>
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	20011388 	.word	0x20011388

0800c494 <_read_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4c07      	ldr	r4, [pc, #28]	; (800c4b4 <_read_r+0x20>)
 800c498:	4605      	mov	r5, r0
 800c49a:	4608      	mov	r0, r1
 800c49c:	4611      	mov	r1, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6022      	str	r2, [r4, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	f7f4 fc66 	bl	8000d74 <_read>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_read_r+0x1e>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_read_r+0x1e>
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	20011388 	.word	0x20011388

0800c4b8 <_init>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	bf00      	nop
 800c4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4be:	bc08      	pop	{r3}
 800c4c0:	469e      	mov	lr, r3
 800c4c2:	4770      	bx	lr

0800c4c4 <_fini>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	bf00      	nop
 800c4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ca:	bc08      	pop	{r3}
 800c4cc:	469e      	mov	lr, r3
 800c4ce:	4770      	bx	lr
